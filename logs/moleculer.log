{"ts":1744827039445,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039445,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039446,"level":"info","msg":"Node ID: daniels-macbook-pro.local-12637","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039446,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"registry"}
{"ts":1744827039446,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"registry"}
{"ts":1744827039447,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039453,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039454,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039458,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827039458,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827039458,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039477,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039537,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039537,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039538,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039538,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039538,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039538,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039556,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039556,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039556,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039556,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039556,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039556,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039556,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039557,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039557,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039670,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"db","svc":"db"}
{"ts":1744827039670,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"db","svc":"db"}
{"ts":1744827039723,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"db","svc":"db"}
{"ts":1744827039723,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039756,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039757,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039757,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039758,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039758,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039758,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039758,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039758,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039758,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039759,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039759,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039759,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039759,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039759,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039759,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039759,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039759,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039759,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039760,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039760,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039760,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039760,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039760,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039760,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039760,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039760,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039760,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039761,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039761,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039761,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039761,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039761,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039761,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039761,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827039761,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827039768,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827039768,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039768,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"db","svc":"db"}
{"ts":1744827039768,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827039768,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827039768,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039768,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"db","svc":"db"}
{"ts":1744827039768,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827039773,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"registry"}
{"ts":1744827039773,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039775,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827039775,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827039777,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039777,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039778,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"registry"}
{"ts":1744827039778,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039781,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"registry"}
{"ts":1744827039781,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039781,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039781,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039781,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"db","svc":"db"}
{"ts":1744827039781,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"db","svc":"db"}
{"ts":1744827039827,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039829,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_Users_role' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039831,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039833,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827039836,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827039840,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039856,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"username\");ALTER TABLE \"Users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039875,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"email\");ALTER TABLE \"Users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039886,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039887,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"active\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET DEFAULT true;ALTER TABLE \"Users\" ALTER COLUMN \"active\" TYPE BOOLEAN; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039889,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"role\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"role\" SET DEFAULT 'user';DO 'BEGIN CREATE TYPE \"public\".\"enum_Users_role\" AS ENUM(''user'', ''admin''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"Users\" ALTER COLUMN \"role\" TYPE \"public\".\"enum_Users_role\" USING (\"role\"::\"public\".\"enum_Users_role\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039896,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039897,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039898,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039904,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"db","svc":"db"}
{"ts":1744827040282,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827040284,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827040284,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827040284,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827040284,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827040284,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827040284,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827040285,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827040285,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827040834,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827040836,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827040877,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827040877,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827041878,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827041881,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827041910,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827041911,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827042912,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827042918,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827042943,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827042944,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827043944,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827043954,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827043990,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827043992,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827044991,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827044993,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827045015,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827045016,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827046016,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827046017,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827046042,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827046042,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827047058,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827047059,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827047081,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827047081,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827048083,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827048084,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827048107,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827048108,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827049108,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827049109,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827049138,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827049140,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827050139,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827050140,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827050165,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827050169,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827051166,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827051170,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827051197,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827051197,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827052198,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827052199,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827052234,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827052234,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827053235,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827053237,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827053259,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827053259,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827054260,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827054261,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827054289,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827054290,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827055293,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827055294,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827055318,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827055318,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827056318,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827056319,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827056341,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827056342,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827057342,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827057343,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827057371,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827057372,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827058372,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827058372,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827058397,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827058400,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827059398,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827059400,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827059422,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827059423,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827060424,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827060424,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827060453,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827060453,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827061454,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827061455,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827061482,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827061482,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827062482,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827062483,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827062516,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827062516,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827063517,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827063518,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827063545,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827063548,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827064546,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827064548,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827064575,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827064575,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827065575,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827065577,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827065601,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827065601,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827066602,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827066602,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827066628,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827066629,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827067629,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827067630,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827067657,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827067657,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827068659,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827068659,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827068682,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827068683,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827069682,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827069683,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827069709,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827069710,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827070709,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827070711,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827070736,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827070737,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827071193,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827071193,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827071193,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"db","svc":"db"}
{"ts":1744827071193,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827071194,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827071194,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"db","svc":"db"}
{"ts":1744827071194,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827071194,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827071199,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827071199,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827071199,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827104654,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104654,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104654,"level":"info","msg":"Node ID: daniels-macbook-pro.local-12781","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104655,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"registry"}
{"ts":1744827104655,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"registry"}
{"ts":1744827104656,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104661,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104662,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104666,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827104666,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827104667,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104683,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104742,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104746,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104746,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104746,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104747,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104747,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104763,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104763,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104763,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104763,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104764,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104764,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104764,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104765,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104765,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104874,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"db","svc":"db"}
{"ts":1744827104874,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"db","svc":"db"}
{"ts":1744827104923,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"db","svc":"db"}
{"ts":1744827104923,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104956,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104956,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104956,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104957,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104957,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104957,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104958,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104958,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104958,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827104960,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827104967,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827104967,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104967,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"db","svc":"db"}
{"ts":1744827104967,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827104967,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827104967,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104967,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"db","svc":"db"}
{"ts":1744827104967,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827104972,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"registry"}
{"ts":1744827104972,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104974,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827104974,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827104975,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104975,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104976,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"registry"}
{"ts":1744827104976,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104979,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"registry"}
{"ts":1744827104979,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104979,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104979,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104979,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"db","svc":"db"}
{"ts":1744827104979,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"db","svc":"db"}
{"ts":1744827105028,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105030,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827105031,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_Users_role' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105033,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105034,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827105042,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105059,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"username\");ALTER TABLE \"Users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105074,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"email\");ALTER TABLE \"Users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105088,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105090,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"active\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET DEFAULT true;ALTER TABLE \"Users\" ALTER COLUMN \"active\" TYPE BOOLEAN; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105092,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"role\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"role\" SET DEFAULT 'user';DO 'BEGIN CREATE TYPE \"public\".\"enum_Users_role\" AS ENUM(''user'', ''admin''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"Users\" ALTER COLUMN \"role\" TYPE \"public\".\"enum_Users_role\" USING (\"role\"::\"public\".\"enum_Users_role\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105097,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105098,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105101,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105107,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"db","svc":"db"}
{"ts":1744827105480,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827105481,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827105481,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827105481,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827105481,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827105481,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827105481,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827105481,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105481,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827106031,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827106034,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827106067,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827106067,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827107067,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827107068,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827107088,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827107089,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827108089,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827108093,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827108118,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827108121,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827109118,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827109122,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827109147,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827109147,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827110147,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827110148,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827110173,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827110174,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827111186,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827111195,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827111291,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827111292,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827112294,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827112297,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827112325,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827112326,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827113326,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827113332,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827113359,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827113359,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827114361,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827114362,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827114396,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827114396,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827115397,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827115397,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827115424,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827115424,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827116430,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827116430,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827116461,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827116462,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827117465,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827117467,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827117494,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827117495,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827118495,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827118497,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827118523,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827118526,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827119525,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827119527,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827119550,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827119551,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827120550,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827120551,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827120573,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827120574,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827121575,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827121576,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827121609,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827121609,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827122610,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827122610,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827122637,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827122638,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827123639,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827123640,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827123671,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827123672,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827124673,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827124677,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827124706,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827124707,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827125709,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827125710,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827125734,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827125735,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827126735,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827126736,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827126765,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827126765,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827127768,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827127769,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827127798,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827127799,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827128800,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827128800,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827128831,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827128832,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827129832,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827129833,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827129865,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827129869,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827130866,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827130870,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827130890,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827130895,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827131891,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827131895,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827131919,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827131920,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827132921,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827132922,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827132951,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827132952,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827133952,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827133952,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827133977,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827133977,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827134978,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827134982,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827135019,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827135020,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827136019,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827136020,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827136043,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827136043,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827137043,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827137054,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827137084,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827137084,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827138085,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827138087,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827138115,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827138116,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827139117,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827139118,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827139146,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827139146,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827140147,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827140147,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827140168,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827140168,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827141169,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827141170,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827141199,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827141199,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827142201,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827142201,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827142224,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827142225,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827143228,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827143230,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827143259,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827143259,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827144260,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827144261,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827144290,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827144291,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827145292,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827145293,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827145320,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827145320,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827146321,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827146324,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827146346,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827146346,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827147347,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827147348,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827147373,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827147373,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827148374,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827148374,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827148406,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827148411,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827149409,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827149411,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827149437,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827149438,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827150438,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827150439,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827150487,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827150488,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827151492,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827151493,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827151521,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827151521,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827152522,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827152522,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827152546,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827152547,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827153548,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827153549,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827153636,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827153636,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827154636,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827154638,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827154672,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827154672,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827155673,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827155675,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827155704,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827155704,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827156705,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827156706,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827156736,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827156737,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827157739,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827157739,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827157772,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827157773,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827158774,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827158776,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827158819,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827158820,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827159819,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827159820,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827159848,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827159849,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827160850,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827160851,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827160889,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827160889,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827161890,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827161892,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827161920,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827161920,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827162920,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827162921,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827162948,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827162948,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827163949,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827163951,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827163979,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827163979,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827164979,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827164980,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827165012,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827165014,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827166013,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827166015,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827166058,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827166063,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827167059,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827167062,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827167102,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827167103,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827168103,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827168104,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827168126,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827168127,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827169127,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827169128,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827169159,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827169160,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827170160,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827170160,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827170188,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827170188,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827171191,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827171192,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827171225,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827171225,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827172225,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827172226,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827172251,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827172252,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827173252,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827173253,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827173279,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827173279,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827174280,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827174280,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827174315,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827174315,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827175316,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827175317,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827175344,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827175344,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827176346,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827176347,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827176379,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827176379,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827177380,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827177381,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827177418,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827177418,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827178419,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827178420,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827178451,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827178451,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827179451,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827179451,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827179479,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827179479,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827180479,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827180480,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827180515,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827180515,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827181515,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827181516,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827181545,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827181546,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827182547,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827182548,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827182573,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827182574,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827183576,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827183582,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827183639,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827183639,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827184640,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827184641,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827184673,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827184673,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827185674,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827185674,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827185699,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827185701,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827186700,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827186701,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827186737,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827186737,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827187737,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827187737,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827187760,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827187761,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827188761,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827188763,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827188810,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827188810,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827189811,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827189812,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827189854,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827189854,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827190855,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827190856,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827190893,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827190893,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827191894,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827191895,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827191919,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827191919,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827192919,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827192920,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827192946,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827192946,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827193947,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827193947,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827193972,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827193972,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827194973,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827194976,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827195002,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827195002,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827196002,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827196003,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827196036,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827196037,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827197037,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827197039,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827197076,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827197077,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827198077,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827198086,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827198115,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827198116,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827199116,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827199117,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827199145,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827199146,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827200146,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827200147,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827200171,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827200171,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827201172,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827201173,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827201201,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827201202,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827202202,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827202203,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827202228,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827202228,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827203229,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827203230,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827203252,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827203252,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827204253,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827204255,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827204280,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827204280,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827205280,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827205281,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827205304,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827205304,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827206305,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827206307,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827206346,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827206347,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827207347,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827207350,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827207376,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827207376,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827208376,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827208377,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827208407,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827208408,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827209408,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827209409,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827209434,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827209435,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827210435,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827210436,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827210487,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827210496,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827211489,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827211497,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827211516,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827211518,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827212518,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827212519,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827212555,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827212556,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827213557,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827213559,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827213587,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827213587,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827214587,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827214588,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827214628,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827214629,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827215629,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827215630,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827215658,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827215659,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827216659,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827216659,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827216683,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827216684,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827217684,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827217686,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827217718,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827217720,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827218719,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827218721,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827218745,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827218745,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827219748,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827219750,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827219777,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827219777,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827220778,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827220779,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827220819,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827220819,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827221820,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827221821,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827221850,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827221850,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827222852,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827222853,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827222877,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827222877,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827223878,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827223880,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827223909,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827223909,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827224909,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827224911,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827224939,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827224941,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827225940,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827225941,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827225976,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827225976,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827226977,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827226977,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827227011,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827227011,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827228013,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827228014,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827228039,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827228039,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827229041,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827229046,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827229083,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827229085,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827230085,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827230088,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827230131,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827230131,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827231132,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827231132,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827231155,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827231158,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827232156,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827232158,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827232187,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827232190,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827233187,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827233190,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827233211,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827233212,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827234212,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827234212,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827234234,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827234236,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827235235,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827235236,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827235261,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827235264,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827236262,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827236264,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827236286,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827236292,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827237286,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827237292,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827237315,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827237317,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827238317,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827238320,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827238370,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827238370,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827239372,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827239374,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827239406,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827239406,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827240407,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827240408,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827240440,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827240441,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827241441,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827241441,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827241463,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827241464,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827242464,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827242465,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827242494,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827242495,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827243495,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827243498,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827243527,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827243527,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827244528,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827244529,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827244555,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827244555,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827245555,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827245556,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827245581,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827245582,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827246582,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827246584,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827246624,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827246624,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827247624,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827247626,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827247654,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827247655,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827247685,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827247685,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827247686,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"db","svc":"db"}
{"ts":1744827247686,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827247687,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827247687,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"db","svc":"db"}
{"ts":1744827247687,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827247687,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827247690,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827247691,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827247691,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827395120,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395121,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395121,"level":"info","msg":"Node ID: daniels-macbook-pro.local-13300","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395122,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"registry"}
{"ts":1744827395122,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"registry"}
{"ts":1744827395122,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395129,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395130,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395135,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827395135,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827395135,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395152,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395213,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395213,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395213,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395214,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395214,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395214,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395232,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395232,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395232,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395232,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395233,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395233,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395233,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395234,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395234,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395350,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"db","svc":"db"}
{"ts":1744827395350,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"db","svc":"db"}
{"ts":1744827395406,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"db","svc":"db"}
{"ts":1744827395406,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395440,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395440,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395440,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395441,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395441,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395441,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395441,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395441,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395441,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395442,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395442,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395442,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395442,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395442,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395442,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395443,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395443,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395443,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395443,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395443,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395443,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395443,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395443,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395443,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395444,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395444,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395444,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395444,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395444,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395444,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395444,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395444,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395444,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395444,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827395444,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827395451,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827395451,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395451,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"db","svc":"db"}
{"ts":1744827395451,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827395451,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827395451,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395451,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"db","svc":"db"}
{"ts":1744827395451,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827395455,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"registry"}
{"ts":1744827395455,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395458,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827395458,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827395459,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395459,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395459,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"registry"}
{"ts":1744827395459,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395462,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"registry"}
{"ts":1744827395462,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395462,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395462,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395462,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"db","svc":"db"}
{"ts":1744827395462,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"db","svc":"db"}
{"ts":1744827395517,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395521,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_Users_role' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395523,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395540,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395547,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827395548,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827395548,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395548,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395548,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395549,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395549,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395549,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395549,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395549,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395549,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395551,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395551,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395551,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395551,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395551,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395551,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395551,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395551,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395551,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395553,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"registry"}
{"ts":1744827395553,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395553,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827395553,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395553,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 418ms.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395553,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395556,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"username\");ALTER TABLE \"Users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395572,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"email\");ALTER TABLE \"Users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395587,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395590,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"active\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET DEFAULT true;ALTER TABLE \"Users\" ALTER COLUMN \"active\" TYPE BOOLEAN; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395594,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"role\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"role\" SET DEFAULT 'user';DO 'BEGIN CREATE TYPE \"public\".\"enum_Users_role\" AS ENUM(''user'', ''admin''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"Users\" ALTER COLUMN \"role\" TYPE \"public\".\"enum_Users_role\" USING (\"role\"::\"public\".\"enum_Users_role\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395599,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395600,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395601,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395607,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"db","svc":"db"}
{"ts":1744827395656,"level":"error","msg":"Connection error! Error\n    at Query.run (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.createTable (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-interface.js:98:12)\n    at async user.sync (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:942:7)\n    at async Promise.all (index 3) {\n  name: 'SequelizeUniqueConstraintError',\n  errors: [ ValidationErrorItem { message: 'typname must be unique', type: 'unique violation', path: 'typname', value: 'users', origin: 'DB', instance: null, validatorKey: 'not_unique', validatorName: null, validatorArgs: [] }, ValidationErrorItem { message: 'typnamespace must be unique', type: 'unique violation', path: 'typnamespace', value: '2200', origin: 'DB', instance: null, validatorKey: 'not_unique', validatorName: null, validatorArgs: [] } ],\n  parent: error: duplicate key value violates unique constraint \"pg_type_typname_nsp_index\"\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 245,\n    severity: 'ERROR',\n    code: '23505',\n    detail: 'Key (typname, typnamespace)=(users, 2200) already exists.',\n    hint: undefined,\n    position: undefined,\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: 'pg_catalog',\n    table: 'pg_type',\n    column: undefined,\n    dataType: undefined,\n    constraint: 'pg_type_typname_nsp_index',\n    file: 'nbtinsert.c',\n    line: '666',\n    routine: '_bt_check_unique',\n    sql: 'CREATE TABLE IF NOT EXISTS \"public\".\"users\" (\"id\" UUID , \"username\" VARCHAR(255) NOT NULL UNIQUE, \"email\" VARCHAR(255) NOT NULL UNIQUE, \"password\" VARCHAR(255) NOT NULL, \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));',\n    parameters: undefined\n  },\n  original: error: duplicate key value violates unique constraint \"pg_type_typname_nsp_index\"\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 245,\n    severity: 'ERROR',\n    code: '23505',\n    detail: 'Key (typname, typnamespace)=(users, 2200) already exists.',\n    hint: undefined,\n    position: undefined,\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: 'pg_catalog',\n    table: 'pg_type',\n    column: undefined,\n    dataType: undefined,\n    constraint: 'pg_type_typname_nsp_index',\n    file: 'nbtinsert.c',\n    line: '666',\n    routine: '_bt_check_unique',\n    sql: 'CREATE TABLE IF NOT EXISTS \"public\".\"users\" (\"id\" UUID , \"username\" VARCHAR(255) NOT NULL UNIQUE, \"email\" VARCHAR(255) NOT NULL UNIQUE, \"password\" VARCHAR(255) NOT NULL, \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));',\n    parameters: undefined\n  },\n  fields: { typname: 'users', typnamespace: '2200' },\n  sql: 'CREATE TABLE IF NOT EXISTS \"public\".\"users\" (\"id\" UUID , \"username\" VARCHAR(255) NOT NULL UNIQUE, \"email\" VARCHAR(255) NOT NULL UNIQUE, \"password\" VARCHAR(255) NOT NULL, \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));'\n}","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827396055,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827396058,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827396657,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827396691,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827396691,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827396692,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827396692,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827396692,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 1s.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827400573,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827400579,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827400580,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827400580,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827400580,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: 'f69ce52a-920a-422e-b4fd-eafe5a277e7d' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827400581,"level":"info","msg":"<= 200 POST /api/users/register [+8.621 ms]","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827459024,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827459025,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827459025,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827459025,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827459025,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: 'e7361f62-bd00-464b-9c70-c907efa16a2e' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827459026,"level":"info","msg":"<= 200 POST /api/users/register [+2.905 ms]","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827459735,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827459736,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827459736,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827459736,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827459736,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: '3c31a11b-d9ce-4ba9-84f6-7ad04856845d' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827459736,"level":"info","msg":"<= 200 POST /api/users/register [+0.630 ms]","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827463486,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827463486,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827463486,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"db","svc":"db"}
{"ts":1744827463486,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827463488,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827463488,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"db","svc":"db"}
{"ts":1744827463488,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827463488,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827463488,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827463491,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827463491,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827464723,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827464723,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827464723,"level":"info","msg":"Node ID: daniels-macbook-pro.local-13426","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827464723,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"registry"}
{"ts":1744827464724,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"registry"}
{"ts":1744827464724,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827464729,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827464730,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827464734,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827464734,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827464735,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827464744,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827464802,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464802,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464802,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464803,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464803,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464803,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464820,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464821,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464821,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464821,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464821,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464821,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464821,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464822,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464822,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827464934,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"db","svc":"db"}
{"ts":1744827464934,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"db","svc":"db"}
{"ts":1744827464978,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"db","svc":"db"}
{"ts":1744827464978,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465011,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465011,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465011,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465012,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465012,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465012,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465013,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465013,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465013,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465014,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465014,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465014,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465014,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465014,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465014,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465014,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465014,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465014,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465016,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465016,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465016,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465016,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827465016,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827465022,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827465022,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465022,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"db","svc":"db"}
{"ts":1744827465022,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827465022,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827465022,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465022,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"db","svc":"db"}
{"ts":1744827465022,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827465027,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"registry"}
{"ts":1744827465027,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465029,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827465029,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827465030,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465030,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465031,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"registry"}
{"ts":1744827465031,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465034,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"registry"}
{"ts":1744827465034,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465035,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465035,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465035,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"db","svc":"db"}
{"ts":1744827465035,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"db","svc":"db"}
{"ts":1744827465098,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465102,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_Users_role' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465105,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465118,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827465118,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827465118,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465118,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465118,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465119,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465119,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465119,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465120,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465120,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465120,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"registry"}
{"ts":1744827465122,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827465122,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465123,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 387ms.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465123,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465124,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827465124,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827465124,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827465124,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465125,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 109ms.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465191,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465196,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"username\");ALTER TABLE \"Users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465213,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"email\");ALTER TABLE \"Users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465229,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465230,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"active\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET DEFAULT true;ALTER TABLE \"Users\" ALTER COLUMN \"active\" TYPE BOOLEAN; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465233,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"role\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"role\" SET DEFAULT 'user';DO 'BEGIN CREATE TYPE \"public\".\"enum_Users_role\" AS ENUM(''user'', ''admin''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"Users\" ALTER COLUMN \"role\" TYPE \"public\".\"enum_Users_role\" USING (\"role\"::\"public\".\"enum_Users_role\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465237,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465238,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465239,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465244,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"db","svc":"db"}
{"ts":1744827465623,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465624,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465624,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465624,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465624,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465624,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465624,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465624,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465624,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465624,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465624,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465625,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465625,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465625,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827467080,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827467087,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827467087,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827467087,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827467087,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: 'e5da2cb8-9356-4df8-8940-7404c7d4a398' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827467092,"level":"info","msg":"<= 200 POST /api/users/register [+13.344 ms]","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827467939,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827467940,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827467940,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827467940,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827467940,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: '3dbf23b8-0949-444c-84af-b4765c1c02b0' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827467942,"level":"info","msg":"<= 200 POST /api/users/register [+2.726 ms]","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827468723,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827468723,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827468723,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827468723,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827468723,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: '70482c01-89ce-4bce-b983-a453e336d0ef' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827468726,"level":"info","msg":"<= 200 POST /api/users/register [+3.604 ms]","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827489457,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827489458,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827489458,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"db","svc":"db"}
{"ts":1744827489458,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827489462,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827489462,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"db","svc":"db"}
{"ts":1744827489462,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827489462,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827489462,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827489463,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827489463,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827490845,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827490845,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827490845,"level":"info","msg":"Node ID: daniels-macbook-pro.local-13549","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827490845,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"registry"}
{"ts":1744827490846,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"registry"}
{"ts":1744827490846,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827490851,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827490852,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827490857,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827490857,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827490857,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827490866,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827490918,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490918,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490919,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490919,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490919,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490919,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490936,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490936,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490936,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490936,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490936,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490937,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490937,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490938,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490938,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491042,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"db","svc":"db"}
{"ts":1744827491042,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"db","svc":"db"}
{"ts":1744827491085,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"db","svc":"db"}
{"ts":1744827491085,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491117,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491117,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491117,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491118,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491118,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491118,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491119,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491119,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491119,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491120,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491120,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491120,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491120,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491120,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491120,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491120,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491120,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491120,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827491122,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827491128,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827491128,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491128,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"db","svc":"db"}
{"ts":1744827491128,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827491128,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827491128,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491128,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"db","svc":"db"}
{"ts":1744827491128,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827491133,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"registry"}
{"ts":1744827491133,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491135,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827491135,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827491136,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491136,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491136,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"registry"}
{"ts":1744827491136,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491140,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"registry"}
{"ts":1744827491140,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491140,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491140,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491140,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"db","svc":"db"}
{"ts":1744827491140,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"db","svc":"db"}
{"ts":1744827491193,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491195,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_Users_role' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491199,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491203,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827491203,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827491203,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491203,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491203,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491205,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491205,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491205,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491205,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491205,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491205,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491206,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491206,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491206,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491206,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491206,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491206,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491206,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491206,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491206,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491208,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491208,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491208,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491208,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"registry"}
{"ts":1744827491208,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491208,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827491208,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491208,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 86ms.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491284,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827491284,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827491284,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827491284,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491284,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 427ms.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491284,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491286,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491298,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"username\");ALTER TABLE \"Users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491320,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"email\");ALTER TABLE \"Users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491335,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491337,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"active\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET DEFAULT true;ALTER TABLE \"Users\" ALTER COLUMN \"active\" TYPE BOOLEAN; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491340,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"role\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"role\" SET DEFAULT 'user';DO 'BEGIN CREATE TYPE \"public\".\"enum_Users_role\" AS ENUM(''user'', ''admin''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"Users\" ALTER COLUMN \"role\" TYPE \"public\".\"enum_Users_role\" USING (\"role\"::\"public\".\"enum_Users_role\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491344,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491344,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491346,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491351,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"db","svc":"db"}
{"ts":1744827491709,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491710,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491710,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491710,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491711,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491711,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491711,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491711,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491711,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491711,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491711,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491711,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491711,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491711,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827494370,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827494378,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827494378,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827494378,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827494378,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: 'beb39466-6a60-4b29-a288-0c3ec2e5caf6' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827494382,"level":"debug","msg":"The 'users.register' request is rejected. { requestID: 'beb39466-6a60-4b29-a288-0c3ec2e5caf6' } Error: Invalid value { username: 'johndoe' }\n    at Object.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sql-string.js:54:11)\n    at PostgresQueryGenerator.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:766:22)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:71\n    at Array.map (<anonymous>)\n    at PostgresQueryGenerator._whereParseSingleValueObject (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:52)\n    at PostgresQueryGenerator.whereItemQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1812:19)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1737:25\n    at Array.forEach (<anonymous>)\n    at PostgresQueryGenerator.whereItemsQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1735:35)\n    at PostgresQueryGenerator.getWhereConditions (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:2078:19)","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827494382,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'beb39466-6a60-4b29-a288-0c3ec2e5caf6' } Error: Invalid value { username: 'johndoe' }\n    at Object.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sql-string.js:54:11)\n    at PostgresQueryGenerator.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:766:22)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:71\n    at Array.map (<anonymous>)\n    at PostgresQueryGenerator._whereParseSingleValueObject (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:52)\n    at PostgresQueryGenerator.whereItemQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1812:19)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1737:25\n    at Array.forEach (<anonymous>)\n    at PostgresQueryGenerator.whereItemsQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1735:35)\n    at PostgresQueryGenerator.getWhereConditions (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:2078:19)","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827494383,"level":"error","msg":"   Request error! Error : Invalid value { username: 'johndoe' } \n Error: Invalid value { username: 'johndoe' }\n    at Object.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sql-string.js:54:11)\n    at PostgresQueryGenerator.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:766:22)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:71\n    at Array.map (<anonymous>)\n    at PostgresQueryGenerator._whereParseSingleValueObject (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:52)\n    at PostgresQueryGenerator.whereItemQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1812:19)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1737:25\n    at Array.forEach (<anonymous>)\n    at PostgresQueryGenerator.whereItemsQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1735:35)\n    at PostgresQueryGenerator.getWhereConditions (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:2078:19) \nData: ","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827545414,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827545414,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827545415,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"db","svc":"db"}
{"ts":1744827545415,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827545417,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827545417,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"db","svc":"db"}
{"ts":1744827545417,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827545418,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827545418,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827545418,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827545418,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827547539,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547539,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547539,"level":"info","msg":"Node ID: daniels-macbook-pro.local-13679","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547540,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"registry"}
{"ts":1744827547540,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"registry"}
{"ts":1744827547541,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547546,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547546,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547551,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827547551,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827547551,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547560,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547620,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547620,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547620,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547620,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547621,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547621,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547638,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547638,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547638,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547638,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547638,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547638,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547638,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547639,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547639,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547761,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"db","svc":"db"}
{"ts":1744827547761,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"db","svc":"db"}
{"ts":1744827547815,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"db","svc":"db"}
{"ts":1744827547815,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547852,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547852,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547852,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547853,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547853,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547853,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547854,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547854,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547854,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547855,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547855,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547855,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547855,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547855,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547855,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547855,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547855,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547855,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547857,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827547857,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827547863,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827547863,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547863,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"db","svc":"db"}
{"ts":1744827547863,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827547863,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827547863,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547863,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"db","svc":"db"}
{"ts":1744827547863,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827547868,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"registry"}
{"ts":1744827547868,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547870,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827547870,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827547871,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547871,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547872,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"registry"}
{"ts":1744827547872,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547876,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"registry"}
{"ts":1744827547876,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547876,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547876,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547876,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"db","svc":"db"}
{"ts":1744827547876,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"db","svc":"db"}
{"ts":1744827547938,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547940,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_Users_role' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547943,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547945,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827547945,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827547945,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547945,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547945,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547947,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547947,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547947,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547947,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547947,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547947,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547948,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547949,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547949,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547949,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547949,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547949,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547949,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547949,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547949,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547949,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547949,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547949,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"registry"}
{"ts":1744827547950,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827547950,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547951,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 93ms.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548020,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827548021,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827548021,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827548021,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548021,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 470ms.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548021,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548022,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548027,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"username\");ALTER TABLE \"Users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548049,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"email\");ALTER TABLE \"Users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548066,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548067,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"active\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET DEFAULT true;ALTER TABLE \"Users\" ALTER COLUMN \"active\" TYPE BOOLEAN; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548110,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"role\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"role\" SET DEFAULT 'user';DO 'BEGIN CREATE TYPE \"public\".\"enum_Users_role\" AS ENUM(''user'', ''admin''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"Users\" ALTER COLUMN \"role\" TYPE \"public\".\"enum_Users_role\" USING (\"role\"::\"public\".\"enum_Users_role\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548130,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548131,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548132,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548138,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"db","svc":"db"}
{"ts":1744827548451,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548452,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548452,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548452,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548452,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548452,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548452,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548452,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548452,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548452,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548452,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548452,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548453,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548453,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827550657,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827550664,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827550665,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827550665,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827550665,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: '3265274b-0ef9-4cc4-be45-9f50db23b179' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827550667,"level":"debug","msg":"The 'users.register' request is rejected. { requestID: '3265274b-0ef9-4cc4-be45-9f50db23b179' } Error: Invalid value { username: 'johndoe' }\n    at Object.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sql-string.js:54:11)\n    at PostgresQueryGenerator.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:766:22)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:71\n    at Array.map (<anonymous>)\n    at PostgresQueryGenerator._whereParseSingleValueObject (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:52)\n    at PostgresQueryGenerator.whereItemQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1812:19)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1737:25\n    at Array.forEach (<anonymous>)\n    at PostgresQueryGenerator.whereItemsQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1735:35)\n    at PostgresQueryGenerator.getWhereConditions (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:2078:19)","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827550667,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '3265274b-0ef9-4cc4-be45-9f50db23b179' } Error: Invalid value { username: 'johndoe' }\n    at Object.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sql-string.js:54:11)\n    at PostgresQueryGenerator.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:766:22)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:71\n    at Array.map (<anonymous>)\n    at PostgresQueryGenerator._whereParseSingleValueObject (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:52)\n    at PostgresQueryGenerator.whereItemQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1812:19)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1737:25\n    at Array.forEach (<anonymous>)\n    at PostgresQueryGenerator.whereItemsQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1735:35)\n    at PostgresQueryGenerator.getWhereConditions (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:2078:19)","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827550668,"level":"error","msg":"   Request error! Error : Invalid value { username: 'johndoe' } \n Error: Invalid value { username: 'johndoe' }\n    at Object.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sql-string.js:54:11)\n    at PostgresQueryGenerator.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:766:22)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:71\n    at Array.map (<anonymous>)\n    at PostgresQueryGenerator._whereParseSingleValueObject (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:52)\n    at PostgresQueryGenerator.whereItemQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1812:19)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1737:25\n    at Array.forEach (<anonymous>)\n    at PostgresQueryGenerator.whereItemsQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1735:35)\n    at PostgresQueryGenerator.getWhereConditions (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:2078:19) \nData: ","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827740215,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827740215,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827740215,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"db","svc":"db"}
{"ts":1744827740215,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827740216,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827740216,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"db","svc":"db"}
{"ts":1744827740216,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827740216,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827740216,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827740217,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827740217,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827741171,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741171,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741171,"level":"info","msg":"Node ID: daniels-macbook-pro.local-13895","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741171,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"registry"}
{"ts":1744827741171,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"registry"}
{"ts":1744827741172,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741178,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741178,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741183,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827741183,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827741183,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741192,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741253,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741254,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741254,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741254,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741254,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741255,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741273,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741273,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741273,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741273,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741273,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741274,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741274,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741274,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741274,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741385,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"db","svc":"db"}
{"ts":1744827741385,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"db","svc":"db"}
{"ts":1744827741427,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"db","svc":"db"}
{"ts":1744827741427,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741459,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741459,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741459,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741460,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741460,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741460,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741461,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741461,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741461,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741462,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741462,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741462,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741462,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741462,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741462,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741462,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741462,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741462,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741464,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741464,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741464,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741464,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744827741464,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744827741470,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827741470,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741470,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"db","svc":"db"}
{"ts":1744827741470,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744827741470,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827741470,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741470,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"db","svc":"db"}
{"ts":1744827741470,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744827741475,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"registry"}
{"ts":1744827741475,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741477,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827741477,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827741478,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741478,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741479,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"registry"}
{"ts":1744827741479,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741482,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"registry"}
{"ts":1744827741482,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741482,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741482,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741482,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"db","svc":"db"}
{"ts":1744827741483,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"db","svc":"db"}
{"ts":1744827741526,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741529,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_Users_role' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741531,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741533,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744827741533,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744827741533,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741533,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741533,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741534,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741534,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741534,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741534,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741534,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741534,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741535,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741535,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741535,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741535,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741535,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741535,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741535,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741535,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741535,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741537,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"registry"}
{"ts":1744827741537,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741537,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744827741537,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741537,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 73ms.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741613,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744827741613,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744827741613,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744827741613,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741614,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 431ms.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741614,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741616,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741623,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"username\");ALTER TABLE \"Users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741642,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"email\");ALTER TABLE \"Users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741656,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741658,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"active\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET DEFAULT true;ALTER TABLE \"Users\" ALTER COLUMN \"active\" TYPE BOOLEAN; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741662,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"role\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"role\" SET DEFAULT 'user';DO 'BEGIN CREATE TYPE \"public\".\"enum_Users_role\" AS ENUM(''user'', ''admin''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"Users\" ALTER COLUMN \"role\" TYPE \"public\".\"enum_Users_role\" USING (\"role\"::\"public\".\"enum_Users_role\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741665,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741667,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741668,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741672,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"db","svc":"db"}
{"ts":1744827742038,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742039,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742039,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742039,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742039,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742039,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742039,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742039,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742039,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742039,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742039,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742040,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742040,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827742040,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827744392,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827744399,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827744399,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827744399,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827744399,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: 'c5beaa66-f640-467c-8719-f3fe7025af3a' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827744418,"level":"info","msg":"<= 200 POST /api/users/register [+26.197 ms]","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827749636,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827749636,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827749636,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827749636,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827749636,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: 'f0977a57-dc27-442e-ae75-8ecea4e6b0a1' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827749641,"level":"debug","msg":"The 'users.register' request is rejected. { requestID: 'f0977a57-dc27-442e-ae75-8ecea4e6b0a1' } MoleculerClientError: Username or email already exists\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:133:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'ALREADY_EXISTS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827749642,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'f0977a57-dc27-442e-ae75-8ecea4e6b0a1' } MoleculerClientError: Username or email already exists\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:133:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'ALREADY_EXISTS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827794491,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827794493,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827794494,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827794494,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827794494,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: 'fff41d8f-67e8-453a-8dad-9d52e7eaff1b' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827794534,"level":"debug","msg":"The 'users.register' request is rejected. { requestID: 'fff41d8f-67e8-453a-8dad-9d52e7eaff1b' } MoleculerClientError: Username or email already exists\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:133:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'ALREADY_EXISTS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827794535,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'fff41d8f-67e8-453a-8dad-9d52e7eaff1b' } MoleculerClientError: Username or email already exists\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:133:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'ALREADY_EXISTS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828006307,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828006309,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828006309,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828006309,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828006309,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: '0e19aad7-bde5-4760-aaab-656234336498' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828006348,"level":"debug","msg":"The 'users.register' request is rejected. { requestID: '0e19aad7-bde5-4760-aaab-656234336498' } MoleculerClientError: Username or email already exists\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:133:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'ALREADY_EXISTS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828006349,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '0e19aad7-bde5-4760-aaab-656234336498' } MoleculerClientError: Username or email already exists\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:133:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'ALREADY_EXISTS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828062118,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828062119,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828062119,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828062119,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828062119,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: '175d5585-7675-40d3-8763-40d26b946f37' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828062178,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: '175d5585-7675-40d3-8763-40d26b946f37' } Error: data and hash arguments required\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:208:17)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:29:12\n    at new Promise (<anonymous>)\n    at module.exports.promise (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:20:12)\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:204:25)\n    at Service.comparePassword (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/mixins/encryption.mixin.js:25:21)\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:172:44)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828062179,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '175d5585-7675-40d3-8763-40d26b946f37' } Error: data and hash arguments required\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:208:17)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:29:12\n    at new Promise (<anonymous>)\n    at module.exports.promise (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:20:12)\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:204:25)\n    at Service.comparePassword (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/mixins/encryption.mixin.js:25:21)\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:172:44)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828062179,"level":"error","msg":"   Request error! Error : data and hash arguments required \n Error: data and hash arguments required\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:208:17)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:29:12\n    at new Promise (<anonymous>)\n    at module.exports.promise (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:20:12)\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:204:25)\n    at Service.comparePassword (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/mixins/encryption.mixin.js:25:21)\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:172:44)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 \nData: ","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828206939,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828206940,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828206940,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828206940,"level":"debug","msg":"   Params: { email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828206940,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: '1794fd5d-5b33-4a61-b0b0-280479cdc6d8' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828206969,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: '1794fd5d-5b33-4a61-b0b0-280479cdc6d8' } Error: data and hash arguments required\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:208:17)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:29:12\n    at new Promise (<anonymous>)\n    at module.exports.promise (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:20:12)\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:204:25)\n    at Service.comparePassword (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/mixins/encryption.mixin.js:25:21)\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:172:44)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828206970,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '1794fd5d-5b33-4a61-b0b0-280479cdc6d8' } Error: data and hash arguments required\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:208:17)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:29:12\n    at new Promise (<anonymous>)\n    at module.exports.promise (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:20:12)\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:204:25)\n    at Service.comparePassword (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/mixins/encryption.mixin.js:25:21)\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:172:44)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828206970,"level":"error","msg":"   Request error! Error : data and hash arguments required \n Error: data and hash arguments required\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:208:17)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:29:12\n    at new Promise (<anonymous>)\n    at module.exports.promise (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:20:12)\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:204:25)\n    at Service.comparePassword (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/mixins/encryption.mixin.js:25:21)\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:172:44)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 \nData: ","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828263949,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828263950,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828263950,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828263950,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828263950,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: '519d5fd9-f014-46b2-aa0b-36decc6aa50a' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828263976,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: '519d5fd9-f014-46b2-aa0b-36decc6aa50a' } Error: data and hash arguments required\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:208:17)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:29:12\n    at new Promise (<anonymous>)\n    at module.exports.promise (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:20:12)\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:204:25)\n    at Service.comparePassword (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/mixins/encryption.mixin.js:25:21)\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:172:44)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828263976,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '519d5fd9-f014-46b2-aa0b-36decc6aa50a' } Error: data and hash arguments required\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:208:17)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:29:12\n    at new Promise (<anonymous>)\n    at module.exports.promise (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:20:12)\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:204:25)\n    at Service.comparePassword (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/mixins/encryption.mixin.js:25:21)\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:172:44)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828263977,"level":"error","msg":"   Request error! Error : data and hash arguments required \n Error: data and hash arguments required\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:208:17)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:29:12\n    at new Promise (<anonymous>)\n    at module.exports.promise (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:20:12)\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:204:25)\n    at Service.comparePassword (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/mixins/encryption.mixin.js:25:21)\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:172:44)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 \nData: ","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828420901,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"$node","svc":"$node"}
{"ts":1744828420901,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828420901,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"db","svc":"db"}
{"ts":1744828420901,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744828420904,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"$node","svc":"$node"}
{"ts":1744828420904,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"db","svc":"db"}
{"ts":1744828420904,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744828420904,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828420904,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828420904,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828420905,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744829105207,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105207,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105207,"level":"info","msg":"Node ID: daniels-macbook-pro.local-15067","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105207,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"registry"}
{"ts":1744829105207,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"registry"}
{"ts":1744829105208,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105213,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105214,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105218,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829105218,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829105218,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105227,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105286,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105287,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105287,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105287,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105287,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105287,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105304,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105304,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105304,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105304,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105304,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105305,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105305,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105305,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105305,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105420,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"db","svc":"db"}
{"ts":1744829105420,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"db","svc":"db"}
{"ts":1744829105464,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"db","svc":"db"}
{"ts":1744829105464,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105500,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105500,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105500,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105501,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105501,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105501,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105501,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105501,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105501,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105502,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105502,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105502,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105502,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105502,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105502,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105504,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105504,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105504,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105504,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105504,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105504,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105504,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829105504,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829105510,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829105510,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105510,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"db","svc":"db"}
{"ts":1744829105510,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829105510,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829105510,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105510,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"db","svc":"db"}
{"ts":1744829105510,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829105515,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"registry"}
{"ts":1744829105515,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105517,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829105517,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829105518,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105518,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105519,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"registry"}
{"ts":1744829105519,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105522,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"registry"}
{"ts":1744829105522,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105522,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105522,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105522,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"db","svc":"db"}
{"ts":1744829105522,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"db","svc":"db"}
{"ts":1744829105567,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105570,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_Users_role' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105572,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105579,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829105579,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829105580,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105580,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105580,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105581,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105581,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105581,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105581,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105581,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105581,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105583,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105583,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105583,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105583,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105583,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105583,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105583,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105583,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105583,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105585,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105585,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105585,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105585,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"registry"}
{"ts":1744829105585,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105585,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829105585,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105585,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 81ms.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105660,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105664,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829105664,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829105664,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829105664,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105664,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 446ms.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105664,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105667,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"username\");ALTER TABLE \"Users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105675,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"email\");ALTER TABLE \"Users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105679,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105680,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"active\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET DEFAULT true;ALTER TABLE \"Users\" ALTER COLUMN \"active\" TYPE BOOLEAN; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105682,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"role\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"role\" SET DEFAULT 'user';DO 'BEGIN CREATE TYPE \"public\".\"enum_Users_role\" AS ENUM(''user'', ''admin''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"Users\" ALTER COLUMN \"role\" TYPE \"public\".\"enum_Users_role\" USING (\"role\"::\"public\".\"enum_Users_role\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105689,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105690,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105691,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105692,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"db","svc":"db"}
{"ts":1744829106086,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106087,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106087,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106087,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106087,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106087,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106088,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106088,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106088,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106088,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106088,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106088,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106088,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829106088,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829109392,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829109402,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829109402,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829109402,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829109402,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: '09dcefe9-6f56-46cf-aa9c-5233bbb45ca1' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829109410,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: '09dcefe9-6f56-46cf-aa9c-5233bbb45ca1' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:159:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829109410,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '09dcefe9-6f56-46cf-aa9c-5233bbb45ca1' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:159:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829292295,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829292295,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829292296,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"db","svc":"db"}
{"ts":1744829292296,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829292299,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829292299,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"db","svc":"db"}
{"ts":1744829292299,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829292299,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829292299,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829292300,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829292300,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829293286,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293286,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293286,"level":"info","msg":"Node ID: daniels-macbook-pro.local-15268","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293287,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"registry"}
{"ts":1744829293287,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"registry"}
{"ts":1744829293288,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293292,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293293,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293298,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829293298,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829293298,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293307,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293369,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293369,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293370,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293370,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293370,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293370,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293387,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293387,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293387,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293387,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293387,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293387,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293388,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293388,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293388,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293506,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"db","svc":"db"}
{"ts":1744829293507,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"db","svc":"db"}
{"ts":1744829293552,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"db","svc":"db"}
{"ts":1744829293552,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293586,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293586,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293586,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293587,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293587,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293587,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293588,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293588,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293588,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293588,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293590,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293590,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293590,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293590,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293590,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293590,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293590,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293590,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293590,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293590,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829293590,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829293597,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829293597,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293597,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"db","svc":"db"}
{"ts":1744829293597,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829293597,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829293597,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293597,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"db","svc":"db"}
{"ts":1744829293597,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829293601,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"registry"}
{"ts":1744829293601,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293603,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829293603,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829293604,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293604,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293605,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"registry"}
{"ts":1744829293605,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293608,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"registry"}
{"ts":1744829293608,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293608,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293608,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293608,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"db","svc":"db"}
{"ts":1744829293608,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"db","svc":"db"}
{"ts":1744829293676,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293682,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_Users_role' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293685,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293688,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829293688,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829293688,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293688,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293688,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293689,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293689,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293689,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293690,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293690,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293690,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293690,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"registry"}
{"ts":1744829293692,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829293692,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 394ms.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293694,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829293694,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829293694,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829293694,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293694,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 104ms.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293771,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293774,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"username\");ALTER TABLE \"Users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293785,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"email\");ALTER TABLE \"Users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293797,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293800,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"active\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET DEFAULT true;ALTER TABLE \"Users\" ALTER COLUMN \"active\" TYPE BOOLEAN; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293802,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"role\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"role\" SET DEFAULT 'user';DO 'BEGIN CREATE TYPE \"public\".\"enum_Users_role\" AS ENUM(''user'', ''admin''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"Users\" ALTER COLUMN \"role\" TYPE \"public\".\"enum_Users_role\" USING (\"role\"::\"public\".\"enum_Users_role\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293808,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293809,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293811,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293812,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"db","svc":"db"}
{"ts":1744829294193,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294194,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294194,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294194,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294195,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294195,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294195,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294195,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294195,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294195,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294195,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294195,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294195,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829294195,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829297447,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829297455,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829297455,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829297455,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829297455,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: '8ba3bcda-4983-4982-b750-2823b19d2278' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829297463,"level":"info","msg":"USER : [object SequelizeInstance:user]","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829297464,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: '8ba3bcda-4983-4982-b750-2823b19d2278' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829297464,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '8ba3bcda-4983-4982-b750-2823b19d2278' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829304349,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829304350,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829304350,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829304350,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829304350,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: '0a78472d-f0fc-4b6d-a9cf-42948e0361be' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829304356,"level":"info","msg":"USER : [object SequelizeInstance:user]","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829304356,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: '0a78472d-f0fc-4b6d-a9cf-42948e0361be' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829304356,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '0a78472d-f0fc-4b6d-a9cf-42948e0361be' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829304948,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829304948,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829304948,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829304948,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829304948,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: 'd08f5d6c-1283-46f6-b2bc-22a3c0284435' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829304950,"level":"info","msg":"USER : [object SequelizeInstance:user]","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829304951,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: 'd08f5d6c-1283-46f6-b2bc-22a3c0284435' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829304951,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'd08f5d6c-1283-46f6-b2bc-22a3c0284435' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829307988,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829307989,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829307989,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829307989,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829307990,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: 'a42140c9-8b1f-45ad-813c-31649d354407' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829307995,"level":"info","msg":"USER : [object SequelizeInstance:user]","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829307995,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: 'a42140c9-8b1f-45ad-813c-31649d354407' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829307995,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'a42140c9-8b1f-45ad-813c-31649d354407' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829317680,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829317681,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829317681,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829317681,"level":"debug","msg":"   Params: { email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829317681,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: 'f5cf1ee5-43e9-49c0-9422-7b4f5baf9d22' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829317688,"level":"info","msg":"USER : [object SequelizeInstance:user]","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829317688,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: 'f5cf1ee5-43e9-49c0-9422-7b4f5baf9d22' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829317688,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'f5cf1ee5-43e9-49c0-9422-7b4f5baf9d22' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829318507,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829318507,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829318507,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829318507,"level":"debug","msg":"   Params: { email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829318508,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: 'bbc14bae-9b65-4c08-afcb-89310a2771bc' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829318510,"level":"info","msg":"USER : [object SequelizeInstance:user]","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829318510,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: 'bbc14bae-9b65-4c08-afcb-89310a2771bc' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829318510,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'bbc14bae-9b65-4c08-afcb-89310a2771bc' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829448865,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829448865,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829448865,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"db","svc":"db"}
{"ts":1744829448865,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829448867,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829448868,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"db","svc":"db"}
{"ts":1744829448868,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829448868,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829448868,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829448869,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829448869,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829450020,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450020,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450020,"level":"info","msg":"Node ID: daniels-macbook-pro.local-16935","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450021,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"registry"}
{"ts":1744829450021,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"registry"}
{"ts":1744829450022,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450027,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450028,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450033,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829450033,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829450033,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450043,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450107,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450107,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450107,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450107,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450107,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450108,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450129,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450130,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450130,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450130,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450130,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450130,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450130,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450131,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450131,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450248,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"db","svc":"db"}
{"ts":1744829450248,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"db","svc":"db"}
{"ts":1744829450294,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"db","svc":"db"}
{"ts":1744829450294,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450328,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450328,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450328,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450329,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450329,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450329,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450330,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450330,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450330,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450331,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450331,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450331,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450331,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450331,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450331,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450331,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450331,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450331,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450333,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829450333,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829450340,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829450340,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450340,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"db","svc":"db"}
{"ts":1744829450340,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829450340,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829450340,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450340,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"db","svc":"db"}
{"ts":1744829450340,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829450344,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"registry"}
{"ts":1744829450344,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450346,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829450346,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829450347,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450347,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450348,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"registry"}
{"ts":1744829450348,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450351,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"registry"}
{"ts":1744829450351,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450351,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450351,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450351,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"db","svc":"db"}
{"ts":1744829450351,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"db","svc":"db"}
{"ts":1744829450411,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450414,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_Users_role' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450418,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450434,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450436,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829450436,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829450436,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450436,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450436,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450438,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450438,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450438,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450439,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450439,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450439,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450440,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450440,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450440,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450440,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450440,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450440,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450441,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450441,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450441,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450443,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450443,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450443,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450444,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"registry"}
{"ts":1744829450444,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450445,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829450445,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450446,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 113ms.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450521,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"username\");ALTER TABLE \"Users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450526,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"email\");ALTER TABLE \"Users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450530,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450532,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"active\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET DEFAULT true;ALTER TABLE \"Users\" ALTER COLUMN \"active\" TYPE BOOLEAN; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450534,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"role\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"role\" SET DEFAULT 'user';DO 'BEGIN CREATE TYPE \"public\".\"enum_Users_role\" AS ENUM(''user'', ''admin''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"Users\" ALTER COLUMN \"role\" TYPE \"public\".\"enum_Users_role\" USING (\"role\"::\"public\".\"enum_Users_role\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450539,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450540,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450542,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450545,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"db","svc":"db"}
{"ts":1744829450547,"level":"error","msg":"Connection error! Error\n    at Query.run (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.createTable (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-interface.js:98:12)\n    at async user.sync (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:942:7)\n    at async Promise.all (index 3) {\n  name: 'SequelizeUniqueConstraintError',\n  errors: [ ValidationErrorItem { message: 'typname must be unique', type: 'unique violation', path: 'typname', value: 'users', origin: 'DB', instance: null, validatorKey: 'not_unique', validatorName: null, validatorArgs: [] }, ValidationErrorItem { message: 'typnamespace must be unique', type: 'unique violation', path: 'typnamespace', value: '2200', origin: 'DB', instance: null, validatorKey: 'not_unique', validatorName: null, validatorArgs: [] } ],\n  parent: error: duplicate key value violates unique constraint \"pg_type_typname_nsp_index\"\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 245,\n    severity: 'ERROR',\n    code: '23505',\n    detail: 'Key (typname, typnamespace)=(users, 2200) already exists.',\n    hint: undefined,\n    position: undefined,\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: 'pg_catalog',\n    table: 'pg_type',\n    column: undefined,\n    dataType: undefined,\n    constraint: 'pg_type_typname_nsp_index',\n    file: 'nbtinsert.c',\n    line: '666',\n    routine: '_bt_check_unique',\n    sql: 'CREATE TABLE IF NOT EXISTS \"public\".\"users\" (\"id\" UUID , \"username\" VARCHAR(255) NOT NULL UNIQUE, \"email\" VARCHAR(255) NOT NULL UNIQUE, \"password\" VARCHAR(255) NOT NULL, \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));',\n    parameters: undefined\n  },\n  original: error: duplicate key value violates unique constraint \"pg_type_typname_nsp_index\"\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 245,\n    severity: 'ERROR',\n    code: '23505',\n    detail: 'Key (typname, typnamespace)=(users, 2200) already exists.',\n    hint: undefined,\n    position: undefined,\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: 'pg_catalog',\n    table: 'pg_type',\n    column: undefined,\n    dataType: undefined,\n    constraint: 'pg_type_typname_nsp_index',\n    file: 'nbtinsert.c',\n    line: '666',\n    routine: '_bt_check_unique',\n    sql: 'CREATE TABLE IF NOT EXISTS \"public\".\"users\" (\"id\" UUID , \"username\" VARCHAR(255) NOT NULL UNIQUE, \"email\" VARCHAR(255) NOT NULL UNIQUE, \"password\" VARCHAR(255) NOT NULL, \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));',\n    parameters: undefined\n  },\n  fields: { typname: 'users', typnamespace: '2200' },\n  sql: 'CREATE TABLE IF NOT EXISTS \"public\".\"users\" (\"id\" UUID , \"username\" VARCHAR(255) NOT NULL UNIQUE, \"email\" VARCHAR(255) NOT NULL UNIQUE, \"password\" VARCHAR(255) NOT NULL, \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));'\n}","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829450945,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450946,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450946,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450946,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450946,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450946,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450946,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450946,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450946,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450946,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450946,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450947,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450947,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450947,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829451548,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829451598,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829451599,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829451599,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829451599,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829451599,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 1s.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829451599,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829545034,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829545034,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829545034,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"db","svc":"db"}
{"ts":1744829545034,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829545037,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829545037,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"db","svc":"db"}
{"ts":1744829545037,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829545038,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829545038,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829545038,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829545038,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829553248,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553248,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553248,"level":"info","msg":"Node ID: daniels-macbook-pro.local-19101","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553249,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"registry"}
{"ts":1744829553249,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"registry"}
{"ts":1744829553249,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553254,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553255,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553259,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829553259,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829553260,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553268,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553320,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553320,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553320,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553321,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553321,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553321,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553337,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553337,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553338,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553338,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553338,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553338,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553338,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553339,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553339,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553438,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"db","svc":"db"}
{"ts":1744829553438,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"db","svc":"db"}
{"ts":1744829553479,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"db","svc":"db"}
{"ts":1744829553479,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553509,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553509,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553509,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553510,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553510,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553510,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553511,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553511,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553511,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553512,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553512,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553512,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553512,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553512,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553512,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553512,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553512,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553512,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553512,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829553513,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829553520,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829553520,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553520,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"db","svc":"db"}
{"ts":1744829553520,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829553520,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829553520,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553520,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"db","svc":"db"}
{"ts":1744829553520,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829553524,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"registry"}
{"ts":1744829553524,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553526,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829553526,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829553527,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553527,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553528,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"registry"}
{"ts":1744829553528,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553531,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"registry"}
{"ts":1744829553531,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553531,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553531,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553532,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"db","svc":"db"}
{"ts":1744829553532,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"db","svc":"db"}
{"ts":1744829553600,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553603,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_role' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553607,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553618,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829553618,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829553618,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553618,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553618,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553619,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553619,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553619,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553619,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553619,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553619,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553621,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553621,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553621,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553621,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553621,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553621,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553621,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553621,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553621,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553623,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"registry"}
{"ts":1744829553623,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553623,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829553624,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553624,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 364ms.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553624,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553626,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829553626,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829553626,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829553626,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553626,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 113ms.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553699,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553703,"level":"info","msg":"Executing (default): ALTER TABLE \"public\".\"users\" ADD COLUMN \"active\" BOOLEAN DEFAULT true; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553706,"level":"info","msg":"Executing (default): DO 'BEGIN CREATE TYPE \"public\".\"enum_users_role\" AS ENUM(''user'', ''admin''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"public\".\"users\" ADD COLUMN \"role\" \"public\".\"enum_users_role\" DEFAULT 'user'; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553707,"level":"info","msg":"Executing (default): ALTER TABLE \"public\".\"users\" ADD COLUMN \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553708,"level":"info","msg":"Executing (default): ALTER TABLE \"public\".\"users\" ADD COLUMN \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553709,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"username\");ALTER TABLE \"users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553714,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"email\");ALTER TABLE \"users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553718,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553719,"level":"info","msg":"Executing (default): ALTER TABLE \"public\".\"users\" DROP COLUMN \"created_at\"; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553720,"level":"info","msg":"Executing (default): ALTER TABLE \"public\".\"users\" DROP COLUMN \"updated_at\"; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553721,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553723,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"db","svc":"db"}
{"ts":1744829554124,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554125,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554125,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554125,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554125,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554125,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554126,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554126,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554126,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554126,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554126,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554126,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554126,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829554126,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829603413,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829603423,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829603424,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829603424,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829603424,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: '908718d1-53c0-4ab2-9143-dc8a845e5e7a' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829603472,"level":"debug","msg":"The 'users.register' request is rejected. { requestID: '908718d1-53c0-4ab2-9143-dc8a845e5e7a' } Error\n    at Query.run (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.select (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-interface.js:407:12)\n    at async user.findAll (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1140:21)\n    at async user.findOne (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1240:12)\n    at async Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:113:33)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  name: 'SequelizeDatabaseError',\n  parent: error: column \"created_at\" does not exist\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at Socket.emit (node:domain:488:12)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 171,\n    severity: 'ERROR',\n    code: '42703',\n    detail: undefined,\n    hint: 'Perhaps you meant to reference the column \"user.createdAt\".',\n    position: '47',\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: undefined,\n    table: undefined,\n    column: undefined,\n    dataType: undefined,\n    constraint: undefined,\n    file: 'parse_relation.c',\n    line: '3729',\n    routine: 'errorMissingColumn',\n    sql: `SELECT \"id\", \"username\", \"email\", \"password\", \"created_at\", \"updated_at\" FROM \"public\".\"users\" AS \"user\" WHERE \"user\".\"email\" = 'john@example.com';`,\n    parameters: undefined\n  },\n  original: error: column \"created_at\" does not exist\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at Socket.emit (node:domain:488:12)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 171,\n    severity: 'ERROR',\n    code: '42703',\n    detail: undefined,\n    hint: 'Perhaps you meant to reference the column \"user.createdAt\".',\n    position: '47',\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: undefined,\n    table: undefined,\n    column: undefined,\n    dataType: undefined,\n    constraint: undefined,\n    file: 'parse_relation.c',\n    line: '3729',\n    routine: 'errorMissingColumn',\n    sql: `SELECT \"id\", \"username\", \"email\", \"password\", \"created_at\", \"updated_at\" FROM \"public\".\"users\" AS \"user\" WHERE \"user\".\"email\" = 'john@example.com';`,\n    parameters: undefined\n  },\n  sql: `SELECT \"id\", \"username\", \"email\", \"password\", \"created_at\", \"updated_at\" FROM \"public\".\"users\" AS \"user\" WHERE \"user\".\"email\" = 'john@example.com';`,\n  parameters: {}\n}","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829603472,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '908718d1-53c0-4ab2-9143-dc8a845e5e7a' } Error\n    at Query.run (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.select (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-interface.js:407:12)\n    at async user.findAll (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1140:21)\n    at async user.findOne (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1240:12)\n    at async Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:113:33)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  name: 'SequelizeDatabaseError',\n  parent: error: column \"created_at\" does not exist\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at Socket.emit (node:domain:488:12)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 171,\n    severity: 'ERROR',\n    code: '42703',\n    detail: undefined,\n    hint: 'Perhaps you meant to reference the column \"user.createdAt\".',\n    position: '47',\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: undefined,\n    table: undefined,\n    column: undefined,\n    dataType: undefined,\n    constraint: undefined,\n    file: 'parse_relation.c',\n    line: '3729',\n    routine: 'errorMissingColumn',\n    sql: `SELECT \"id\", \"username\", \"email\", \"password\", \"created_at\", \"updated_at\" FROM \"public\".\"users\" AS \"user\" WHERE \"user\".\"email\" = 'john@example.com';`,\n    parameters: undefined\n  },\n  original: error: column \"created_at\" does not exist\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at Socket.emit (node:domain:488:12)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 171,\n    severity: 'ERROR',\n    code: '42703',\n    detail: undefined,\n    hint: 'Perhaps you meant to reference the column \"user.createdAt\".',\n    position: '47',\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: undefined,\n    table: undefined,\n    column: undefined,\n    dataType: undefined,\n    constraint: undefined,\n    file: 'parse_relation.c',\n    line: '3729',\n    routine: 'errorMissingColumn',\n    sql: `SELECT \"id\", \"username\", \"email\", \"password\", \"created_at\", \"updated_at\" FROM \"public\".\"users\" AS \"user\" WHERE \"user\".\"email\" = 'john@example.com';`,\n    parameters: undefined\n  },\n  sql: `SELECT \"id\", \"username\", \"email\", \"password\", \"created_at\", \"updated_at\" FROM \"public\".\"users\" AS \"user\" WHERE \"user\".\"email\" = 'john@example.com';`,\n  parameters: {}\n}","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829603472,"level":"error","msg":"   Request error! SequelizeDatabaseError : column \"created_at\" does not exist \n Error\n    at Query.run (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.select (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-interface.js:407:12)\n    at async user.findAll (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1140:21)\n    at async user.findOne (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1240:12)\n    at async Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:113:33)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 \nData: ","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829627500,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829627500,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829627501,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"db","svc":"db"}
{"ts":1744829627501,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829627502,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829627502,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"db","svc":"db"}
{"ts":1744829627503,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829627503,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829627503,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829627503,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829627504,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829637200,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637200,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637200,"level":"info","msg":"Node ID: daniels-macbook-pro.local-19263","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637201,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"registry"}
{"ts":1744829637201,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"registry"}
{"ts":1744829637201,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637206,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637207,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637212,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829637212,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829637212,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637221,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637282,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637282,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637282,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637282,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637282,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637282,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637299,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637299,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637299,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637299,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637300,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637300,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637300,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637301,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637301,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637412,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"db","svc":"db"}
{"ts":1744829637413,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"db","svc":"db"}
{"ts":1744829637450,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"db","svc":"db"}
{"ts":1744829637450,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637483,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637483,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637484,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637485,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637485,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637485,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637485,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637485,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637485,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637486,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637486,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637486,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637486,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637486,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637486,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637486,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637486,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637486,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637488,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637488,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637488,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637488,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829637488,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829637493,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829637493,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637493,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"db","svc":"db"}
{"ts":1744829637493,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829637493,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829637493,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637493,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"db","svc":"db"}
{"ts":1744829637493,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829637498,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"registry"}
{"ts":1744829637498,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637500,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829637500,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829637501,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637501,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637502,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"registry"}
{"ts":1744829637502,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637505,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"registry"}
{"ts":1744829637505,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637505,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637505,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637505,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"db","svc":"db"}
{"ts":1744829637505,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"db","svc":"db"}
{"ts":1744829637570,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT', dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true }","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637570,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"db","svc":"db"}
{"ts":1744829637600,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829637600,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829637600,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637600,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637600,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637601,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637601,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637601,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637601,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637601,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637601,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637603,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637603,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637603,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637603,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637603,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637603,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637603,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637603,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637603,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"registry"}
{"ts":1744829637604,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637605,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829637605,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637605,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 393ms.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637605,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637710,"level":"error","msg":"Connection error! Error\n    at Query.run (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.createTable (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-interface.js:98:12)\n    at async user.sync (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:942:7)\n    at async Promise.all (index 3) {\n  name: 'SequelizeUniqueConstraintError',\n  errors: [ ValidationErrorItem { message: 'typname must be unique', type: 'unique violation', path: 'typname', value: 'users', origin: 'DB', instance: null, validatorKey: 'not_unique', validatorName: null, validatorArgs: [] }, ValidationErrorItem { message: 'typnamespace must be unique', type: 'unique violation', path: 'typnamespace', value: '2200', origin: 'DB', instance: null, validatorKey: 'not_unique', validatorName: null, validatorArgs: [] } ],\n  parent: error: duplicate key value violates unique constraint \"pg_type_typname_nsp_index\"\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 245,\n    severity: 'ERROR',\n    code: '23505',\n    detail: 'Key (typname, typnamespace)=(users, 2200) already exists.',\n    hint: undefined,\n    position: undefined,\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: 'pg_catalog',\n    table: 'pg_type',\n    column: undefined,\n    dataType: undefined,\n    constraint: 'pg_type_typname_nsp_index',\n    file: 'nbtinsert.c',\n    line: '666',\n    routine: '_bt_check_unique',\n    sql: 'CREATE TABLE IF NOT EXISTS \"public\".\"users\" (\"id\" UUID , \"username\" VARCHAR(255) NOT NULL UNIQUE, \"email\" VARCHAR(255) NOT NULL UNIQUE, \"password\" VARCHAR(255) NOT NULL, \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));',\n    parameters: undefined\n  },\n  original: error: duplicate key value violates unique constraint \"pg_type_typname_nsp_index\"\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 245,\n    severity: 'ERROR',\n    code: '23505',\n    detail: 'Key (typname, typnamespace)=(users, 2200) already exists.',\n    hint: undefined,\n    position: undefined,\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: 'pg_catalog',\n    table: 'pg_type',\n    column: undefined,\n    dataType: undefined,\n    constraint: 'pg_type_typname_nsp_index',\n    file: 'nbtinsert.c',\n    line: '666',\n    routine: '_bt_check_unique',\n    sql: 'CREATE TABLE IF NOT EXISTS \"public\".\"users\" (\"id\" UUID , \"username\" VARCHAR(255) NOT NULL UNIQUE, \"email\" VARCHAR(255) NOT NULL UNIQUE, \"password\" VARCHAR(255) NOT NULL, \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));',\n    parameters: undefined\n  },\n  fields: { typname: 'users', typnamespace: '2200' },\n  sql: 'CREATE TABLE IF NOT EXISTS \"public\".\"users\" (\"id\" UUID , \"username\" VARCHAR(255) NOT NULL UNIQUE, \"email\" VARCHAR(255) NOT NULL UNIQUE, \"password\" VARCHAR(255) NOT NULL, \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));'\n}","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829638107,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638108,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638108,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638108,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638108,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638108,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638108,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638108,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638108,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638108,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638108,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638108,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638109,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829638109,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829638711,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829638744,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829638744,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829638744,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829638744,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829638744,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 1s.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829641318,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829641326,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829641326,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829641326,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829641326,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: 'fa96a58c-d0c3-465c-8e9d-565744ad7ba9' }","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829641332,"level":"debug","msg":"The 'users.register' request is rejected. { requestID: 'fa96a58c-d0c3-465c-8e9d-565744ad7ba9' } TypeError: this.encryptPassword is not a function\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:124:51)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829641332,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'fa96a58c-d0c3-465c-8e9d-565744ad7ba9' } TypeError: this.encryptPassword is not a function\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:124:51)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829641332,"level":"error","msg":"   Request error! TypeError : this.encryptPassword is not a function \n TypeError: this.encryptPassword is not a function\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:124:51)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 \nData: ","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829642110,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829642111,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829642111,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829642111,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829642111,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: 'd404d08c-44f7-4a72-b89e-f5c2d95bda46' }","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829642114,"level":"debug","msg":"The 'users.register' request is rejected. { requestID: 'd404d08c-44f7-4a72-b89e-f5c2d95bda46' } TypeError: this.encryptPassword is not a function\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:124:51)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829642114,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'd404d08c-44f7-4a72-b89e-f5c2d95bda46' } TypeError: this.encryptPassword is not a function\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:124:51)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829642114,"level":"error","msg":"   Request error! TypeError : this.encryptPassword is not a function \n TypeError: this.encryptPassword is not a function\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:124:51)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 \nData: ","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829715034,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829715034,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829715034,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"db","svc":"db"}
{"ts":1744829715034,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829715035,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829715035,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"db","svc":"db"}
{"ts":1744829715035,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829715035,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829715036,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829715036,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829715036,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829716247,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716247,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716247,"level":"info","msg":"Node ID: daniels-macbook-pro.local-19407","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716248,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"registry"}
{"ts":1744829716248,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"registry"}
{"ts":1744829716248,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716253,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716254,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716259,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829716259,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829716259,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716268,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716329,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716330,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716330,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716330,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716330,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716330,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716350,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716350,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716351,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716351,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716351,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716351,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716351,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716352,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716352,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716464,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"db","svc":"db"}
{"ts":1744829716465,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"db","svc":"db"}
{"ts":1744829716505,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"db","svc":"db"}
{"ts":1744829716505,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716542,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716542,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716542,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716543,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716543,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716543,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716543,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716543,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716543,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716544,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716544,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716544,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716544,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716544,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716544,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716546,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716546,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716546,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716546,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716546,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716546,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716546,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829716546,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829716552,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829716552,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716552,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"db","svc":"db"}
{"ts":1744829716552,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829716552,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829716552,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716552,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"db","svc":"db"}
{"ts":1744829716552,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829716557,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"registry"}
{"ts":1744829716557,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716559,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829716559,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829716560,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716560,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716561,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"registry"}
{"ts":1744829716561,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716564,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"registry"}
{"ts":1744829716564,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716564,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716564,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716564,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"db","svc":"db"}
{"ts":1744829716564,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"db","svc":"db"}
{"ts":1744829716643,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT', dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true }","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716643,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"db","svc":"db"}
{"ts":1744829716654,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829716654,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829716654,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716654,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716654,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716655,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716655,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716655,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716655,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716655,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716655,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716656,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716656,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716656,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716656,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716656,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716656,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716656,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716656,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716656,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716657,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716657,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716657,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716657,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716657,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716657,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716657,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716657,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716657,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716658,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716658,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716658,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716658,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716658,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716658,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716658,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"registry"}
{"ts":1744829716658,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716658,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829716658,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716658,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 112ms.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716731,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829716731,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829716731,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829716731,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716732,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 473ms.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716732,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829717159,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717160,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717160,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717160,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717160,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717160,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717160,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717160,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717160,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717160,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717160,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717160,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717161,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829717161,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829719783,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829719790,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829719790,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829719790,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829719791,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: '5604f06b-633d-4a75-ba9b-61c3e10272c7' }","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829719867,"level":"debug","msg":"The 'users.register' request is rejected. { requestID: '5604f06b-633d-4a75-ba9b-61c3e10272c7' } ValidationError [SequelizeValidationError]: notNull Violation: user.password cannot be null\n    at InstanceValidator._validate (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/instance-validator.js:50:13)\n    at async InstanceValidator._validateAndRunHooks (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/instance-validator.js:60:7)\n    at async InstanceValidator.validate (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/instance-validator.js:54:12)\n    at async model.save (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:2426:7)\n    at async user.create (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1362:12)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  errors: [ ValidationErrorItem { message: 'user.password cannot be null', type: 'notNull Violation', path: 'password', value: null, origin: 'CORE', instance: [user], validatorKey: 'is_null', validatorName: null, validatorArgs: [] } ]\n}","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829719868,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '5604f06b-633d-4a75-ba9b-61c3e10272c7' } ValidationError [SequelizeValidationError]: notNull Violation: user.password cannot be null\n    at InstanceValidator._validate (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/instance-validator.js:50:13)\n    at async InstanceValidator._validateAndRunHooks (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/instance-validator.js:60:7)\n    at async InstanceValidator.validate (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/instance-validator.js:54:12)\n    at async model.save (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:2426:7)\n    at async user.create (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1362:12)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  errors: [ ValidationErrorItem { message: 'user.password cannot be null', type: 'notNull Violation', path: 'password', value: null, origin: 'CORE', instance: [user], validatorKey: 'is_null', validatorName: null, validatorArgs: [] } ]\n}","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829719868,"level":"error","msg":"   Request error! SequelizeValidationError : notNull Violation: user.password cannot be null \n SequelizeValidationError: notNull Violation: user.password cannot be null\n    at InstanceValidator._validate (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/instance-validator.js:50:13)\n    at async InstanceValidator._validateAndRunHooks (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/instance-validator.js:60:7)\n    at async InstanceValidator.validate (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/instance-validator.js:54:12)\n    at async model.save (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:2426:7)\n    at async user.create (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1362:12)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 \nData: ","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829770008,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829770008,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829770008,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"db","svc":"db"}
{"ts":1744829770008,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829770010,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829770010,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"db","svc":"db"}
{"ts":1744829770010,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829770010,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829770010,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829770011,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829770011,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829771316,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771316,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771316,"level":"info","msg":"Node ID: daniels-macbook-pro.local-19556","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771316,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"registry"}
{"ts":1744829771316,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"registry"}
{"ts":1744829771317,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771324,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771325,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771329,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829771329,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829771330,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771338,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771397,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771398,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771398,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771399,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771399,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771399,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771416,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771416,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771416,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771416,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771416,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771417,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771417,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771417,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771417,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771534,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"db","svc":"db"}
{"ts":1744829771534,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"db","svc":"db"}
{"ts":1744829771574,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"db","svc":"db"}
{"ts":1744829771574,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771608,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771608,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771608,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771609,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771609,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771609,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771609,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771609,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771609,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771610,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771610,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771610,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771610,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771610,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771610,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771612,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771612,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771612,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771612,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771612,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771612,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771612,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829771612,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829771618,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829771618,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771618,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"db","svc":"db"}
{"ts":1744829771618,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829771618,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829771618,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771618,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"db","svc":"db"}
{"ts":1744829771618,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829771623,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"registry"}
{"ts":1744829771623,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771625,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829771625,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829771626,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771626,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771626,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"registry"}
{"ts":1744829771626,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771630,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"registry"}
{"ts":1744829771630,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771630,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771630,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771630,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"db","svc":"db"}
{"ts":1744829771630,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"db","svc":"db"}
{"ts":1744829771690,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT', dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true }","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771691,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"db","svc":"db"}
{"ts":1744829771702,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829771702,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829771702,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771702,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771702,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771703,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771703,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771703,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771704,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771704,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771704,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771705,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771705,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771705,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771705,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771705,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771705,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771705,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771705,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771705,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771707,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"registry"}
{"ts":1744829771707,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771707,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829771707,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771707,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 95ms.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771777,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829771777,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829771777,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829771777,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771778,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 447ms.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771778,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829772209,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772210,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772210,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772210,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772210,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772210,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772210,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772210,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772210,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772210,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772210,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772210,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772211,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829772211,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829777636,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829777644,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829777644,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829777644,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829777646,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: '36eb4aa2-5e23-4fda-b155-e8c117a19f90' }","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829777730,"level":"info","msg":"<= 200 POST /api/users/register [+94.512 ms]","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829793197,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829793198,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829793198,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829793198,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829793198,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: '24f7826f-f1f3-4f1b-9f2e-277b106b7c84' }","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829793219,"level":"info","msg":"USER : [object SequelizeInstance:user]","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829793282,"level":"info","msg":"<= 200 POST /api/users/login [+84.643 ms]","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829861854,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829861854,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829861854,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"db","svc":"db"}
{"ts":1744829861854,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829861858,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829861858,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"db","svc":"db"}
{"ts":1744829861858,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829861859,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829861859,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829861859,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829861859,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
