{"ts":1744827039445,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039445,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039446,"level":"info","msg":"Node ID: daniels-macbook-pro.local-12637","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039446,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"registry"}
{"ts":1744827039446,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"registry"}
{"ts":1744827039447,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039453,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039454,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039458,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827039458,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827039458,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039477,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039537,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039537,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039538,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039538,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039538,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039538,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039556,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039556,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039556,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039556,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039556,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039556,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039556,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039557,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039557,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039670,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"db","svc":"db"}
{"ts":1744827039670,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"db","svc":"db"}
{"ts":1744827039723,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"db","svc":"db"}
{"ts":1744827039723,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039756,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039757,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039757,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039758,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039758,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039758,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039758,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039758,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039758,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039759,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039759,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039759,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039759,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039759,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039759,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039759,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039759,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039759,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039760,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039760,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039760,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039760,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039760,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039760,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039760,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039760,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039760,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039761,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039761,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039761,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039761,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039761,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039761,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039761,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827039761,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827039768,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827039768,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039768,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"db","svc":"db"}
{"ts":1744827039768,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827039768,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827039768,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039768,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"db","svc":"db"}
{"ts":1744827039768,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827039773,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"registry"}
{"ts":1744827039773,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039775,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827039775,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827039777,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039777,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039778,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"registry"}
{"ts":1744827039778,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039781,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"registry"}
{"ts":1744827039781,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039781,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039781,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827039781,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"db","svc":"db"}
{"ts":1744827039781,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"db","svc":"db"}
{"ts":1744827039827,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039829,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_Users_role' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039831,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039833,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827039836,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827039840,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039856,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"username\");ALTER TABLE \"Users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039875,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"email\");ALTER TABLE \"Users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039886,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039887,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"active\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET DEFAULT true;ALTER TABLE \"Users\" ALTER COLUMN \"active\" TYPE BOOLEAN; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039889,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"role\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"role\" SET DEFAULT 'user';DO 'BEGIN CREATE TYPE \"public\".\"enum_Users_role\" AS ENUM(''user'', ''admin''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"Users\" ALTER COLUMN \"role\" TYPE \"public\".\"enum_Users_role\" USING (\"role\"::\"public\".\"enum_Users_role\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039896,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039897,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039898,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827039904,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"db","svc":"db"}
{"ts":1744827040282,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827040284,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827040284,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827040284,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827040284,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827040284,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827040284,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827040285,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827040285,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827040834,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827040836,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827040877,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827040877,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827041878,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827041881,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827041910,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827041911,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827042912,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827042918,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827042943,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827042944,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827043944,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827043954,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827043990,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827043992,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827044991,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827044993,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827045015,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827045016,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827046016,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827046017,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827046042,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827046042,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827047058,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827047059,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827047081,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827047081,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827048083,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827048084,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827048107,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827048108,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827049108,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827049109,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827049138,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827049140,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827050139,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827050140,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827050165,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827050169,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827051166,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827051170,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827051197,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827051197,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827052198,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827052199,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827052234,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827052234,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827053235,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827053237,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827053259,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827053259,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827054260,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827054261,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827054289,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827054290,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827055293,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827055294,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827055318,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827055318,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827056318,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827056319,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827056341,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827056342,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827057342,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827057343,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827057371,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827057372,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827058372,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827058372,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827058397,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827058400,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827059398,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827059400,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827059422,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827059423,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827060424,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827060424,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827060453,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827060453,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827061454,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827061455,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827061482,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827061482,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827062482,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827062483,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827062516,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827062516,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827063517,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827063518,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827063545,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827063548,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827064546,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827064548,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827064575,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827064575,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827065575,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827065577,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827065601,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827065601,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827066602,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827066602,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827066628,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827066629,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827067629,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827067630,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827067657,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827067657,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827068659,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827068659,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827068682,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827068683,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827069682,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827069683,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827069709,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827069710,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827070709,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827070711,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827070736,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827070737,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827071193,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827071193,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827071193,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"db","svc":"db"}
{"ts":1744827071193,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827071194,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827071194,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"db","svc":"db"}
{"ts":1744827071194,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827071194,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"api","svc":"api"}
{"ts":1744827071199,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"users","svc":"users"}
{"ts":1744827071199,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827071199,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-12637","ns":"","mod":"broker"}
{"ts":1744827104654,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104654,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104654,"level":"info","msg":"Node ID: daniels-macbook-pro.local-12781","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104655,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"registry"}
{"ts":1744827104655,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"registry"}
{"ts":1744827104656,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104661,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104662,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104666,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827104666,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827104667,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104683,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104742,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104746,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104746,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104746,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104747,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104747,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104763,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104763,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104763,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104763,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104764,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104764,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104764,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104765,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104765,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104874,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"db","svc":"db"}
{"ts":1744827104874,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"db","svc":"db"}
{"ts":1744827104923,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"db","svc":"db"}
{"ts":1744827104923,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104956,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104956,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104956,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104957,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104957,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104957,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104958,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104958,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104958,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104959,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104960,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827104960,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827104967,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827104967,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104967,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"db","svc":"db"}
{"ts":1744827104967,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827104967,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827104967,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104967,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"db","svc":"db"}
{"ts":1744827104967,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827104972,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"registry"}
{"ts":1744827104972,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104974,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827104974,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827104975,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104975,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104976,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"registry"}
{"ts":1744827104976,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104979,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"registry"}
{"ts":1744827104979,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827104979,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104979,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827104979,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"db","svc":"db"}
{"ts":1744827104979,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"db","svc":"db"}
{"ts":1744827105028,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105030,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827105031,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_Users_role' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105033,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105034,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827105042,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105059,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"username\");ALTER TABLE \"Users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105074,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"email\");ALTER TABLE \"Users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105088,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105090,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"active\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET DEFAULT true;ALTER TABLE \"Users\" ALTER COLUMN \"active\" TYPE BOOLEAN; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105092,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"role\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"role\" SET DEFAULT 'user';DO 'BEGIN CREATE TYPE \"public\".\"enum_Users_role\" AS ENUM(''user'', ''admin''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"Users\" ALTER COLUMN \"role\" TYPE \"public\".\"enum_Users_role\" USING (\"role\"::\"public\".\"enum_Users_role\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105097,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105098,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105101,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105107,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"db","svc":"db"}
{"ts":1744827105480,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827105481,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827105481,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827105481,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827105481,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827105481,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827105481,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827105481,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827105481,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827106031,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827106034,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827106067,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827106067,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827107067,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827107068,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827107088,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827107089,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827108089,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827108093,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827108118,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827108121,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827109118,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827109122,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827109147,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827109147,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827110147,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827110148,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827110173,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827110174,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827111186,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827111195,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827111291,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827111292,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827112294,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827112297,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827112325,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827112326,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827113326,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827113332,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827113359,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827113359,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827114361,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827114362,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827114396,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827114396,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827115397,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827115397,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827115424,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827115424,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827116430,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827116430,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827116461,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827116462,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827117465,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827117467,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827117494,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827117495,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827118495,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827118497,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827118523,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827118526,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827119525,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827119527,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827119550,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827119551,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827120550,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827120551,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827120573,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827120574,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827121575,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827121576,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827121609,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827121609,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827122610,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827122610,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827122637,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827122638,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827123639,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827123640,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827123671,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827123672,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827124673,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827124677,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827124706,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827124707,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827125709,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827125710,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827125734,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827125735,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827126735,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827126736,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827126765,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827126765,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827127768,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827127769,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827127798,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827127799,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827128800,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827128800,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827128831,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827128832,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827129832,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827129833,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827129865,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827129869,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827130866,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827130870,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827130890,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827130895,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827131891,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827131895,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827131919,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827131920,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827132921,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827132922,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827132951,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827132952,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827133952,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827133952,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827133977,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827133977,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827134978,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827134982,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827135019,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827135020,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827136019,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827136020,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827136043,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827136043,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827137043,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827137054,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827137084,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827137084,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827138085,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827138087,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827138115,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827138116,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827139117,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827139118,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827139146,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827139146,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827140147,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827140147,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827140168,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827140168,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827141169,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827141170,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827141199,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827141199,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827142201,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827142201,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827142224,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827142225,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827143228,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827143230,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827143259,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827143259,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827144260,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827144261,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827144290,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827144291,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827145292,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827145293,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827145320,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827145320,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827146321,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827146324,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827146346,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827146346,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827147347,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827147348,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827147373,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827147373,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827148374,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827148374,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827148406,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827148411,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827149409,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827149411,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827149437,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827149438,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827150438,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827150439,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827150487,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827150488,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827151492,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827151493,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827151521,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827151521,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827152522,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827152522,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827152546,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827152547,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827153548,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827153549,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827153636,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827153636,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827154636,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827154638,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827154672,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827154672,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827155673,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827155675,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827155704,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827155704,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827156705,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827156706,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827156736,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827156737,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827157739,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827157739,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827157772,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827157773,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827158774,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827158776,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827158819,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827158820,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827159819,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827159820,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827159848,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827159849,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827160850,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827160851,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827160889,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827160889,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827161890,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827161892,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827161920,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827161920,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827162920,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827162921,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827162948,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827162948,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827163949,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827163951,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827163979,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827163979,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827164979,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827164980,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827165012,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827165014,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827166013,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827166015,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827166058,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827166063,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827167059,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827167062,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827167102,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827167103,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827168103,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827168104,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827168126,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827168127,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827169127,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827169128,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827169159,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827169160,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827170160,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827170160,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827170188,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827170188,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827171191,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827171192,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827171225,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827171225,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827172225,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827172226,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827172251,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827172252,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827173252,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827173253,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827173279,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827173279,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827174280,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827174280,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827174315,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827174315,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827175316,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827175317,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827175344,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827175344,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827176346,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827176347,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827176379,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827176379,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827177380,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827177381,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827177418,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827177418,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827178419,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827178420,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827178451,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827178451,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827179451,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827179451,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827179479,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827179479,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827180479,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827180480,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827180515,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827180515,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827181515,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827181516,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827181545,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827181546,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827182547,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827182548,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827182573,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827182574,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827183576,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827183582,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827183639,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827183639,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827184640,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827184641,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827184673,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827184673,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827185674,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827185674,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827185699,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827185701,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827186700,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827186701,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827186737,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827186737,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827187737,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827187737,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827187760,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827187761,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827188761,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827188763,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827188810,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827188810,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827189811,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827189812,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827189854,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827189854,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827190855,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827190856,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827190893,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827190893,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827191894,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827191895,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827191919,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827191919,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827192919,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827192920,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827192946,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827192946,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827193947,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827193947,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827193972,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827193972,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827194973,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827194976,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827195002,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827195002,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827196002,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827196003,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827196036,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827196037,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827197037,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827197039,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827197076,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827197077,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827198077,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827198086,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827198115,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827198116,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827199116,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827199117,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827199145,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827199146,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827200146,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827200147,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827200171,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827200171,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827201172,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827201173,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827201201,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827201202,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827202202,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827202203,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827202228,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827202228,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827203229,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827203230,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827203252,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827203252,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827204253,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827204255,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827204280,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827204280,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827205280,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827205281,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827205304,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827205304,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827206305,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827206307,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827206346,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827206347,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827207347,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827207350,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827207376,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827207376,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827208376,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827208377,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827208407,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827208408,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827209408,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827209409,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827209434,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827209435,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827210435,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827210436,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827210487,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827210496,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827211489,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827211497,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827211516,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827211518,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827212518,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827212519,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827212555,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827212556,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827213557,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827213559,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827213587,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827213587,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827214587,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827214588,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827214628,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827214629,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827215629,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827215630,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827215658,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827215659,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827216659,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827216659,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827216683,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827216684,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827217684,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827217686,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827217718,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827217720,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827218719,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827218721,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827218745,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827218745,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827219748,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827219750,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827219777,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827219777,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827220778,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827220779,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827220819,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827220819,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827221820,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827221821,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827221850,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827221850,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827222852,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827222853,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827222877,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827222877,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827223878,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827223880,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827223909,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827223909,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827224909,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827224911,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827224939,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827224941,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827225940,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827225941,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827225976,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827225976,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827226977,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827226977,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827227011,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827227011,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827228013,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827228014,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827228039,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827228039,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827229041,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827229046,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827229083,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827229085,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827230085,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827230088,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827230131,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827230131,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827231132,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827231132,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827231155,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827231158,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827232156,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827232158,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827232187,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827232190,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827233187,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827233190,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827233211,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827233212,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827234212,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827234212,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827234234,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827234236,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827235235,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827235236,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827235261,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827235264,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827236262,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827236264,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827236286,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827236292,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827237286,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827237292,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827237315,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827237317,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827238317,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827238320,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827238370,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827238370,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827239372,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827239374,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827239406,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827239406,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827240407,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827240408,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827240440,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827240441,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827241441,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827241441,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827241463,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827241464,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827242464,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827242465,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827242494,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827242495,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827243495,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827243498,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827243527,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827243527,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827244528,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827244529,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827244555,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827244555,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827245555,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827245556,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827245581,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827245582,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827246582,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827246584,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827246624,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827246624,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827247624,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827247626,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827247654,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827247655,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 3)","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827247685,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827247685,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827247686,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"db","svc":"db"}
{"ts":1744827247686,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827247687,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827247687,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"db","svc":"db"}
{"ts":1744827247687,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827247687,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"api","svc":"api"}
{"ts":1744827247690,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"users","svc":"users"}
{"ts":1744827247691,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827247691,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-12781","ns":"","mod":"broker"}
{"ts":1744827395120,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395121,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395121,"level":"info","msg":"Node ID: daniels-macbook-pro.local-13300","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395122,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"registry"}
{"ts":1744827395122,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"registry"}
{"ts":1744827395122,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395129,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395130,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395135,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827395135,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827395135,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395152,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395213,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395213,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395213,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395214,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395214,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395214,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395232,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395232,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395232,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395232,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395233,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395233,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395233,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395234,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395234,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395350,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"db","svc":"db"}
{"ts":1744827395350,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"db","svc":"db"}
{"ts":1744827395406,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"db","svc":"db"}
{"ts":1744827395406,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395440,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395440,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395440,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395441,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395441,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395441,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395441,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395441,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395441,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395442,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395442,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395442,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395442,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395442,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395442,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395443,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395443,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395443,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395443,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395443,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395443,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395443,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395443,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395443,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395444,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395444,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395444,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395444,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395444,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395444,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395444,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395444,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395444,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395444,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827395444,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827395451,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827395451,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395451,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"db","svc":"db"}
{"ts":1744827395451,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827395451,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827395451,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395451,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"db","svc":"db"}
{"ts":1744827395451,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827395455,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"registry"}
{"ts":1744827395455,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395458,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827395458,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827395459,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395459,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395459,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"registry"}
{"ts":1744827395459,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395462,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"registry"}
{"ts":1744827395462,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395462,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395462,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827395462,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"db","svc":"db"}
{"ts":1744827395462,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"db","svc":"db"}
{"ts":1744827395517,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395521,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_Users_role' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395523,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395540,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395547,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827395548,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827395548,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395548,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395548,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395549,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395549,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395549,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395549,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395549,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395549,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395551,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395551,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395551,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395551,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395551,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395551,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395551,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395551,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395551,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395552,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395553,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"registry"}
{"ts":1744827395553,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395553,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827395553,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395553,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 418ms.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395553,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395556,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"username\");ALTER TABLE \"Users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395572,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"email\");ALTER TABLE \"Users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395587,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395590,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"active\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET DEFAULT true;ALTER TABLE \"Users\" ALTER COLUMN \"active\" TYPE BOOLEAN; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395594,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"role\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"role\" SET DEFAULT 'user';DO 'BEGIN CREATE TYPE \"public\".\"enum_Users_role\" AS ENUM(''user'', ''admin''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"Users\" ALTER COLUMN \"role\" TYPE \"public\".\"enum_Users_role\" USING (\"role\"::\"public\".\"enum_Users_role\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395599,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395600,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395601,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827395607,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"db","svc":"db"}
{"ts":1744827395656,"level":"error","msg":"Connection error! Error\n    at Query.run (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.createTable (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-interface.js:98:12)\n    at async user.sync (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:942:7)\n    at async Promise.all (index 3) {\n  name: 'SequelizeUniqueConstraintError',\n  errors: [ ValidationErrorItem { message: 'typname must be unique', type: 'unique violation', path: 'typname', value: 'users', origin: 'DB', instance: null, validatorKey: 'not_unique', validatorName: null, validatorArgs: [] }, ValidationErrorItem { message: 'typnamespace must be unique', type: 'unique violation', path: 'typnamespace', value: '2200', origin: 'DB', instance: null, validatorKey: 'not_unique', validatorName: null, validatorArgs: [] } ],\n  parent: error: duplicate key value violates unique constraint \"pg_type_typname_nsp_index\"\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 245,\n    severity: 'ERROR',\n    code: '23505',\n    detail: 'Key (typname, typnamespace)=(users, 2200) already exists.',\n    hint: undefined,\n    position: undefined,\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: 'pg_catalog',\n    table: 'pg_type',\n    column: undefined,\n    dataType: undefined,\n    constraint: 'pg_type_typname_nsp_index',\n    file: 'nbtinsert.c',\n    line: '666',\n    routine: '_bt_check_unique',\n    sql: 'CREATE TABLE IF NOT EXISTS \"public\".\"users\" (\"id\" UUID , \"username\" VARCHAR(255) NOT NULL UNIQUE, \"email\" VARCHAR(255) NOT NULL UNIQUE, \"password\" VARCHAR(255) NOT NULL, \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));',\n    parameters: undefined\n  },\n  original: error: duplicate key value violates unique constraint \"pg_type_typname_nsp_index\"\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 245,\n    severity: 'ERROR',\n    code: '23505',\n    detail: 'Key (typname, typnamespace)=(users, 2200) already exists.',\n    hint: undefined,\n    position: undefined,\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: 'pg_catalog',\n    table: 'pg_type',\n    column: undefined,\n    dataType: undefined,\n    constraint: 'pg_type_typname_nsp_index',\n    file: 'nbtinsert.c',\n    line: '666',\n    routine: '_bt_check_unique',\n    sql: 'CREATE TABLE IF NOT EXISTS \"public\".\"users\" (\"id\" UUID , \"username\" VARCHAR(255) NOT NULL UNIQUE, \"email\" VARCHAR(255) NOT NULL UNIQUE, \"password\" VARCHAR(255) NOT NULL, \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));',\n    parameters: undefined\n  },\n  fields: { typname: 'users', typnamespace: '2200' },\n  sql: 'CREATE TABLE IF NOT EXISTS \"public\".\"users\" (\"id\" UUID , \"username\" VARCHAR(255) NOT NULL UNIQUE, \"email\" VARCHAR(255) NOT NULL UNIQUE, \"password\" VARCHAR(255) NOT NULL, \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));'\n}","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827396055,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827396058,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827396058,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827396657,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827396691,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827396691,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827396692,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827396692,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827396692,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 1s.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827400573,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827400579,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827400580,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827400580,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827400580,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: 'f69ce52a-920a-422e-b4fd-eafe5a277e7d' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827400581,"level":"info","msg":"<= 200 POST /api/users/register [+8.621 ms]","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827459024,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827459025,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827459025,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827459025,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827459025,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: 'e7361f62-bd00-464b-9c70-c907efa16a2e' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827459026,"level":"info","msg":"<= 200 POST /api/users/register [+2.905 ms]","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827459735,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827459736,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827459736,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827459736,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827459736,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: '3c31a11b-d9ce-4ba9-84f6-7ad04856845d' }","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827459736,"level":"info","msg":"<= 200 POST /api/users/register [+0.630 ms]","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827463486,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827463486,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827463486,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"db","svc":"db"}
{"ts":1744827463486,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827463488,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827463488,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"db","svc":"db"}
{"ts":1744827463488,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"users","svc":"users"}
{"ts":1744827463488,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827463488,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"api","svc":"api"}
{"ts":1744827463491,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827463491,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-13300","ns":"","mod":"broker"}
{"ts":1744827464723,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827464723,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827464723,"level":"info","msg":"Node ID: daniels-macbook-pro.local-13426","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827464723,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"registry"}
{"ts":1744827464724,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"registry"}
{"ts":1744827464724,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827464729,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827464730,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827464734,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827464734,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827464735,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827464744,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827464802,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464802,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464802,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464803,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464803,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464803,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464820,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464821,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464821,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464821,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464821,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464821,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464821,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464822,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827464822,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827464934,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"db","svc":"db"}
{"ts":1744827464934,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"db","svc":"db"}
{"ts":1744827464978,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"db","svc":"db"}
{"ts":1744827464978,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465011,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465011,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465011,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465012,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465012,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465012,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465013,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465013,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465013,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465014,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465014,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465014,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465014,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465014,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465014,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465014,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465014,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465014,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465015,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465016,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465016,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465016,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465016,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827465016,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827465022,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827465022,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465022,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"db","svc":"db"}
{"ts":1744827465022,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827465022,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827465022,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465022,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"db","svc":"db"}
{"ts":1744827465022,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827465027,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"registry"}
{"ts":1744827465027,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465029,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827465029,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827465030,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465030,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465031,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"registry"}
{"ts":1744827465031,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465034,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"registry"}
{"ts":1744827465034,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465035,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465035,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465035,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"db","svc":"db"}
{"ts":1744827465035,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"db","svc":"db"}
{"ts":1744827465098,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465102,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_Users_role' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465105,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465118,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827465118,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827465118,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465118,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465118,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465119,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465119,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465119,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465120,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465120,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465120,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465121,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"registry"}
{"ts":1744827465122,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465122,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827465122,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465123,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 387ms.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465123,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465124,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827465124,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827465124,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827465124,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465125,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 109ms.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465191,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465196,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"username\");ALTER TABLE \"Users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465213,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"email\");ALTER TABLE \"Users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465229,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465230,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"active\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET DEFAULT true;ALTER TABLE \"Users\" ALTER COLUMN \"active\" TYPE BOOLEAN; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465233,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"role\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"role\" SET DEFAULT 'user';DO 'BEGIN CREATE TYPE \"public\".\"enum_Users_role\" AS ENUM(''user'', ''admin''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"Users\" ALTER COLUMN \"role\" TYPE \"public\".\"enum_Users_role\" USING (\"role\"::\"public\".\"enum_Users_role\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465237,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465238,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465239,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465244,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"db","svc":"db"}
{"ts":1744827465623,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465624,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465624,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465624,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465624,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465624,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465624,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465624,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465624,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465624,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465624,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465625,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827465625,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827465625,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827467080,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827467087,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827467087,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827467087,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827467087,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: 'e5da2cb8-9356-4df8-8940-7404c7d4a398' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827467092,"level":"info","msg":"<= 200 POST /api/users/register [+13.344 ms]","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827467939,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827467940,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827467940,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827467940,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827467940,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: '3dbf23b8-0949-444c-84af-b4765c1c02b0' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827467942,"level":"info","msg":"<= 200 POST /api/users/register [+2.726 ms]","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827468723,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827468723,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827468723,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827468723,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827468723,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: '70482c01-89ce-4bce-b983-a453e336d0ef' }","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827468726,"level":"info","msg":"<= 200 POST /api/users/register [+3.604 ms]","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827489457,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827489458,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827489458,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"db","svc":"db"}
{"ts":1744827489458,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827489462,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827489462,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"db","svc":"db"}
{"ts":1744827489462,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"users","svc":"users"}
{"ts":1744827489462,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827489462,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"api","svc":"api"}
{"ts":1744827489463,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827489463,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-13426","ns":"","mod":"broker"}
{"ts":1744827490845,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827490845,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827490845,"level":"info","msg":"Node ID: daniels-macbook-pro.local-13549","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827490845,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"registry"}
{"ts":1744827490846,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"registry"}
{"ts":1744827490846,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827490851,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827490852,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827490857,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827490857,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827490857,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827490866,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827490918,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490918,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490919,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490919,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490919,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490919,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490936,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490936,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490936,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490936,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490936,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490937,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490937,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490938,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827490938,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491042,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"db","svc":"db"}
{"ts":1744827491042,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"db","svc":"db"}
{"ts":1744827491085,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"db","svc":"db"}
{"ts":1744827491085,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491117,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491117,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491117,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491118,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491118,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491118,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491119,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491119,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491119,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491120,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491120,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491120,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491120,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491120,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491120,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491120,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491120,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491120,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491121,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827491122,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827491128,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827491128,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491128,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"db","svc":"db"}
{"ts":1744827491128,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827491128,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827491128,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491128,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"db","svc":"db"}
{"ts":1744827491128,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827491133,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"registry"}
{"ts":1744827491133,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491135,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827491135,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827491136,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491136,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491136,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"registry"}
{"ts":1744827491136,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491140,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"registry"}
{"ts":1744827491140,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491140,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491140,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491140,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"db","svc":"db"}
{"ts":1744827491140,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"db","svc":"db"}
{"ts":1744827491193,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491195,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_Users_role' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491199,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491203,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827491203,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827491203,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491203,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491203,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491205,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491205,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491205,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491205,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491205,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491205,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491206,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491206,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491206,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491206,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491206,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491206,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491206,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491206,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491206,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491207,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491208,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491208,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491208,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491208,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"registry"}
{"ts":1744827491208,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491208,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827491208,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491208,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 86ms.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491284,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827491284,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827491284,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827491284,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491284,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 427ms.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491284,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491286,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491298,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"username\");ALTER TABLE \"Users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491320,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"email\");ALTER TABLE \"Users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491335,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491337,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"active\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET DEFAULT true;ALTER TABLE \"Users\" ALTER COLUMN \"active\" TYPE BOOLEAN; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491340,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"role\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"role\" SET DEFAULT 'user';DO 'BEGIN CREATE TYPE \"public\".\"enum_Users_role\" AS ENUM(''user'', ''admin''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"Users\" ALTER COLUMN \"role\" TYPE \"public\".\"enum_Users_role\" USING (\"role\"::\"public\".\"enum_Users_role\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491344,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491344,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491346,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491351,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"db","svc":"db"}
{"ts":1744827491709,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491710,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491710,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491710,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491711,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491711,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491711,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491711,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491711,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491711,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491711,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491711,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827491711,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827491711,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827494370,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827494378,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827494378,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827494378,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827494378,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: 'beb39466-6a60-4b29-a288-0c3ec2e5caf6' }","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827494382,"level":"debug","msg":"The 'users.register' request is rejected. { requestID: 'beb39466-6a60-4b29-a288-0c3ec2e5caf6' } Error: Invalid value { username: 'johndoe' }\n    at Object.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sql-string.js:54:11)\n    at PostgresQueryGenerator.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:766:22)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:71\n    at Array.map (<anonymous>)\n    at PostgresQueryGenerator._whereParseSingleValueObject (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:52)\n    at PostgresQueryGenerator.whereItemQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1812:19)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1737:25\n    at Array.forEach (<anonymous>)\n    at PostgresQueryGenerator.whereItemsQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1735:35)\n    at PostgresQueryGenerator.getWhereConditions (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:2078:19)","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827494382,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'beb39466-6a60-4b29-a288-0c3ec2e5caf6' } Error: Invalid value { username: 'johndoe' }\n    at Object.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sql-string.js:54:11)\n    at PostgresQueryGenerator.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:766:22)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:71\n    at Array.map (<anonymous>)\n    at PostgresQueryGenerator._whereParseSingleValueObject (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:52)\n    at PostgresQueryGenerator.whereItemQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1812:19)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1737:25\n    at Array.forEach (<anonymous>)\n    at PostgresQueryGenerator.whereItemsQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1735:35)\n    at PostgresQueryGenerator.getWhereConditions (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:2078:19)","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827494383,"level":"error","msg":"   Request error! Error : Invalid value { username: 'johndoe' } \n Error: Invalid value { username: 'johndoe' }\n    at Object.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sql-string.js:54:11)\n    at PostgresQueryGenerator.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:766:22)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:71\n    at Array.map (<anonymous>)\n    at PostgresQueryGenerator._whereParseSingleValueObject (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:52)\n    at PostgresQueryGenerator.whereItemQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1812:19)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1737:25\n    at Array.forEach (<anonymous>)\n    at PostgresQueryGenerator.whereItemsQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1735:35)\n    at PostgresQueryGenerator.getWhereConditions (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:2078:19) \nData: ","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827545414,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827545414,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827545415,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"db","svc":"db"}
{"ts":1744827545415,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827545417,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827545417,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"db","svc":"db"}
{"ts":1744827545417,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"users","svc":"users"}
{"ts":1744827545418,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827545418,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"api","svc":"api"}
{"ts":1744827545418,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827545418,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-13549","ns":"","mod":"broker"}
{"ts":1744827547539,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547539,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547539,"level":"info","msg":"Node ID: daniels-macbook-pro.local-13679","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547540,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"registry"}
{"ts":1744827547540,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"registry"}
{"ts":1744827547541,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547546,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547546,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547551,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827547551,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827547551,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547560,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547620,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547620,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547620,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547620,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547621,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547621,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547638,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547638,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547638,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547638,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547638,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547638,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547638,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547639,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547639,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547761,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"db","svc":"db"}
{"ts":1744827547761,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"db","svc":"db"}
{"ts":1744827547815,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"db","svc":"db"}
{"ts":1744827547815,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547852,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547852,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547852,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547853,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547853,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547853,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547854,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547854,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547854,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547855,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547855,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547855,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547855,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547855,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547855,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547855,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547855,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547855,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547856,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547857,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827547857,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827547863,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827547863,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547863,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"db","svc":"db"}
{"ts":1744827547863,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827547863,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827547863,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547863,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"db","svc":"db"}
{"ts":1744827547863,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827547868,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"registry"}
{"ts":1744827547868,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547870,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827547870,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827547871,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547871,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547872,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"registry"}
{"ts":1744827547872,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547876,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"registry"}
{"ts":1744827547876,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547876,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547876,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827547876,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"db","svc":"db"}
{"ts":1744827547876,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"db","svc":"db"}
{"ts":1744827547938,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547940,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_Users_role' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547943,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547945,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827547945,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827547945,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547945,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547945,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547947,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547947,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547947,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547947,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547947,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547947,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547948,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547949,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547949,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547949,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547949,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547949,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547949,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547949,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547949,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547949,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547949,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547949,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"registry"}
{"ts":1744827547950,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547950,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827547950,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827547951,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 93ms.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548020,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827548021,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827548021,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827548021,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548021,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 470ms.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548021,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548022,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548027,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"username\");ALTER TABLE \"Users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548049,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"email\");ALTER TABLE \"Users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548066,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548067,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"active\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET DEFAULT true;ALTER TABLE \"Users\" ALTER COLUMN \"active\" TYPE BOOLEAN; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548110,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"role\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"role\" SET DEFAULT 'user';DO 'BEGIN CREATE TYPE \"public\".\"enum_Users_role\" AS ENUM(''user'', ''admin''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"Users\" ALTER COLUMN \"role\" TYPE \"public\".\"enum_Users_role\" USING (\"role\"::\"public\".\"enum_Users_role\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548130,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548131,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548132,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548138,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"db","svc":"db"}
{"ts":1744827548451,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548452,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548452,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548452,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548452,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548452,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548452,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548452,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548452,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548452,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548452,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548452,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827548453,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827548453,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827550657,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827550664,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827550665,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827550665,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827550665,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: '3265274b-0ef9-4cc4-be45-9f50db23b179' }","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827550667,"level":"debug","msg":"The 'users.register' request is rejected. { requestID: '3265274b-0ef9-4cc4-be45-9f50db23b179' } Error: Invalid value { username: 'johndoe' }\n    at Object.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sql-string.js:54:11)\n    at PostgresQueryGenerator.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:766:22)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:71\n    at Array.map (<anonymous>)\n    at PostgresQueryGenerator._whereParseSingleValueObject (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:52)\n    at PostgresQueryGenerator.whereItemQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1812:19)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1737:25\n    at Array.forEach (<anonymous>)\n    at PostgresQueryGenerator.whereItemsQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1735:35)\n    at PostgresQueryGenerator.getWhereConditions (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:2078:19)","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827550667,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '3265274b-0ef9-4cc4-be45-9f50db23b179' } Error: Invalid value { username: 'johndoe' }\n    at Object.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sql-string.js:54:11)\n    at PostgresQueryGenerator.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:766:22)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:71\n    at Array.map (<anonymous>)\n    at PostgresQueryGenerator._whereParseSingleValueObject (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:52)\n    at PostgresQueryGenerator.whereItemQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1812:19)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1737:25\n    at Array.forEach (<anonymous>)\n    at PostgresQueryGenerator.whereItemsQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1735:35)\n    at PostgresQueryGenerator.getWhereConditions (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:2078:19)","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827550668,"level":"error","msg":"   Request error! Error : Invalid value { username: 'johndoe' } \n Error: Invalid value { username: 'johndoe' }\n    at Object.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sql-string.js:54:11)\n    at PostgresQueryGenerator.escape (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:766:22)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:71\n    at Array.map (<anonymous>)\n    at PostgresQueryGenerator._whereParseSingleValueObject (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1996:52)\n    at PostgresQueryGenerator.whereItemQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1812:19)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1737:25\n    at Array.forEach (<anonymous>)\n    at PostgresQueryGenerator.whereItemsQuery (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1735:35)\n    at PostgresQueryGenerator.getWhereConditions (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-generator.js:2078:19) \nData: ","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827740215,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827740215,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827740215,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"db","svc":"db"}
{"ts":1744827740215,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827740216,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827740216,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"db","svc":"db"}
{"ts":1744827740216,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"users","svc":"users"}
{"ts":1744827740216,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827740216,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"api","svc":"api"}
{"ts":1744827740217,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827740217,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-13679","ns":"","mod":"broker"}
{"ts":1744827741171,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741171,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741171,"level":"info","msg":"Node ID: daniels-macbook-pro.local-13895","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741171,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"registry"}
{"ts":1744827741171,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"registry"}
{"ts":1744827741172,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741178,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741178,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741183,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827741183,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827741183,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741192,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741253,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741254,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741254,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741254,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741254,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741255,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741273,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741273,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741273,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741273,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741273,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741274,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741274,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741274,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741274,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741385,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"db","svc":"db"}
{"ts":1744827741385,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"db","svc":"db"}
{"ts":1744827741427,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"db","svc":"db"}
{"ts":1744827741427,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741459,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741459,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741459,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741460,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741460,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741460,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741461,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741461,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741461,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741462,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741462,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741462,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741462,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741462,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741462,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741462,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741462,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741462,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741463,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741464,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741464,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741464,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741464,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744827741464,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744827741470,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827741470,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741470,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"db","svc":"db"}
{"ts":1744827741470,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744827741470,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827741470,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741470,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"db","svc":"db"}
{"ts":1744827741470,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744827741475,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"registry"}
{"ts":1744827741475,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741477,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827741477,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"$node","svc":"$node"}
{"ts":1744827741478,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741478,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741479,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"registry"}
{"ts":1744827741479,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741482,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"registry"}
{"ts":1744827741482,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741482,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741482,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827741482,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"db","svc":"db"}
{"ts":1744827741483,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"db","svc":"db"}
{"ts":1744827741526,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741529,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_Users_role' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741531,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741533,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744827741533,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744827741533,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741533,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741533,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741534,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741534,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741534,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741534,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741534,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741534,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741535,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741535,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741535,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741535,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741535,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741535,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741535,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741535,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741535,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741536,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741537,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"registry"}
{"ts":1744827741537,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741537,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744827741537,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741537,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 73ms.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741613,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744827741613,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744827741613,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744827741613,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741614,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 431ms.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741614,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741616,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741623,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"username\");ALTER TABLE \"Users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741642,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"email\");ALTER TABLE \"Users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741656,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741658,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"active\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET DEFAULT true;ALTER TABLE \"Users\" ALTER COLUMN \"active\" TYPE BOOLEAN; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741662,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"role\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"role\" SET DEFAULT 'user';DO 'BEGIN CREATE TYPE \"public\".\"enum_Users_role\" AS ENUM(''user'', ''admin''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"Users\" ALTER COLUMN \"role\" TYPE \"public\".\"enum_Users_role\" USING (\"role\"::\"public\".\"enum_Users_role\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741665,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741667,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741668,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827741672,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"db","svc":"db"}
{"ts":1744827742038,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742039,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742039,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742039,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742039,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742039,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742039,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742039,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742039,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742039,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742039,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742040,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827742040,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827742040,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827744392,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827744399,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827744399,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827744399,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827744399,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: 'c5beaa66-f640-467c-8719-f3fe7025af3a' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827744418,"level":"info","msg":"<= 200 POST /api/users/register [+26.197 ms]","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827749636,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827749636,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827749636,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827749636,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827749636,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: 'f0977a57-dc27-442e-ae75-8ecea4e6b0a1' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827749641,"level":"debug","msg":"The 'users.register' request is rejected. { requestID: 'f0977a57-dc27-442e-ae75-8ecea4e6b0a1' } MoleculerClientError: Username or email already exists\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:133:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'ALREADY_EXISTS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827749642,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'f0977a57-dc27-442e-ae75-8ecea4e6b0a1' } MoleculerClientError: Username or email already exists\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:133:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'ALREADY_EXISTS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827794491,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827794493,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827794494,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827794494,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744827794494,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: 'fff41d8f-67e8-453a-8dad-9d52e7eaff1b' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827794534,"level":"debug","msg":"The 'users.register' request is rejected. { requestID: 'fff41d8f-67e8-453a-8dad-9d52e7eaff1b' } MoleculerClientError: Username or email already exists\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:133:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'ALREADY_EXISTS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744827794535,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'fff41d8f-67e8-453a-8dad-9d52e7eaff1b' } MoleculerClientError: Username or email already exists\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:133:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'ALREADY_EXISTS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828006307,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828006309,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828006309,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828006309,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828006309,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: '0e19aad7-bde5-4760-aaab-656234336498' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828006348,"level":"debug","msg":"The 'users.register' request is rejected. { requestID: '0e19aad7-bde5-4760-aaab-656234336498' } MoleculerClientError: Username or email already exists\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:133:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'ALREADY_EXISTS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828006349,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '0e19aad7-bde5-4760-aaab-656234336498' } MoleculerClientError: Username or email already exists\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:133:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'ALREADY_EXISTS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828062118,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828062119,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828062119,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828062119,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828062119,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: '175d5585-7675-40d3-8763-40d26b946f37' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828062178,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: '175d5585-7675-40d3-8763-40d26b946f37' } Error: data and hash arguments required\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:208:17)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:29:12\n    at new Promise (<anonymous>)\n    at module.exports.promise (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:20:12)\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:204:25)\n    at Service.comparePassword (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/mixins/encryption.mixin.js:25:21)\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:172:44)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828062179,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '175d5585-7675-40d3-8763-40d26b946f37' } Error: data and hash arguments required\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:208:17)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:29:12\n    at new Promise (<anonymous>)\n    at module.exports.promise (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:20:12)\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:204:25)\n    at Service.comparePassword (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/mixins/encryption.mixin.js:25:21)\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:172:44)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828062179,"level":"error","msg":"   Request error! Error : data and hash arguments required \n Error: data and hash arguments required\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:208:17)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:29:12\n    at new Promise (<anonymous>)\n    at module.exports.promise (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:20:12)\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:204:25)\n    at Service.comparePassword (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/mixins/encryption.mixin.js:25:21)\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:172:44)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 \nData: ","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828206939,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828206940,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828206940,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828206940,"level":"debug","msg":"   Params: { email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828206940,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: '1794fd5d-5b33-4a61-b0b0-280479cdc6d8' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828206969,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: '1794fd5d-5b33-4a61-b0b0-280479cdc6d8' } Error: data and hash arguments required\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:208:17)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:29:12\n    at new Promise (<anonymous>)\n    at module.exports.promise (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:20:12)\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:204:25)\n    at Service.comparePassword (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/mixins/encryption.mixin.js:25:21)\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:172:44)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828206970,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '1794fd5d-5b33-4a61-b0b0-280479cdc6d8' } Error: data and hash arguments required\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:208:17)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:29:12\n    at new Promise (<anonymous>)\n    at module.exports.promise (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:20:12)\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:204:25)\n    at Service.comparePassword (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/mixins/encryption.mixin.js:25:21)\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:172:44)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828206970,"level":"error","msg":"   Request error! Error : data and hash arguments required \n Error: data and hash arguments required\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:208:17)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:29:12\n    at new Promise (<anonymous>)\n    at module.exports.promise (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:20:12)\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:204:25)\n    at Service.comparePassword (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/mixins/encryption.mixin.js:25:21)\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:172:44)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 \nData: ","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828263949,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828263950,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828263950,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828263950,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828263950,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: '519d5fd9-f014-46b2-aa0b-36decc6aa50a' }","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828263976,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: '519d5fd9-f014-46b2-aa0b-36decc6aa50a' } Error: data and hash arguments required\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:208:17)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:29:12\n    at new Promise (<anonymous>)\n    at module.exports.promise (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:20:12)\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:204:25)\n    at Service.comparePassword (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/mixins/encryption.mixin.js:25:21)\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:172:44)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828263976,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '519d5fd9-f014-46b2-aa0b-36decc6aa50a' } Error: data and hash arguments required\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:208:17)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:29:12\n    at new Promise (<anonymous>)\n    at module.exports.promise (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:20:12)\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:204:25)\n    at Service.comparePassword (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/mixins/encryption.mixin.js:25:21)\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:172:44)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828263977,"level":"error","msg":"   Request error! Error : data and hash arguments required \n Error: data and hash arguments required\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:208:17)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:29:12\n    at new Promise (<anonymous>)\n    at module.exports.promise (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/promises.js:20:12)\n    at Object.compare (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/bcrypt/bcrypt.js:204:25)\n    at Service.comparePassword (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/mixins/encryption.mixin.js:25:21)\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:172:44)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 \nData: ","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828420901,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"$node","svc":"$node"}
{"ts":1744828420901,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828420901,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"db","svc":"db"}
{"ts":1744828420901,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744828420904,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"$node","svc":"$node"}
{"ts":1744828420904,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"db","svc":"db"}
{"ts":1744828420904,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"users","svc":"users"}
{"ts":1744828420904,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828420904,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"api","svc":"api"}
{"ts":1744828420904,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744828420905,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-13895","ns":"","mod":"broker"}
{"ts":1744829105207,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105207,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105207,"level":"info","msg":"Node ID: daniels-macbook-pro.local-15067","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105207,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"registry"}
{"ts":1744829105207,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"registry"}
{"ts":1744829105208,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105213,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105214,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105218,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829105218,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829105218,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105227,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105286,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105287,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105287,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105287,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105287,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105287,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105304,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105304,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105304,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105304,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105304,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105305,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105305,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105305,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105305,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105420,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"db","svc":"db"}
{"ts":1744829105420,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"db","svc":"db"}
{"ts":1744829105464,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"db","svc":"db"}
{"ts":1744829105464,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105500,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105500,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105500,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105501,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105501,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105501,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105501,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105501,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105501,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105502,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105502,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105502,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105502,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105502,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105502,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105503,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105504,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105504,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105504,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105504,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105504,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105504,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105504,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829105504,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829105510,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829105510,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105510,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"db","svc":"db"}
{"ts":1744829105510,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829105510,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829105510,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105510,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"db","svc":"db"}
{"ts":1744829105510,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829105515,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"registry"}
{"ts":1744829105515,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105517,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829105517,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829105518,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105518,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105519,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"registry"}
{"ts":1744829105519,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105522,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"registry"}
{"ts":1744829105522,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105522,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105522,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829105522,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"db","svc":"db"}
{"ts":1744829105522,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"db","svc":"db"}
{"ts":1744829105567,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105570,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_Users_role' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105572,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105579,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829105579,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829105580,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105580,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105580,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105581,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105581,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105581,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105581,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105581,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105581,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105583,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105583,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105583,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105583,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105583,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105583,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105583,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105583,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105583,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105584,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105585,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105585,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105585,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105585,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"registry"}
{"ts":1744829105585,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105585,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829105585,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105585,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 81ms.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105660,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105664,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829105664,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829105664,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829105664,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105664,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 446ms.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105664,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105667,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"username\");ALTER TABLE \"Users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105675,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"email\");ALTER TABLE \"Users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105679,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105680,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"active\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET DEFAULT true;ALTER TABLE \"Users\" ALTER COLUMN \"active\" TYPE BOOLEAN; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105682,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"role\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"role\" SET DEFAULT 'user';DO 'BEGIN CREATE TYPE \"public\".\"enum_Users_role\" AS ENUM(''user'', ''admin''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"Users\" ALTER COLUMN \"role\" TYPE \"public\".\"enum_Users_role\" USING (\"role\"::\"public\".\"enum_Users_role\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105689,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105690,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105691,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829105692,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"db","svc":"db"}
{"ts":1744829106086,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106087,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106087,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106087,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106087,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106087,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106088,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106088,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106088,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106088,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106088,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106088,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829106088,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829106088,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829109392,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829109402,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829109402,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829109402,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829109402,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: '09dcefe9-6f56-46cf-aa9c-5233bbb45ca1' }","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829109410,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: '09dcefe9-6f56-46cf-aa9c-5233bbb45ca1' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:159:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829109410,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '09dcefe9-6f56-46cf-aa9c-5233bbb45ca1' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:159:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829292295,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829292295,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829292296,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"db","svc":"db"}
{"ts":1744829292296,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829292299,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829292299,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"db","svc":"db"}
{"ts":1744829292299,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"users","svc":"users"}
{"ts":1744829292299,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829292299,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"api","svc":"api"}
{"ts":1744829292300,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829292300,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-15067","ns":"","mod":"broker"}
{"ts":1744829293286,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293286,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293286,"level":"info","msg":"Node ID: daniels-macbook-pro.local-15268","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293287,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"registry"}
{"ts":1744829293287,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"registry"}
{"ts":1744829293288,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293292,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293293,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293298,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829293298,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829293298,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293307,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293369,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293369,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293370,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293370,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293370,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293370,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293387,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293387,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293387,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293387,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293387,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293387,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293388,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293388,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293388,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293506,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"db","svc":"db"}
{"ts":1744829293507,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"db","svc":"db"}
{"ts":1744829293552,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"db","svc":"db"}
{"ts":1744829293552,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293586,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293586,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293586,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293587,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293587,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293587,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293588,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293588,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293588,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293588,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293589,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293590,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293590,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293590,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293590,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293590,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293590,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293590,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293590,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293590,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293590,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829293590,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829293597,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829293597,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293597,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"db","svc":"db"}
{"ts":1744829293597,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829293597,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829293597,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293597,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"db","svc":"db"}
{"ts":1744829293597,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829293601,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"registry"}
{"ts":1744829293601,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293603,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829293603,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829293604,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293604,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293605,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"registry"}
{"ts":1744829293605,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293608,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"registry"}
{"ts":1744829293608,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293608,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293608,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829293608,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"db","svc":"db"}
{"ts":1744829293608,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"db","svc":"db"}
{"ts":1744829293676,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293682,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_Users_role' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293685,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293688,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829293688,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829293688,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293688,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293688,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293689,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293689,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293689,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293690,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293690,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293690,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293690,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293691,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"registry"}
{"ts":1744829293692,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829293692,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 394ms.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293692,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293694,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829293694,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829293694,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829293694,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293694,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 104ms.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293771,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293774,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"username\");ALTER TABLE \"Users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293785,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"email\");ALTER TABLE \"Users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293797,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293800,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"active\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET DEFAULT true;ALTER TABLE \"Users\" ALTER COLUMN \"active\" TYPE BOOLEAN; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293802,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"role\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"role\" SET DEFAULT 'user';DO 'BEGIN CREATE TYPE \"public\".\"enum_Users_role\" AS ENUM(''user'', ''admin''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"Users\" ALTER COLUMN \"role\" TYPE \"public\".\"enum_Users_role\" USING (\"role\"::\"public\".\"enum_Users_role\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293808,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293809,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293811,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829293812,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"db","svc":"db"}
{"ts":1744829294193,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294194,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294194,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294194,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294195,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294195,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294195,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294195,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294195,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294195,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294195,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294195,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829294195,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829294195,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829297447,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829297455,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829297455,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829297455,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829297455,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: '8ba3bcda-4983-4982-b750-2823b19d2278' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829297463,"level":"info","msg":"USER : [object SequelizeInstance:user]","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829297464,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: '8ba3bcda-4983-4982-b750-2823b19d2278' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829297464,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '8ba3bcda-4983-4982-b750-2823b19d2278' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829304349,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829304350,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829304350,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829304350,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829304350,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: '0a78472d-f0fc-4b6d-a9cf-42948e0361be' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829304356,"level":"info","msg":"USER : [object SequelizeInstance:user]","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829304356,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: '0a78472d-f0fc-4b6d-a9cf-42948e0361be' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829304356,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '0a78472d-f0fc-4b6d-a9cf-42948e0361be' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829304948,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829304948,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829304948,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829304948,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829304948,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: 'd08f5d6c-1283-46f6-b2bc-22a3c0284435' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829304950,"level":"info","msg":"USER : [object SequelizeInstance:user]","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829304951,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: 'd08f5d6c-1283-46f6-b2bc-22a3c0284435' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829304951,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'd08f5d6c-1283-46f6-b2bc-22a3c0284435' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829307988,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829307989,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829307989,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829307989,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829307990,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: 'a42140c9-8b1f-45ad-813c-31649d354407' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829307995,"level":"info","msg":"USER : [object SequelizeInstance:user]","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829307995,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: 'a42140c9-8b1f-45ad-813c-31649d354407' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829307995,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'a42140c9-8b1f-45ad-813c-31649d354407' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829317680,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829317681,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829317681,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829317681,"level":"debug","msg":"   Params: { email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829317681,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: 'f5cf1ee5-43e9-49c0-9422-7b4f5baf9d22' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829317688,"level":"info","msg":"USER : [object SequelizeInstance:user]","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829317688,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: 'f5cf1ee5-43e9-49c0-9422-7b4f5baf9d22' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829317688,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'f5cf1ee5-43e9-49c0-9422-7b4f5baf9d22' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829318507,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829318507,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829318507,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829318507,"level":"debug","msg":"   Params: { email: 'john@example.com', password: 'securepassword' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829318508,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: 'bbc14bae-9b65-4c08-afcb-89310a2771bc' }","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829318510,"level":"info","msg":"USER : [object SequelizeInstance:user]","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829318510,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: 'bbc14bae-9b65-4c08-afcb-89310a2771bc' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829318510,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'bbc14bae-9b65-4c08-afcb-89310a2771bc' } MoleculerClientError: 2 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:160:27)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829448865,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829448865,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829448865,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"db","svc":"db"}
{"ts":1744829448865,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829448867,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829448868,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"db","svc":"db"}
{"ts":1744829448868,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"users","svc":"users"}
{"ts":1744829448868,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829448868,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"api","svc":"api"}
{"ts":1744829448869,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829448869,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-15268","ns":"","mod":"broker"}
{"ts":1744829450020,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450020,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450020,"level":"info","msg":"Node ID: daniels-macbook-pro.local-16935","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450021,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"registry"}
{"ts":1744829450021,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"registry"}
{"ts":1744829450022,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450027,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450028,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450033,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829450033,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829450033,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450043,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450107,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450107,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450107,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450107,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450107,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450108,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450129,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450130,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450130,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450130,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450130,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450130,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450130,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450131,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450131,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450248,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"db","svc":"db"}
{"ts":1744829450248,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"db","svc":"db"}
{"ts":1744829450294,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"db","svc":"db"}
{"ts":1744829450294,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450328,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450328,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450328,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450329,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450329,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450329,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450330,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450330,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450330,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450331,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450331,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450331,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450331,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450331,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450331,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450331,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450331,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450331,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450332,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450333,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829450333,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829450340,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829450340,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450340,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"db","svc":"db"}
{"ts":1744829450340,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829450340,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829450340,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450340,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"db","svc":"db"}
{"ts":1744829450340,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829450344,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"registry"}
{"ts":1744829450344,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450346,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829450346,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829450347,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450347,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450348,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"registry"}
{"ts":1744829450348,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450351,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"registry"}
{"ts":1744829450351,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450351,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450351,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450351,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"db","svc":"db"}
{"ts":1744829450351,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"db","svc":"db"}
{"ts":1744829450411,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450414,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_Users_role' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450418,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450434,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450436,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829450436,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829450436,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450436,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450436,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450438,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450438,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450438,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450439,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450439,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450439,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450440,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450440,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450440,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450440,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450440,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450440,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450441,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450441,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450441,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450442,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450443,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450443,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450443,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450444,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"registry"}
{"ts":1744829450444,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450445,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829450445,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450446,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 113ms.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450521,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"username\");ALTER TABLE \"Users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450526,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"Users\"  ADD UNIQUE (\"email\");ALTER TABLE \"Users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450530,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450532,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"active\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET DEFAULT true;ALTER TABLE \"Users\" ALTER COLUMN \"active\" TYPE BOOLEAN; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450534,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"role\" DROP NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"role\" SET DEFAULT 'user';DO 'BEGIN CREATE TYPE \"public\".\"enum_Users_role\" AS ENUM(''user'', ''admin''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"Users\" ALTER COLUMN \"role\" TYPE \"public\".\"enum_Users_role\" USING (\"role\"::\"public\".\"enum_Users_role\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450539,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450540,"level":"info","msg":"Executing (default): ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"updatedAt\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450542,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450545,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"db","svc":"db"}
{"ts":1744829450547,"level":"error","msg":"Connection error! Error\n    at Query.run (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.createTable (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-interface.js:98:12)\n    at async user.sync (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:942:7)\n    at async Promise.all (index 3) {\n  name: 'SequelizeUniqueConstraintError',\n  errors: [ ValidationErrorItem { message: 'typname must be unique', type: 'unique violation', path: 'typname', value: 'users', origin: 'DB', instance: null, validatorKey: 'not_unique', validatorName: null, validatorArgs: [] }, ValidationErrorItem { message: 'typnamespace must be unique', type: 'unique violation', path: 'typnamespace', value: '2200', origin: 'DB', instance: null, validatorKey: 'not_unique', validatorName: null, validatorArgs: [] } ],\n  parent: error: duplicate key value violates unique constraint \"pg_type_typname_nsp_index\"\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 245,\n    severity: 'ERROR',\n    code: '23505',\n    detail: 'Key (typname, typnamespace)=(users, 2200) already exists.',\n    hint: undefined,\n    position: undefined,\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: 'pg_catalog',\n    table: 'pg_type',\n    column: undefined,\n    dataType: undefined,\n    constraint: 'pg_type_typname_nsp_index',\n    file: 'nbtinsert.c',\n    line: '666',\n    routine: '_bt_check_unique',\n    sql: 'CREATE TABLE IF NOT EXISTS \"public\".\"users\" (\"id\" UUID , \"username\" VARCHAR(255) NOT NULL UNIQUE, \"email\" VARCHAR(255) NOT NULL UNIQUE, \"password\" VARCHAR(255) NOT NULL, \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));',\n    parameters: undefined\n  },\n  original: error: duplicate key value violates unique constraint \"pg_type_typname_nsp_index\"\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 245,\n    severity: 'ERROR',\n    code: '23505',\n    detail: 'Key (typname, typnamespace)=(users, 2200) already exists.',\n    hint: undefined,\n    position: undefined,\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: 'pg_catalog',\n    table: 'pg_type',\n    column: undefined,\n    dataType: undefined,\n    constraint: 'pg_type_typname_nsp_index',\n    file: 'nbtinsert.c',\n    line: '666',\n    routine: '_bt_check_unique',\n    sql: 'CREATE TABLE IF NOT EXISTS \"public\".\"users\" (\"id\" UUID , \"username\" VARCHAR(255) NOT NULL UNIQUE, \"email\" VARCHAR(255) NOT NULL UNIQUE, \"password\" VARCHAR(255) NOT NULL, \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));',\n    parameters: undefined\n  },\n  fields: { typname: 'users', typnamespace: '2200' },\n  sql: 'CREATE TABLE IF NOT EXISTS \"public\".\"users\" (\"id\" UUID , \"username\" VARCHAR(255) NOT NULL UNIQUE, \"email\" VARCHAR(255) NOT NULL UNIQUE, \"password\" VARCHAR(255) NOT NULL, \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));'\n}","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829450945,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450946,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450946,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450946,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450946,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450946,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450946,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450946,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450946,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450946,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450946,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450947,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829450947,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829450947,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829451548,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829451598,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829451599,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829451599,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829451599,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829451599,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 1s.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829451599,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829545034,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829545034,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829545034,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"db","svc":"db"}
{"ts":1744829545034,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829545037,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829545037,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"db","svc":"db"}
{"ts":1744829545037,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"users","svc":"users"}
{"ts":1744829545038,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829545038,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"api","svc":"api"}
{"ts":1744829545038,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829545038,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-16935","ns":"","mod":"broker"}
{"ts":1744829553248,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553248,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553248,"level":"info","msg":"Node ID: daniels-macbook-pro.local-19101","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553249,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"registry"}
{"ts":1744829553249,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"registry"}
{"ts":1744829553249,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553254,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553255,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553259,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829553259,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829553260,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553268,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553320,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553320,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553320,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553321,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553321,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553321,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553337,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553337,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553338,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553338,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553338,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553338,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553338,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553339,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553339,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553438,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"db","svc":"db"}
{"ts":1744829553438,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"db","svc":"db"}
{"ts":1744829553479,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"db","svc":"db"}
{"ts":1744829553479,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553509,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553509,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553509,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553510,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553510,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553510,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553511,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553511,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553511,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553512,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553512,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553512,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553512,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553512,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553512,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553512,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553512,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553512,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553512,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553513,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829553513,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829553520,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829553520,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553520,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"db","svc":"db"}
{"ts":1744829553520,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829553520,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829553520,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553520,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"db","svc":"db"}
{"ts":1744829553520,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829553524,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"registry"}
{"ts":1744829553524,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553526,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829553526,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829553527,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553527,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553528,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"registry"}
{"ts":1744829553528,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553531,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"registry"}
{"ts":1744829553531,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553531,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553531,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829553532,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"db","svc":"db"}
{"ts":1744829553532,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"db","svc":"db"}
{"ts":1744829553600,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553603,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_role' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553607,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553618,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829553618,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829553618,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553618,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553618,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553619,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553619,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553619,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553619,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553619,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553619,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553621,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553621,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553621,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553621,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553621,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553621,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553621,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553621,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553621,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553622,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553623,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"registry"}
{"ts":1744829553623,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553623,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829553624,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553624,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 364ms.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553624,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553626,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829553626,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829553626,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829553626,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553626,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 113ms.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553699,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553703,"level":"info","msg":"Executing (default): ALTER TABLE \"public\".\"users\" ADD COLUMN \"active\" BOOLEAN DEFAULT true; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553706,"level":"info","msg":"Executing (default): DO 'BEGIN CREATE TYPE \"public\".\"enum_users_role\" AS ENUM(''user'', ''admin''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"public\".\"users\" ADD COLUMN \"role\" \"public\".\"enum_users_role\" DEFAULT 'user'; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553707,"level":"info","msg":"Executing (default): ALTER TABLE \"public\".\"users\" ADD COLUMN \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553708,"level":"info","msg":"Executing (default): ALTER TABLE \"public\".\"users\" ADD COLUMN \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553709,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"username\");ALTER TABLE \"users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553714,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"email\");ALTER TABLE \"users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553718,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553719,"level":"info","msg":"Executing (default): ALTER TABLE \"public\".\"users\" DROP COLUMN \"created_at\"; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553720,"level":"info","msg":"Executing (default): ALTER TABLE \"public\".\"users\" DROP COLUMN \"updated_at\"; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553721,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: false, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'users', singular: 'user' }, omitNull: false, sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { users: users }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829553723,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"db","svc":"db"}
{"ts":1744829554124,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554125,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554125,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554125,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554125,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554125,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554126,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554126,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554126,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554126,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554126,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554126,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829554126,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829554126,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829603413,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829603423,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829603424,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829603424,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829603424,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: '908718d1-53c0-4ab2-9143-dc8a845e5e7a' }","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829603472,"level":"debug","msg":"The 'users.register' request is rejected. { requestID: '908718d1-53c0-4ab2-9143-dc8a845e5e7a' } Error\n    at Query.run (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.select (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-interface.js:407:12)\n    at async user.findAll (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1140:21)\n    at async user.findOne (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1240:12)\n    at async Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:113:33)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  name: 'SequelizeDatabaseError',\n  parent: error: column \"created_at\" does not exist\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at Socket.emit (node:domain:488:12)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 171,\n    severity: 'ERROR',\n    code: '42703',\n    detail: undefined,\n    hint: 'Perhaps you meant to reference the column \"user.createdAt\".',\n    position: '47',\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: undefined,\n    table: undefined,\n    column: undefined,\n    dataType: undefined,\n    constraint: undefined,\n    file: 'parse_relation.c',\n    line: '3729',\n    routine: 'errorMissingColumn',\n    sql: `SELECT \"id\", \"username\", \"email\", \"password\", \"created_at\", \"updated_at\" FROM \"public\".\"users\" AS \"user\" WHERE \"user\".\"email\" = 'john@example.com';`,\n    parameters: undefined\n  },\n  original: error: column \"created_at\" does not exist\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at Socket.emit (node:domain:488:12)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 171,\n    severity: 'ERROR',\n    code: '42703',\n    detail: undefined,\n    hint: 'Perhaps you meant to reference the column \"user.createdAt\".',\n    position: '47',\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: undefined,\n    table: undefined,\n    column: undefined,\n    dataType: undefined,\n    constraint: undefined,\n    file: 'parse_relation.c',\n    line: '3729',\n    routine: 'errorMissingColumn',\n    sql: `SELECT \"id\", \"username\", \"email\", \"password\", \"created_at\", \"updated_at\" FROM \"public\".\"users\" AS \"user\" WHERE \"user\".\"email\" = 'john@example.com';`,\n    parameters: undefined\n  },\n  sql: `SELECT \"id\", \"username\", \"email\", \"password\", \"created_at\", \"updated_at\" FROM \"public\".\"users\" AS \"user\" WHERE \"user\".\"email\" = 'john@example.com';`,\n  parameters: {}\n}","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829603472,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '908718d1-53c0-4ab2-9143-dc8a845e5e7a' } Error\n    at Query.run (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.select (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-interface.js:407:12)\n    at async user.findAll (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1140:21)\n    at async user.findOne (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1240:12)\n    at async Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:113:33)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  name: 'SequelizeDatabaseError',\n  parent: error: column \"created_at\" does not exist\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at Socket.emit (node:domain:488:12)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 171,\n    severity: 'ERROR',\n    code: '42703',\n    detail: undefined,\n    hint: 'Perhaps you meant to reference the column \"user.createdAt\".',\n    position: '47',\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: undefined,\n    table: undefined,\n    column: undefined,\n    dataType: undefined,\n    constraint: undefined,\n    file: 'parse_relation.c',\n    line: '3729',\n    routine: 'errorMissingColumn',\n    sql: `SELECT \"id\", \"username\", \"email\", \"password\", \"created_at\", \"updated_at\" FROM \"public\".\"users\" AS \"user\" WHERE \"user\".\"email\" = 'john@example.com';`,\n    parameters: undefined\n  },\n  original: error: column \"created_at\" does not exist\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at Socket.emit (node:domain:488:12)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 171,\n    severity: 'ERROR',\n    code: '42703',\n    detail: undefined,\n    hint: 'Perhaps you meant to reference the column \"user.createdAt\".',\n    position: '47',\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: undefined,\n    table: undefined,\n    column: undefined,\n    dataType: undefined,\n    constraint: undefined,\n    file: 'parse_relation.c',\n    line: '3729',\n    routine: 'errorMissingColumn',\n    sql: `SELECT \"id\", \"username\", \"email\", \"password\", \"created_at\", \"updated_at\" FROM \"public\".\"users\" AS \"user\" WHERE \"user\".\"email\" = 'john@example.com';`,\n    parameters: undefined\n  },\n  sql: `SELECT \"id\", \"username\", \"email\", \"password\", \"created_at\", \"updated_at\" FROM \"public\".\"users\" AS \"user\" WHERE \"user\".\"email\" = 'john@example.com';`,\n  parameters: {}\n}","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829603472,"level":"error","msg":"   Request error! SequelizeDatabaseError : column \"created_at\" does not exist \n Error\n    at Query.run (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.select (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-interface.js:407:12)\n    at async user.findAll (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1140:21)\n    at async user.findOne (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1240:12)\n    at async Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:113:33)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 \nData: ","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829627500,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829627500,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829627501,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"db","svc":"db"}
{"ts":1744829627501,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829627502,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829627502,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"db","svc":"db"}
{"ts":1744829627503,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"users","svc":"users"}
{"ts":1744829627503,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829627503,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"api","svc":"api"}
{"ts":1744829627503,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829627504,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-19101","ns":"","mod":"broker"}
{"ts":1744829637200,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637200,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637200,"level":"info","msg":"Node ID: daniels-macbook-pro.local-19263","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637201,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"registry"}
{"ts":1744829637201,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"registry"}
{"ts":1744829637201,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637206,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637207,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637212,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829637212,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829637212,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637221,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637282,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637282,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637282,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637282,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637282,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637282,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637299,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637299,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637299,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637299,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637300,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637300,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637300,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637301,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637301,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637412,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"db","svc":"db"}
{"ts":1744829637413,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"db","svc":"db"}
{"ts":1744829637450,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"db","svc":"db"}
{"ts":1744829637450,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637483,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637483,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637484,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637485,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637485,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637485,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637485,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637485,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637485,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637486,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637486,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637486,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637486,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637486,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637486,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637486,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637486,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637486,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637487,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637488,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637488,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637488,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637488,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829637488,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829637493,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829637493,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637493,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"db","svc":"db"}
{"ts":1744829637493,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829637493,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829637493,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637493,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"db","svc":"db"}
{"ts":1744829637493,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829637498,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"registry"}
{"ts":1744829637498,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637500,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829637500,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829637501,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637501,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637502,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"registry"}
{"ts":1744829637502,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637505,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"registry"}
{"ts":1744829637505,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637505,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637505,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829637505,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"db","svc":"db"}
{"ts":1744829637505,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"db","svc":"db"}
{"ts":1744829637570,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT', dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true }","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637570,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"db","svc":"db"}
{"ts":1744829637600,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829637600,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829637600,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637600,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637600,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637601,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637601,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637601,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637601,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637601,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637601,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637603,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637603,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637603,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637603,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637603,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637603,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637603,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637603,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637603,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637604,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"registry"}
{"ts":1744829637604,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637605,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829637605,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637605,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 393ms.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637605,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829637710,"level":"error","msg":"Connection error! Error\n    at Query.run (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.createTable (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-interface.js:98:12)\n    at async user.sync (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:942:7)\n    at async Promise.all (index 3) {\n  name: 'SequelizeUniqueConstraintError',\n  errors: [ ValidationErrorItem { message: 'typname must be unique', type: 'unique violation', path: 'typname', value: 'users', origin: 'DB', instance: null, validatorKey: 'not_unique', validatorName: null, validatorArgs: [] }, ValidationErrorItem { message: 'typnamespace must be unique', type: 'unique violation', path: 'typnamespace', value: '2200', origin: 'DB', instance: null, validatorKey: 'not_unique', validatorName: null, validatorArgs: [] } ],\n  parent: error: duplicate key value violates unique constraint \"pg_type_typname_nsp_index\"\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 245,\n    severity: 'ERROR',\n    code: '23505',\n    detail: 'Key (typname, typnamespace)=(users, 2200) already exists.',\n    hint: undefined,\n    position: undefined,\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: 'pg_catalog',\n    table: 'pg_type',\n    column: undefined,\n    dataType: undefined,\n    constraint: 'pg_type_typname_nsp_index',\n    file: 'nbtinsert.c',\n    line: '666',\n    routine: '_bt_check_unique',\n    sql: 'CREATE TABLE IF NOT EXISTS \"public\".\"users\" (\"id\" UUID , \"username\" VARCHAR(255) NOT NULL UNIQUE, \"email\" VARCHAR(255) NOT NULL UNIQUE, \"password\" VARCHAR(255) NOT NULL, \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));',\n    parameters: undefined\n  },\n  original: error: duplicate key value violates unique constraint \"pg_type_typname_nsp_index\"\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 245,\n    severity: 'ERROR',\n    code: '23505',\n    detail: 'Key (typname, typnamespace)=(users, 2200) already exists.',\n    hint: undefined,\n    position: undefined,\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: 'pg_catalog',\n    table: 'pg_type',\n    column: undefined,\n    dataType: undefined,\n    constraint: 'pg_type_typname_nsp_index',\n    file: 'nbtinsert.c',\n    line: '666',\n    routine: '_bt_check_unique',\n    sql: 'CREATE TABLE IF NOT EXISTS \"public\".\"users\" (\"id\" UUID , \"username\" VARCHAR(255) NOT NULL UNIQUE, \"email\" VARCHAR(255) NOT NULL UNIQUE, \"password\" VARCHAR(255) NOT NULL, \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));',\n    parameters: undefined\n  },\n  fields: { typname: 'users', typnamespace: '2200' },\n  sql: 'CREATE TABLE IF NOT EXISTS \"public\".\"users\" (\"id\" UUID , \"username\" VARCHAR(255) NOT NULL UNIQUE, \"email\" VARCHAR(255) NOT NULL UNIQUE, \"password\" VARCHAR(255) NOT NULL, \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));'\n}","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829638107,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638108,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638108,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638108,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638108,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638108,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638108,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638108,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638108,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638108,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638108,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638108,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829638109,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829638109,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829638711,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829638744,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829638744,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829638744,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829638744,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829638744,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 1s.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829641318,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829641326,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829641326,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829641326,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829641326,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: 'fa96a58c-d0c3-465c-8e9d-565744ad7ba9' }","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829641332,"level":"debug","msg":"The 'users.register' request is rejected. { requestID: 'fa96a58c-d0c3-465c-8e9d-565744ad7ba9' } TypeError: this.encryptPassword is not a function\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:124:51)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829641332,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'fa96a58c-d0c3-465c-8e9d-565744ad7ba9' } TypeError: this.encryptPassword is not a function\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:124:51)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829641332,"level":"error","msg":"   Request error! TypeError : this.encryptPassword is not a function \n TypeError: this.encryptPassword is not a function\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:124:51)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 \nData: ","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829642110,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829642111,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829642111,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829642111,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829642111,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: 'd404d08c-44f7-4a72-b89e-f5c2d95bda46' }","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829642114,"level":"debug","msg":"The 'users.register' request is rejected. { requestID: 'd404d08c-44f7-4a72-b89e-f5c2d95bda46' } TypeError: this.encryptPassword is not a function\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:124:51)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829642114,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'd404d08c-44f7-4a72-b89e-f5c2d95bda46' } TypeError: this.encryptPassword is not a function\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:124:51)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829642114,"level":"error","msg":"   Request error! TypeError : this.encryptPassword is not a function \n TypeError: this.encryptPassword is not a function\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:124:51)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 \nData: ","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829715034,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829715034,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829715034,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"db","svc":"db"}
{"ts":1744829715034,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829715035,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829715035,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"db","svc":"db"}
{"ts":1744829715035,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"users","svc":"users"}
{"ts":1744829715035,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829715036,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"api","svc":"api"}
{"ts":1744829715036,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829715036,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-19263","ns":"","mod":"broker"}
{"ts":1744829716247,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716247,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716247,"level":"info","msg":"Node ID: daniels-macbook-pro.local-19407","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716248,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"registry"}
{"ts":1744829716248,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"registry"}
{"ts":1744829716248,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716253,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716254,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716259,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829716259,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829716259,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716268,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716329,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716330,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716330,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716330,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716330,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716330,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716350,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716350,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716351,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716351,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716351,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716351,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716351,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716352,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716352,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716464,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"db","svc":"db"}
{"ts":1744829716465,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"db","svc":"db"}
{"ts":1744829716505,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"db","svc":"db"}
{"ts":1744829716505,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716542,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716542,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716542,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716543,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716543,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716543,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716543,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716543,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716543,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716544,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716544,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716544,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716544,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716544,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716544,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716545,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716546,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716546,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716546,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716546,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716546,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716546,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716546,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829716546,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829716552,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829716552,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716552,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"db","svc":"db"}
{"ts":1744829716552,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829716552,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829716552,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716552,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"db","svc":"db"}
{"ts":1744829716552,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829716557,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"registry"}
{"ts":1744829716557,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716559,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829716559,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829716560,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716560,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716561,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"registry"}
{"ts":1744829716561,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716564,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"registry"}
{"ts":1744829716564,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716564,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716564,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829716564,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"db","svc":"db"}
{"ts":1744829716564,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"db","svc":"db"}
{"ts":1744829716643,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT', dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true }","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716643,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"db","svc":"db"}
{"ts":1744829716654,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829716654,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829716654,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716654,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716654,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716655,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716655,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716655,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716655,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716655,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716655,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716656,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716656,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716656,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716656,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716656,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716656,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716656,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716656,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716656,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716657,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716657,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716657,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716657,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716657,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716657,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716657,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716657,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716657,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716658,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716658,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716658,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716658,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716658,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716658,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716658,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"registry"}
{"ts":1744829716658,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716658,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829716658,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716658,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 112ms.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716731,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829716731,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829716731,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829716731,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716732,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 473ms.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829716732,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829717159,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717160,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717160,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717160,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717160,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717160,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717160,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717160,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717160,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717160,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717160,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717160,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829717161,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829717161,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829719783,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829719790,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829719790,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829719790,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829719791,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: '5604f06b-633d-4a75-ba9b-61c3e10272c7' }","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829719867,"level":"debug","msg":"The 'users.register' request is rejected. { requestID: '5604f06b-633d-4a75-ba9b-61c3e10272c7' } ValidationError [SequelizeValidationError]: notNull Violation: user.password cannot be null\n    at InstanceValidator._validate (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/instance-validator.js:50:13)\n    at async InstanceValidator._validateAndRunHooks (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/instance-validator.js:60:7)\n    at async InstanceValidator.validate (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/instance-validator.js:54:12)\n    at async model.save (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:2426:7)\n    at async user.create (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1362:12)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  errors: [ ValidationErrorItem { message: 'user.password cannot be null', type: 'notNull Violation', path: 'password', value: null, origin: 'CORE', instance: [user], validatorKey: 'is_null', validatorName: null, validatorArgs: [] } ]\n}","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829719868,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '5604f06b-633d-4a75-ba9b-61c3e10272c7' } ValidationError [SequelizeValidationError]: notNull Violation: user.password cannot be null\n    at InstanceValidator._validate (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/instance-validator.js:50:13)\n    at async InstanceValidator._validateAndRunHooks (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/instance-validator.js:60:7)\n    at async InstanceValidator.validate (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/instance-validator.js:54:12)\n    at async model.save (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:2426:7)\n    at async user.create (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1362:12)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  errors: [ ValidationErrorItem { message: 'user.password cannot be null', type: 'notNull Violation', path: 'password', value: null, origin: 'CORE', instance: [user], validatorKey: 'is_null', validatorName: null, validatorArgs: [] } ]\n}","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829719868,"level":"error","msg":"   Request error! SequelizeValidationError : notNull Violation: user.password cannot be null \n SequelizeValidationError: notNull Violation: user.password cannot be null\n    at InstanceValidator._validate (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/instance-validator.js:50:13)\n    at async InstanceValidator._validateAndRunHooks (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/instance-validator.js:60:7)\n    at async InstanceValidator.validate (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/instance-validator.js:54:12)\n    at async model.save (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:2426:7)\n    at async user.create (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1362:12)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 \nData: ","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829770008,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829770008,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829770008,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"db","svc":"db"}
{"ts":1744829770008,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829770010,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829770010,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"db","svc":"db"}
{"ts":1744829770010,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"users","svc":"users"}
{"ts":1744829770010,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829770010,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"api","svc":"api"}
{"ts":1744829770011,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829770011,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-19407","ns":"","mod":"broker"}
{"ts":1744829771316,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771316,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771316,"level":"info","msg":"Node ID: daniels-macbook-pro.local-19556","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771316,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"registry"}
{"ts":1744829771316,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"registry"}
{"ts":1744829771317,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771324,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771325,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771329,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829771329,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829771330,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771338,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771397,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771398,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771398,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771399,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771399,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771399,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771416,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771416,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771416,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771416,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771416,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771417,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771417,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771417,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771417,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771534,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"db","svc":"db"}
{"ts":1744829771534,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"db","svc":"db"}
{"ts":1744829771574,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"db","svc":"db"}
{"ts":1744829771574,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771608,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771608,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771608,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771609,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771609,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771609,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771609,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771609,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771609,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771610,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771610,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771610,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771610,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771610,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771610,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771611,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771612,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771612,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771612,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771612,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771612,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771612,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771612,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829771612,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829771618,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829771618,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771618,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"db","svc":"db"}
{"ts":1744829771618,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829771618,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829771618,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771618,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"db","svc":"db"}
{"ts":1744829771618,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829771623,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"registry"}
{"ts":1744829771623,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771625,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829771625,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829771626,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771626,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771626,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"registry"}
{"ts":1744829771626,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771630,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"registry"}
{"ts":1744829771630,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771630,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771630,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829771630,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"db","svc":"db"}
{"ts":1744829771630,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"db","svc":"db"}
{"ts":1744829771690,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT', dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true }","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771691,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"db","svc":"db"}
{"ts":1744829771702,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829771702,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829771702,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771702,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771702,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771703,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771703,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771703,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771704,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771704,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771704,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771705,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771705,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771705,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771705,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771705,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771705,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771705,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771705,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771705,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771706,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771707,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"registry"}
{"ts":1744829771707,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771707,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829771707,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771707,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 95ms.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771777,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829771777,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829771777,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829771777,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771778,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 447ms.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829771778,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829772209,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772210,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772210,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772210,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772210,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772210,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772210,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772210,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772210,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772210,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772210,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772210,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829772211,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829772211,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829777636,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829777644,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829777644,"level":"info","msg":"   Call 'users.register' action","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829777644,"level":"debug","msg":"   Params: { username: 'johndoe', email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829777646,"level":"debug","msg":"Call action locally. { action: 'users.register', requestID: '36eb4aa2-5e23-4fda-b155-e8c117a19f90' }","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829777730,"level":"info","msg":"<= 200 POST /api/users/register [+94.512 ms]","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829793197,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829793198,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829793198,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829793198,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829793198,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: '24f7826f-f1f3-4f1b-9f2e-277b106b7c84' }","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829793219,"level":"info","msg":"USER : [object SequelizeInstance:user]","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829793282,"level":"info","msg":"<= 200 POST /api/users/login [+84.643 ms]","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829861854,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829861854,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829861854,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"db","svc":"db"}
{"ts":1744829861854,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829861858,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"$node","svc":"$node"}
{"ts":1744829861858,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"db","svc":"db"}
{"ts":1744829861858,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"users","svc":"users"}
{"ts":1744829861859,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829861859,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"api","svc":"api"}
{"ts":1744829861859,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744829861859,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-19556","ns":"","mod":"broker"}
{"ts":1744830075731,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830075731,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830075731,"level":"info","msg":"Node ID: daniels-macbook-pro.local-20650","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830075731,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"registry"}
{"ts":1744830075732,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"registry"}
{"ts":1744830075732,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830075738,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830075739,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830075744,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"$node","svc":"$node"}
{"ts":1744830075744,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"$node","svc":"$node"}
{"ts":1744830075744,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830075753,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830075801,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830075802,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830075802,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830075802,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830075802,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830075802,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830075817,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830075817,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830075817,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830075817,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830075817,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830075818,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830075818,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830075819,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830075819,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830075914,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"db","svc":"db"}
{"ts":1744830075914,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"db","svc":"db"}
{"ts":1744830075956,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"db","svc":"db"}
{"ts":1744830075956,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076137,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076137,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076137,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076138,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076138,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076138,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076139,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076139,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076139,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076140,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076140,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076140,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076140,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076140,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076140,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076140,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076140,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076140,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076141,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076141,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076141,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076141,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076141,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076141,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076141,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076141,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076141,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076142,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076142,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076142,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076142,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076142,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076142,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076142,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"users","svc":"users"}
{"ts":1744830076142,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"users","svc":"users"}
{"ts":1744830076149,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"$node","svc":"$node"}
{"ts":1744830076149,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830076149,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"db","svc":"db"}
{"ts":1744830076149,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"users","svc":"users"}
{"ts":1744830076149,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"$node","svc":"$node"}
{"ts":1744830076149,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830076149,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"db","svc":"db"}
{"ts":1744830076149,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"users","svc":"users"}
{"ts":1744830076154,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"registry"}
{"ts":1744830076154,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076156,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"$node","svc":"$node"}
{"ts":1744830076156,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"$node","svc":"$node"}
{"ts":1744830076156,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830076156,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830076157,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"registry"}
{"ts":1744830076157,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076160,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"registry"}
{"ts":1744830076160,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076160,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830076160,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830076160,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"db","svc":"db"}
{"ts":1744830076160,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"db","svc":"db"}
{"ts":1744830076237,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT', dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true }","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076238,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"db","svc":"db"}
{"ts":1744830076246,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"users","svc":"users"}
{"ts":1744830076246,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"users","svc":"users"}
{"ts":1744830076246,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076246,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076246,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076247,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076247,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076247,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076248,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076248,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076248,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076249,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076249,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076249,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076249,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076249,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076249,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076249,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076249,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076249,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076250,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076250,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076250,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076250,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076250,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076250,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076250,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076250,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076250,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076250,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076250,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076250,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076250,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076250,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076250,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076250,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"registry"}
{"ts":1744830076250,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076250,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"users","svc":"users"}
{"ts":1744830076250,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076251,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 109ms.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076316,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"users","svc":"users"}
{"ts":1744830076316,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"users","svc":"users"}
{"ts":1744830076316,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"users","svc":"users"}
{"ts":1744830076316,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076316,"level":"info","msg":"âœ” ServiceBroker with 4 service(s) started successfully in 572ms.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076316,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076751,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830076752,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830076753,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830076753,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830076753,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830076753,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830076753,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830076753,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830076753,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830076753,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830076753,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830076753,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830076753,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830076753,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830080400,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830080410,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830080410,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830080410,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744830080411,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: '12cb5926-ffdc-44bf-be6d-d40632735a20' }","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744830080421,"level":"info","msg":"USER : [object SequelizeInstance:user]","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"users","svc":"users"}
{"ts":1744830080502,"level":"info","msg":"<= 200 POST /api/users/login [+102.272 ms]","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744831114734,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"$node","svc":"$node"}
{"ts":1744831114736,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744831114737,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"db","svc":"db"}
{"ts":1744831114737,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"users","svc":"users"}
{"ts":1744831114743,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"$node","svc":"$node"}
{"ts":1744831114743,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"db","svc":"db"}
{"ts":1744831114743,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"users","svc":"users"}
{"ts":1744831114743,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744831114743,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"api","svc":"api"}
{"ts":1744831114743,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744831114743,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-20650","ns":"","mod":"broker"}
{"ts":1744833919979,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833919980,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833919980,"level":"info","msg":"Node ID: daniels-macbook-pro.local-25450","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833919980,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"registry"}
{"ts":1744833919980,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"registry"}
{"ts":1744833919981,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833919991,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833919992,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833919997,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"$node","svc":"$node"}
{"ts":1744833919997,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"$node","svc":"$node"}
{"ts":1744833919998,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920016,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920075,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920076,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920076,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920076,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920077,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920077,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920096,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920096,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920097,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920097,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920097,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920097,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920097,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920097,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920097,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920098,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920098,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920099,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920099,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920245,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920245,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920246,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920247,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920247,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920247,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920248,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920248,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920248,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920249,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920249,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920249,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920249,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920249,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920249,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920249,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920249,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920249,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920250,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920250,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920250,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920250,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920250,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920250,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920250,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920250,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920250,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920251,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920251,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920251,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920251,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920251,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920251,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920251,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"auth","svc":"auth"}
{"ts":1744833920251,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"auth","svc":"auth"}
{"ts":1744833920251,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920252,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"db","svc":"db"}
{"ts":1744833920252,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"db","svc":"db"}
{"ts":1744833920252,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920252,"level":"debug","msg":"Service 'user' is creating...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"user","svc":"user"}
{"ts":1744833920252,"level":"debug","msg":"Service 'user' created.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"user","svc":"user"}
{"ts":1744833920253,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"$node","svc":"$node"}
{"ts":1744833920253,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920253,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"auth","svc":"auth"}
{"ts":1744833920253,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"db","svc":"db"}
{"ts":1744833920253,"level":"debug","msg":"Service 'user' is starting...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"user","svc":"user"}
{"ts":1744833920253,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"$node","svc":"$node"}
{"ts":1744833920253,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920253,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"auth","svc":"auth"}
{"ts":1744833920253,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"db","svc":"db"}
{"ts":1744833920253,"level":"debug","msg":"Service 'user' is starting...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"user","svc":"user"}
{"ts":1744833920253,"level":"info","msg":"Waiting for service(s) 'db'...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"user","svc":"user"}
{"ts":1744833920253,"level":"debug","msg":"0 () of 1 services are available. 1 (db) are still unavailable. Waiting further...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"user","svc":"user"}
{"ts":1744833920253,"level":"info","msg":"Waiting for service(s) 'db'...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"user","svc":"user"}
{"ts":1744833920253,"level":"debug","msg":"0 () of 1 services are available. 1 (db) are still unavailable. Waiting further...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"user","svc":"user"}
{"ts":1744833920297,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"registry"}
{"ts":1744833920297,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920304,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"$node","svc":"$node"}
{"ts":1744833920304,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"$node","svc":"$node"}
{"ts":1744833920305,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920305,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920306,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"registry"}
{"ts":1744833920306,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920306,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920306,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920362,"level":"info","msg":"Database connection has been established successfully.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"db","svc":"db"}
{"ts":1744833920362,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"registry"}
{"ts":1744833920362,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920362,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"db","svc":"db"}
{"ts":1744833920370,"level":"info","msg":"Database connection has been established successfully.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"db","svc":"db"}
{"ts":1744833920370,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"db","svc":"db"}
{"ts":1744833920375,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"auth","svc":"auth"}
{"ts":1744833920375,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"auth","svc":"auth"}
{"ts":1744833920375,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920375,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920375,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920377,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920377,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920377,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920377,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920377,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920377,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920378,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920378,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920378,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920378,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920378,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920378,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920378,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920378,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920378,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920379,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920379,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920379,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920379,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920379,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920379,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920379,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920379,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920379,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920379,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920379,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920379,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920379,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920379,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920379,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920379,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"registry"}
{"ts":1744833920379,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920379,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"auth","svc":"auth"}
{"ts":1744833920380,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"auth","svc":"auth"}
{"ts":1744833920380,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"auth","svc":"auth"}
{"ts":1744833920380,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"auth","svc":"auth"}
{"ts":1744833920881,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920884,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920885,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920885,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920885,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920885,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920885,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833920885,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833920885,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833921255,"level":"info","msg":"Service(s) 'db' are available.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"user","svc":"user"}
{"ts":1744833921259,"level":"info","msg":"Service(s) 'db' are available.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"user","svc":"user"}
{"ts":1744833921286,"level":"error","msg":"Unable to start all services. Error\n    at Query.run (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query-interface.js:117:76\n    at async PostgresQueryInterface.ensureEnums (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query-interface.js:117:20)\n    at async User.sync (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:944:7)\n    at async Service.started (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:30:5)\n    at async Promise.all (index 4) {\n  name: 'SequelizeUniqueConstraintError',\n  errors: [ ValidationErrorItem { message: 'typname must be unique', type: 'unique violation', path: 'typname', value: 'enum_users_status', origin: 'DB', instance: null, validatorKey: 'not_unique', validatorName: null, validatorArgs: [] }, ValidationErrorItem { message: 'typnamespace must be unique', type: 'unique violation', path: 'typnamespace', value: '2200', origin: 'DB', instance: null, validatorKey: 'not_unique', validatorName: null, validatorArgs: [] } ],\n  parent: error: duplicate key value violates unique constraint \"pg_type_typname_nsp_index\"\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 405,\n    severity: 'ERROR',\n    code: '23505',\n    detail: 'Key (typname, typnamespace)=(enum_users_status, 2200) already exists.',\n    hint: undefined,\n    position: undefined,\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: `SQL statement \"CREATE TYPE \"public\".\"enum_users_status\" AS ENUM('active', 'inactive')\"\\nPL/pgSQL function inline_code_block line 1 at SQL statement`,\n    schema: 'pg_catalog',\n    table: 'pg_type',\n    column: undefined,\n    dataType: undefined,\n    constraint: 'pg_type_typname_nsp_index',\n    file: 'nbtinsert.c',\n    line: '666',\n    routine: '_bt_check_unique',\n    sql: `DO 'BEGIN CREATE TYPE \"public\".\"enum_users_status\" AS ENUM(''active'', ''inactive''); EXCEPTION WHEN duplicate_object THEN null; END';`,\n    parameters: undefined\n  },\n  original: error: duplicate key value violates unique constraint \"pg_type_typname_nsp_index\"\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 405,\n    severity: 'ERROR',\n    code: '23505',\n    detail: 'Key (typname, typnamespace)=(enum_users_status, 2200) already exists.',\n    hint: undefined,\n    position: undefined,\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: `SQL statement \"CREATE TYPE \"public\".\"enum_users_status\" AS ENUM('active', 'inactive')\"\\nPL/pgSQL function inline_code_block line 1 at SQL statement`,\n    schema: 'pg_catalog',\n    table: 'pg_type',\n    column: undefined,\n    dataType: undefined,\n    constraint: 'pg_type_typname_nsp_index',\n    file: 'nbtinsert.c',\n    line: '666',\n    routine: '_bt_check_unique',\n    sql: `DO 'BEGIN CREATE TYPE \"public\".\"enum_users_status\" AS ENUM(''active'', ''inactive''); EXCEPTION WHEN duplicate_object THEN null; END';`,\n    parameters: undefined\n  },\n  fields: { typname: 'enum_users_status', typnamespace: '2200' },\n  sql: `DO 'BEGIN CREATE TYPE \"public\".\"enum_users_status\" AS ENUM(''active'', ''inactive''); EXCEPTION WHEN duplicate_object THEN null; END';`\n}","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833921292,"level":"info","msg":"'user' service is registered.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"registry"}
{"ts":1744833921292,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833921292,"level":"info","msg":"Service 'user' started.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"user","svc":"user"}
{"ts":1744833921292,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833921292,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 1s.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833921292,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833921792,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833921794,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833921794,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833921794,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833921794,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833921795,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833921795,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744833921795,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744833921795,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744834029668,"level":"info","msg":"=> POST /api/users/register","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744834029677,"level":"debug","msg":"  Alias:   POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744834029678,"level":"warn","msg":"Service 'users.register' is not registered.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744834029678,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '87567b22-1ec4-4c95-8fee-febf7cee0a82' } ServiceUnavailableError: Service unavailable\n    at Service.aliasHandler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:556:13)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:33\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) {\n  code: 503,\n  type: undefined,\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744834029678,"level":"error","msg":"   Request error! ServiceUnavailableError : Service unavailable \n ServiceUnavailableError: Service unavailable\n    at Service.aliasHandler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:556:13)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:33\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) \nData: ","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744834053321,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834053323,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744834053323,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834053323,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"db","svc":"db"}
{"ts":1744834053323,"level":"debug","msg":"Service 'user' is stopping...","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"user","svc":"user"}
{"ts":1744834053326,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834053326,"level":"info","msg":"Service 'user' stopped.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"user","svc":"user"}
{"ts":1744834053326,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"db","svc":"db"}
{"ts":1744834053326,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834053326,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744834053327,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"api","svc":"api"}
{"ts":1744834053327,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744834053327,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-25450","ns":"","mod":"broker"}
{"ts":1744834054372,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054372,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054372,"level":"info","msg":"Node ID: daniels-macbook-pro.local-25667","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054373,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"registry"}
{"ts":1744834054373,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"registry"}
{"ts":1744834054373,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054381,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054382,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054389,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834054389,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834054390,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054398,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054454,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054454,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054454,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054454,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054455,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054455,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054526,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054526,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054526,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054526,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054526,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054526,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054526,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054526,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054527,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054527,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054527,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054528,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054528,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054677,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054677,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054677,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054678,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054678,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054678,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054679,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054679,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054679,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054680,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054680,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054680,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054680,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054680,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054680,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054680,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054680,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054680,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054681,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054681,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054681,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054681,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054681,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054681,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054681,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054681,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054681,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054682,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054682,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054682,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054682,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054682,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054682,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054682,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834054682,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834054683,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054683,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"db","svc":"db"}
{"ts":1744834054683,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"db","svc":"db"}
{"ts":1744834054683,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054684,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"users","svc":"users"}
{"ts":1744834054684,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"users","svc":"users"}
{"ts":1744834054684,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834054684,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054684,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834054684,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"db","svc":"db"}
{"ts":1744834054684,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"users","svc":"users"}
{"ts":1744834054684,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834054684,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054684,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834054684,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"db","svc":"db"}
{"ts":1744834054684,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"users","svc":"users"}
{"ts":1744834054685,"level":"info","msg":"Waiting for service(s) 'db'...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"users","svc":"users"}
{"ts":1744834054685,"level":"debug","msg":"0 () of 1 services are available. 1 (db) are still unavailable. Waiting further...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"users","svc":"users"}
{"ts":1744834054685,"level":"info","msg":"Waiting for service(s) 'db'...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"users","svc":"users"}
{"ts":1744834054685,"level":"debug","msg":"0 () of 1 services are available. 1 (db) are still unavailable. Waiting further...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"users","svc":"users"}
{"ts":1744834054724,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"registry"}
{"ts":1744834054724,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054731,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834054731,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834054732,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054732,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054733,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"registry"}
{"ts":1744834054733,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054733,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054733,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834054788,"level":"info","msg":"Database connection has been established successfully.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"db","svc":"db"}
{"ts":1744834054788,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"registry"}
{"ts":1744834054788,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054788,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"db","svc":"db"}
{"ts":1744834054788,"level":"info","msg":"Database connection has been established successfully.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"db","svc":"db"}
{"ts":1744834054788,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"db","svc":"db"}
{"ts":1744834054798,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834054798,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834054798,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054798,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054798,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054799,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054799,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054799,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054800,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054800,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054800,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054801,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054801,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054801,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054801,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054801,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054801,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054801,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054801,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054801,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054801,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054801,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054801,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054802,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054802,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054802,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054802,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054802,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054802,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054802,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054802,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054802,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054802,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054802,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054802,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054802,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"registry"}
{"ts":1744834054802,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834054802,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834054802,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834054802,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834054802,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834055304,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834055305,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834055305,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834055305,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834055305,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834055305,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834055305,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834055305,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834055305,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834055687,"level":"info","msg":"Service(s) 'db' are available.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"users","svc":"users"}
{"ts":1744834055692,"level":"info","msg":"Service(s) 'db' are available.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"users","svc":"users"}
{"ts":1744834055702,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"registry"}
{"ts":1744834055702,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834055702,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"users","svc":"users"}
{"ts":1744834055703,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834055703,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 1s.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834055703,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834055704,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"users","svc":"users"}
{"ts":1744834055704,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834055704,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 1s.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834056203,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834056204,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834056204,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834056204,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834056204,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834056204,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834056204,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834056204,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834056204,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834062168,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834062175,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834062175,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834062175,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834062176,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: '12b3d557-36c4-4deb-ba80-08e11a1ddb87' }","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834062176,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: '12b3d557-36c4-4deb-ba80-08e11a1ddb87' } TypeError: Cannot read properties of undefined (reading 'findOne')\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:84:45)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/utils.js:212:22\n    at processCheckResponse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/validators/base.js:63:29)\n    at validateContextParams (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/validators/base.js:88:15)\n    at ServiceBroker.timeoutMiddleware (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/middlewares/timeout.js:31:14)\n    at ServiceBroker.fallbackMiddleware (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/middlewares/fallback.js:31:11)\n    at ServiceBroker.errorHandlerMiddleware (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/middlewares/error-handler.js:14:10)\n    at ServiceBroker.call (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/service-broker.js:1237:31)\n    at Context.call (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/context.js:286:23)\n    at Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:26)","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834062176,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '12b3d557-36c4-4deb-ba80-08e11a1ddb87' } TypeError: Cannot read properties of undefined (reading 'findOne')\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:84:45)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/utils.js:212:22\n    at processCheckResponse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/validators/base.js:63:29)\n    at validateContextParams (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/validators/base.js:88:15)\n    at ServiceBroker.timeoutMiddleware (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/middlewares/timeout.js:31:14)\n    at ServiceBroker.fallbackMiddleware (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/middlewares/fallback.js:31:11)\n    at ServiceBroker.errorHandlerMiddleware (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/middlewares/error-handler.js:14:10)\n    at ServiceBroker.call (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/service-broker.js:1237:31)\n    at Context.call (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/context.js:286:23)\n    at Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:26)","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834062176,"level":"error","msg":"   Request error! TypeError : Cannot read properties of undefined (reading 'findOne') \n TypeError: Cannot read properties of undefined (reading 'findOne')\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:84:45)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/utils.js:212:22\n    at processCheckResponse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/validators/base.js:63:29)\n    at validateContextParams (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/validators/base.js:88:15)\n    at ServiceBroker.timeoutMiddleware (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/middlewares/timeout.js:31:14)\n    at ServiceBroker.fallbackMiddleware (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/middlewares/fallback.js:31:11)\n    at ServiceBroker.errorHandlerMiddleware (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/middlewares/error-handler.js:14:10)\n    at ServiceBroker.call (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/service-broker.js:1237:31)\n    at Context.call (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/context.js:286:23)\n    at Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:26) \nData: ","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834076950,"level":"info","msg":"=> POST /api/auth/login","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834076952,"level":"debug","msg":"  Alias:   POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834076952,"level":"info","msg":"   Call 'auth.login' action","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834076952,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834076953,"level":"debug","msg":"Call action locally. { action: 'auth.login', requestID: '0c0ddc07-12cb-4b0a-9727-5ee150c5f043' }","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834077025,"level":"info","msg":"USER : [object SequelizeInstance:user]","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834077105,"level":"info","msg":"<= 200 POST /api/auth/login [+155.390 ms]","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834206543,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834206543,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834206544,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834206544,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"db","svc":"db"}
{"ts":1744834206544,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"users","svc":"users"}
{"ts":1744834206547,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834206547,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"users","svc":"users"}
{"ts":1744834206547,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"db","svc":"db"}
{"ts":1744834206547,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834206547,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834206547,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"api","svc":"api"}
{"ts":1744834206548,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834206548,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-25667","ns":"","mod":"broker"}
{"ts":1744834237007,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237007,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237007,"level":"info","msg":"Node ID: daniels-macbook-pro.local-26016","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237008,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"registry"}
{"ts":1744834237008,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"registry"}
{"ts":1744834237009,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237015,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237016,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237020,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834237020,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834237020,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237037,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237086,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237086,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237087,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237087,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237087,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237087,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237103,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237103,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237103,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237103,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237103,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237103,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237104,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237104,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237104,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237104,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237104,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237105,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237105,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237239,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237239,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237239,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237240,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237240,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237240,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237241,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237241,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237241,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237242,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237242,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237242,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237242,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237242,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237242,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237242,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237242,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237242,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237243,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237243,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237243,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237244,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237244,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237244,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237244,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237244,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237244,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237244,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237244,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237244,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237244,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237244,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237244,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237245,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834237245,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834237245,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237245,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"db","svc":"db"}
{"ts":1744834237245,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"db","svc":"db"}
{"ts":1744834237245,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237247,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"users","svc":"users"}
{"ts":1744834237247,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"users","svc":"users"}
{"ts":1744834237247,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834237247,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237247,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834237247,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"db","svc":"db"}
{"ts":1744834237247,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"users","svc":"users"}
{"ts":1744834237247,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834237247,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237247,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834237247,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"db","svc":"db"}
{"ts":1744834237247,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"users","svc":"users"}
{"ts":1744834237247,"level":"info","msg":"Waiting for service(s) 'db'...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"users","svc":"users"}
{"ts":1744834237248,"level":"debug","msg":"0 () of 1 services are available. 1 (db) are still unavailable. Waiting further...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"users","svc":"users"}
{"ts":1744834237248,"level":"info","msg":"Waiting for service(s) 'db'...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"users","svc":"users"}
{"ts":1744834237248,"level":"debug","msg":"0 () of 1 services are available. 1 (db) are still unavailable. Waiting further...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"users","svc":"users"}
{"ts":1744834237290,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"registry"}
{"ts":1744834237290,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237298,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834237298,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834237298,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237298,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237299,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"registry"}
{"ts":1744834237299,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237299,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237299,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237348,"level":"info","msg":"Database connection has been established successfully.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"db","svc":"db"}
{"ts":1744834237348,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"registry"}
{"ts":1744834237348,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237348,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"db","svc":"db"}
{"ts":1744834237352,"level":"info","msg":"Database connection has been established successfully.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"db","svc":"db"}
{"ts":1744834237352,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"db","svc":"db"}
{"ts":1744834237360,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834237360,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834237360,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237360,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237360,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237362,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237362,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237362,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237363,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237363,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237363,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237363,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237363,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237364,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237364,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237364,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237364,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237364,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237364,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237364,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237364,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237364,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237364,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237364,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237364,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237364,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237365,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237365,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237365,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237365,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237365,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237365,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237365,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237365,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237365,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237365,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"registry"}
{"ts":1744834237365,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237365,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834237365,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834237365,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834237365,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834237866,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237867,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237867,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237867,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237867,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237867,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237868,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834237868,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834237868,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834238248,"level":"info","msg":"Service(s) 'db' are available.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"users","svc":"users"}
{"ts":1744834238253,"level":"info","msg":"Service(s) 'db' are available.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"users","svc":"users"}
{"ts":1744834238265,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"registry"}
{"ts":1744834238265,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834238265,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"users","svc":"users"}
{"ts":1744834238265,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834238265,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 1s.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834238266,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834238267,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"users","svc":"users"}
{"ts":1744834238267,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834238267,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 1s.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834238766,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834238767,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834238767,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834238767,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834238767,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834238767,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834238767,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834238767,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834238767,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834246591,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834246597,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834246598,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834246598,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834246598,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: 'eeec0911-ff3a-4672-8e93-c184685dfd42' }","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834246598,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: 'eeec0911-ff3a-4672-8e93-c184685dfd42' } TypeError: Cannot read properties of undefined (reading 'findOne')\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:95:45)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/utils.js:212:22\n    at processCheckResponse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/validators/base.js:63:29)\n    at validateContextParams (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/validators/base.js:88:15)\n    at ServiceBroker.timeoutMiddleware (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/middlewares/timeout.js:31:14)\n    at ServiceBroker.fallbackMiddleware (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/middlewares/fallback.js:31:11)\n    at ServiceBroker.errorHandlerMiddleware (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/middlewares/error-handler.js:14:10)\n    at ServiceBroker.call (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/service-broker.js:1237:31)\n    at Context.call (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/context.js:286:23)\n    at Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:26)","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834246599,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'eeec0911-ff3a-4672-8e93-c184685dfd42' } TypeError: Cannot read properties of undefined (reading 'findOne')\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:95:45)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/utils.js:212:22\n    at processCheckResponse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/validators/base.js:63:29)\n    at validateContextParams (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/validators/base.js:88:15)\n    at ServiceBroker.timeoutMiddleware (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/middlewares/timeout.js:31:14)\n    at ServiceBroker.fallbackMiddleware (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/middlewares/fallback.js:31:11)\n    at ServiceBroker.errorHandlerMiddleware (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/middlewares/error-handler.js:14:10)\n    at ServiceBroker.call (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/service-broker.js:1237:31)\n    at Context.call (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/context.js:286:23)\n    at Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:26)","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834246599,"level":"error","msg":"   Request error! TypeError : Cannot read properties of undefined (reading 'findOne') \n TypeError: Cannot read properties of undefined (reading 'findOne')\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:95:45)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/utils.js:212:22\n    at processCheckResponse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/validators/base.js:63:29)\n    at validateContextParams (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/validators/base.js:88:15)\n    at ServiceBroker.timeoutMiddleware (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/middlewares/timeout.js:31:14)\n    at ServiceBroker.fallbackMiddleware (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/middlewares/fallback.js:31:11)\n    at ServiceBroker.errorHandlerMiddleware (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/middlewares/error-handler.js:14:10)\n    at ServiceBroker.call (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/service-broker.js:1237:31)\n    at Context.call (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/context.js:286:23)\n    at Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:26) \nData: ","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834322235,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834322235,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834322235,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834322235,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"db","svc":"db"}
{"ts":1744834322235,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"users","svc":"users"}
{"ts":1744834322237,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834322237,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"users","svc":"users"}
{"ts":1744834322237,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"db","svc":"db"}
{"ts":1744834322237,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834322237,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834322237,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"api","svc":"api"}
{"ts":1744834322237,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834322237,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-26016","ns":"","mod":"broker"}
{"ts":1744834323261,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323261,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323262,"level":"info","msg":"Node ID: daniels-macbook-pro.local-26205","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323262,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"registry"}
{"ts":1744834323262,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"registry"}
{"ts":1744834323263,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323271,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323271,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323276,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834323276,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834323276,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323285,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323341,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323342,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323342,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323342,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323342,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323342,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323359,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323359,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323359,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323359,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323359,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323359,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323359,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323359,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323359,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323360,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323360,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323360,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323360,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323494,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323494,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323494,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323496,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323496,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323496,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323497,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323497,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323497,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323498,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323498,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323498,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323498,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323498,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323498,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323498,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323498,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323498,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323499,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323499,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323499,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323499,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323499,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323499,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323499,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323499,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323499,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323500,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323500,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323500,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323500,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323500,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323500,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323500,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834323501,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834323501,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323501,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"db","svc":"db"}
{"ts":1744834323501,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"db","svc":"db"}
{"ts":1744834323501,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323502,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323502,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323502,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323503,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323503,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323503,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323504,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323504,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323504,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323505,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323505,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323505,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323505,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323505,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323505,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323505,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323505,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323505,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323506,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323506,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323506,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323506,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323506,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323506,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323506,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323506,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323506,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323506,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323506,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323506,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323506,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323506,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323506,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323507,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834323507,"level":"info","msg":"DB service  found","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834323507,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834323507,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834323507,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323507,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834323507,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"db","svc":"db"}
{"ts":1744834323507,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834323507,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834323507,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323507,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834323507,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"db","svc":"db"}
{"ts":1744834323507,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834323543,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"registry"}
{"ts":1744834323543,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323551,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834323551,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834323552,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323552,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323552,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"registry"}
{"ts":1744834323552,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323553,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323553,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834323612,"level":"info","msg":"Database connection has been established successfully.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"db","svc":"db"}
{"ts":1744834323612,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"registry"}
{"ts":1744834323612,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323612,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"db","svc":"db"}
{"ts":1744834323617,"level":"info","msg":"Database connection has been established successfully.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"db","svc":"db"}
{"ts":1744834323617,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"db","svc":"db"}
{"ts":1744834323623,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834323623,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834323623,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323623,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323623,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323624,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323624,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323624,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323624,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323624,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323624,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323625,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323625,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323625,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323625,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323625,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323625,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323625,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323625,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323625,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323626,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323626,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323626,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323626,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323626,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323626,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323626,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323626,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323626,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323626,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323626,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323626,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323626,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323626,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323626,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323626,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"registry"}
{"ts":1744834323626,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323626,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834323627,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834323627,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834323627,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834323627,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323627,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 120ms.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323710,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834323710,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834323710,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834323711,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834323711,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834323711,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834323711,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323711,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 435ms.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834323711,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834324128,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834324129,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834324129,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834324129,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834324129,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834324129,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834324129,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834324129,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834324130,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834329477,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834329485,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834329485,"level":"warn","msg":"Service 'users.login' is not registered.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834329485,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '6df2e347-5844-4add-967c-25f1869dc8ef' } ServiceUnavailableError: Service unavailable\n    at Service.aliasHandler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:556:13)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:33\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) {\n  code: 503,\n  type: undefined,\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834329485,"level":"error","msg":"   Request error! ServiceUnavailableError : Service unavailable \n ServiceUnavailableError: Service unavailable\n    at Service.aliasHandler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:556:13)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:33\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) \nData: ","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834348633,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834348633,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834348633,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834348633,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"db","svc":"db"}
{"ts":1744834348633,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834348634,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834348634,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"db","svc":"db"}
{"ts":1744834348634,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834348634,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834348634,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834348634,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"api","svc":"api"}
{"ts":1744834348635,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834348635,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-26205","ns":"","mod":"broker"}
{"ts":1744834349597,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349597,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349597,"level":"info","msg":"Node ID: daniels-macbook-pro.local-26314","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349597,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"registry"}
{"ts":1744834349598,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"registry"}
{"ts":1744834349598,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349604,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349605,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349609,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834349609,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834349610,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349618,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349669,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349670,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349670,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349670,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349670,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349670,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349686,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349686,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349686,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349686,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349686,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349686,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349686,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349687,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349687,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349687,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349687,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349688,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349688,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349816,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349816,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349816,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349818,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349818,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349818,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349818,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349818,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349819,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349820,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349820,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349820,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349820,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349820,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349820,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349820,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349820,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349820,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349821,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349821,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349821,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349821,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349821,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349821,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349821,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349821,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349821,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349821,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349821,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349821,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349822,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349822,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349822,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349822,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834349822,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834349822,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349823,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"db","svc":"db"}
{"ts":1744834349823,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"db","svc":"db"}
{"ts":1744834349823,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349824,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349824,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349824,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349825,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349825,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349825,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349825,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349825,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349825,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349826,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349826,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349827,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349827,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349827,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349827,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349827,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349827,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349827,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349828,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349828,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349828,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349828,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349828,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349828,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349828,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349828,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349828,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349828,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349828,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349828,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349828,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349828,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349828,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349828,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"users","svc":"users"}
{"ts":1744834349828,"level":"info","msg":"DB service  found","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"users","svc":"users"}
{"ts":1744834349828,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"users","svc":"users"}
{"ts":1744834349829,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834349829,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349829,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834349829,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"db","svc":"db"}
{"ts":1744834349829,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"users","svc":"users"}
{"ts":1744834349829,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834349829,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349829,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834349829,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"db","svc":"db"}
{"ts":1744834349829,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"users","svc":"users"}
{"ts":1744834349865,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"registry"}
{"ts":1744834349865,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349873,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834349873,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834349874,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349874,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349875,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"registry"}
{"ts":1744834349875,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349875,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349875,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834349925,"level":"info","msg":"Database connection has been established successfully.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"db","svc":"db"}
{"ts":1744834349925,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"registry"}
{"ts":1744834349925,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349925,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"db","svc":"db"}
{"ts":1744834349926,"level":"info","msg":"Database connection has been established successfully.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"db","svc":"db"}
{"ts":1744834349926,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"db","svc":"db"}
{"ts":1744834349940,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834349940,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834349940,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349940,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349940,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349941,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349941,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349941,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349941,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349941,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349941,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349942,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349943,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349943,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349943,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349943,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349943,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349943,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349943,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349943,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349943,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349943,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349943,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349943,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349943,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349943,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349943,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349943,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349943,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349944,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349944,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349944,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349944,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349944,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349944,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349944,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"registry"}
{"ts":1744834349944,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349944,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834349944,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"users","svc":"users"}
{"ts":1744834349944,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"users","svc":"users"}
{"ts":1744834349944,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349944,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349944,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349945,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349945,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349945,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349946,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349946,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349946,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349947,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349947,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349947,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349947,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349947,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349947,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349947,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349947,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349947,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349948,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349948,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349948,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349948,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349948,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349948,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349948,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349948,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349948,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349948,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349948,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349948,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349948,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349948,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349948,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349949,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"registry"}
{"ts":1744834349949,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349949,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"users","svc":"users"}
{"ts":1744834349949,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834349949,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834349949,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834349949,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349950,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 340ms.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349950,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349951,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"users","svc":"users"}
{"ts":1744834349951,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"users","svc":"users"}
{"ts":1744834349951,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"users","svc":"users"}
{"ts":1744834349951,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834349951,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 123ms.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834350450,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834350451,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834350451,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834350451,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834350451,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834350451,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834350451,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834350451,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834350452,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834350452,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834350452,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834350452,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834350452,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834350452,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834353608,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834353615,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834353615,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834353615,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834353616,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: 'ac3a2ef5-fb9f-47e8-8e89-179a2e794852' }","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834353625,"level":"info","msg":"USER : [object SequelizeInstance:user]","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"users","svc":"users"}
{"ts":1744834353689,"level":"info","msg":"<= 200 POST /api/users/login [+81.009 ms]","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834490073,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834490073,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834490073,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834490073,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"db","svc":"db"}
{"ts":1744834490073,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"users","svc":"users"}
{"ts":1744834490076,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834490076,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"db","svc":"db"}
{"ts":1744834490077,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834490077,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"users","svc":"users"}
{"ts":1744834490077,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834490077,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"api","svc":"api"}
{"ts":1744834490077,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834490078,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-26314","ns":"","mod":"broker"}
{"ts":1744834762858,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834762859,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834762859,"level":"info","msg":"Node ID: daniels-macbook-pro.local-27489","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834762859,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"registry"}
{"ts":1744834762859,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"registry"}
{"ts":1744834762860,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834762872,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834762873,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834762877,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834762878,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834762878,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834762894,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834762950,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834762950,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834762951,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834762951,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834762951,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834762951,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834762969,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834762969,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834762969,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834762969,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834762969,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834762969,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834762970,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834762970,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834762970,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834762970,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834762970,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834762971,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834762971,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763114,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763114,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763114,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763116,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763116,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763116,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763117,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763117,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763117,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763118,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763118,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763118,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763118,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763118,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763118,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763118,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763118,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763118,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763119,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763119,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763119,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763119,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763119,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763119,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763119,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763119,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763119,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763120,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763120,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763120,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763120,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763120,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763120,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763120,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834763121,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834763121,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763121,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"db","svc":"db"}
{"ts":1744834763121,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"db","svc":"db"}
{"ts":1744834763121,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763123,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763123,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763123,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763124,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763124,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763124,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763124,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763124,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763124,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763125,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763125,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763125,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763125,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763125,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763125,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763125,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763125,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763125,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763126,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763126,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763126,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763126,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763126,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763126,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763126,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763126,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763126,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763126,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763126,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763126,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763126,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763126,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763126,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763127,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"users","svc":"users"}
{"ts":1744834763127,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"users","svc":"users"}
{"ts":1744834763127,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"users","svc":"users"}
{"ts":1744834763128,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834763128,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834763128,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834763128,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"db","svc":"db"}
{"ts":1744834763128,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"users","svc":"users"}
{"ts":1744834763128,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834763128,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834763128,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834763128,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"db","svc":"db"}
{"ts":1744834763128,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"users","svc":"users"}
{"ts":1744834763171,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"registry"}
{"ts":1744834763171,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763179,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834763179,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834763180,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834763180,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834763181,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"registry"}
{"ts":1744834763181,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763181,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834763181,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834763237,"level":"info","msg":"Database connection has been established successfully.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"db","svc":"db"}
{"ts":1744834763237,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"registry"}
{"ts":1744834763237,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763237,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"db","svc":"db"}
{"ts":1744834763238,"level":"info","msg":"Database connection has been established successfully.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"db","svc":"db"}
{"ts":1744834763238,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"db","svc":"db"}
{"ts":1744834763241,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"users","svc":"users"}
{"ts":1744834763241,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"users","svc":"users"}
{"ts":1744834763241,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763241,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763241,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763242,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763242,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763242,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763243,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763243,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763243,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763244,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763244,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763244,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763244,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763244,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763244,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763244,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763244,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763244,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763245,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763245,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763245,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763245,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763245,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763245,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763245,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763245,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763245,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763245,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763245,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763245,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763245,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763245,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763245,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763245,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"registry"}
{"ts":1744834763245,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763245,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"users","svc":"users"}
{"ts":1744834763246,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834763246,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834763246,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763246,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763246,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763247,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763247,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763247,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763248,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763248,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763248,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763249,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763249,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763249,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763249,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763249,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763249,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763249,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763249,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763249,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763249,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763250,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763250,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763250,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763250,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763250,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763250,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763250,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763250,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763250,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763250,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763250,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763250,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763250,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763250,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763250,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"registry"}
{"ts":1744834763250,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763250,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834763251,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"users","svc":"users"}
{"ts":1744834763251,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"users","svc":"users"}
{"ts":1744834763251,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"users","svc":"users"}
{"ts":1744834763251,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763251,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 124ms.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763326,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834763326,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834763326,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834763327,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763327,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 449ms.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763327,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763752,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834763753,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834763753,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834763753,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834763753,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834763753,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834763753,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834763753,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834763753,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834763753,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834763754,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834763754,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834763754,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834763754,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834821269,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834821269,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834821269,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834821269,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"db","svc":"db"}
{"ts":1744834821269,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"users","svc":"users"}
{"ts":1744834821272,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834821272,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"db","svc":"db"}
{"ts":1744834821272,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834821272,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"users","svc":"users"}
{"ts":1744834821272,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834821272,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"api","svc":"api"}
{"ts":1744834821272,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834821272,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-27489","ns":"","mod":"broker"}
{"ts":1744834822595,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822595,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822596,"level":"info","msg":"Node ID: daniels-macbook-pro.local-27631","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822596,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"registry"}
{"ts":1744834822596,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"registry"}
{"ts":1744834822597,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822605,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822605,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822610,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834822610,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834822610,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822619,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822675,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822676,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822676,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822676,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822676,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822676,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822692,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822693,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822693,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822693,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822693,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822693,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822693,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822693,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822693,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822693,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822693,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822694,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822694,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822828,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822828,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822828,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822829,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822829,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822829,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822830,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822830,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822830,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822831,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822831,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822831,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822831,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822831,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822831,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822831,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822831,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822831,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822832,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822832,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822832,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822833,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822833,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822833,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822833,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822833,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822833,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822833,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822833,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822833,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822833,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822833,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822833,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822834,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834822834,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834822834,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822835,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"db","svc":"db"}
{"ts":1744834822835,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"db","svc":"db"}
{"ts":1744834822835,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822836,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822836,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822836,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822837,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822837,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822837,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822838,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822838,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822838,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822839,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822839,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822839,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822839,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822839,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822839,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822839,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822839,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822839,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822840,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822840,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822840,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822840,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822840,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822840,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822840,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822840,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822840,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822840,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822840,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822840,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822840,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822840,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822840,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822841,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"users","svc":"users"}
{"ts":1744834822841,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"users","svc":"users"}
{"ts":1744834822841,"level":"info","msg":"DB service found null","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"users","svc":"users"}
{"ts":1744834822841,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"users","svc":"users"}
{"ts":1744834822841,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834822841,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822841,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834822841,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"db","svc":"db"}
{"ts":1744834822841,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"users","svc":"users"}
{"ts":1744834822841,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834822841,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822841,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834822841,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"db","svc":"db"}
{"ts":1744834822841,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"users","svc":"users"}
{"ts":1744834822878,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"registry"}
{"ts":1744834822878,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822885,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834822885,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834822886,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822886,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822887,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"registry"}
{"ts":1744834822887,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822887,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822887,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834822942,"level":"info","msg":"Database connection has been established successfully.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"db","svc":"db"}
{"ts":1744834822942,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"registry"}
{"ts":1744834822942,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822943,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"db","svc":"db"}
{"ts":1744834822943,"level":"info","msg":"Database connection has been established successfully.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"db","svc":"db"}
{"ts":1744834822943,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"db","svc":"db"}
{"ts":1744834822952,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834822952,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834822952,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822952,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822952,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822953,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822953,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822953,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822953,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822953,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822953,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822954,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822954,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822954,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822954,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822954,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822954,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822954,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822954,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822954,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822955,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822955,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822955,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822955,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822955,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822955,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822955,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822955,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822955,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822955,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822955,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822955,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822955,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822955,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822955,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822955,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"registry"}
{"ts":1744834822955,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822955,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834822956,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834822956,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834822956,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834822956,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"users","svc":"users"}
{"ts":1744834822956,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"users","svc":"users"}
{"ts":1744834822956,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822956,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822956,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822957,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822957,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822957,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822957,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822957,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822957,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822958,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822958,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822958,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822958,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822958,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822958,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822958,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822958,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822958,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822959,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822959,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822959,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822959,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822959,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822959,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822959,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822959,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822959,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822959,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822959,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822959,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822959,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822959,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822959,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822959,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"registry"}
{"ts":1744834822959,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822960,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"users","svc":"users"}
{"ts":1744834822960,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834822960,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 119ms.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834823030,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"users","svc":"users"}
{"ts":1744834823030,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"users","svc":"users"}
{"ts":1744834823030,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"users","svc":"users"}
{"ts":1744834823030,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834823030,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 420ms.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834823030,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834823462,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834823463,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834823463,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834823463,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834823463,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834823463,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834823463,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834823464,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834823464,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834823464,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834823464,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834823464,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834823464,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834823464,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834850393,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834850393,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834850393,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834850393,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"db","svc":"db"}
{"ts":1744834850393,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"users","svc":"users"}
{"ts":1744834850395,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834850395,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"db","svc":"db"}
{"ts":1744834850395,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834850395,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"users","svc":"users"}
{"ts":1744834850395,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834850395,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"api","svc":"api"}
{"ts":1744834850396,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834850396,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-27631","ns":"","mod":"broker"}
{"ts":1744834851495,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851495,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851495,"level":"info","msg":"Node ID: daniels-macbook-pro.local-27741","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851496,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"registry"}
{"ts":1744834851496,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"registry"}
{"ts":1744834851497,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851502,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851503,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851507,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834851507,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834851508,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851516,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851564,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851565,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851565,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851565,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851565,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851565,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851581,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851581,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851581,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851582,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851582,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851582,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851582,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851582,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851582,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851582,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851582,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851583,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851583,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851709,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851709,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851709,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851711,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851711,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851711,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851712,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851712,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851712,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851713,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851713,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851713,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851713,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851713,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851713,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851713,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851713,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851713,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851714,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851714,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851714,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851714,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851714,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851714,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851714,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851714,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851714,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851715,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851715,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851715,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851715,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851715,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851715,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851715,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834851715,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834851715,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851716,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"db","svc":"db"}
{"ts":1744834851744,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"db","svc":"db"}
{"ts":1744834851744,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851746,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851746,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851746,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851749,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851749,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851749,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851750,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851750,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851750,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851751,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851751,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851751,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851751,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851751,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851751,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851751,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851751,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851751,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851752,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851752,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851752,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851752,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851752,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851752,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851752,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851752,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851752,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851752,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851752,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851752,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851752,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851752,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851752,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851752,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"users","svc":"users"}
{"ts":1744834851753,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"users","svc":"users"}
{"ts":1744834851753,"level":"info","msg":"DB service found [object Object]","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"users","svc":"users"}
{"ts":1744834851753,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"users","svc":"users"}
{"ts":1744834851758,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834851758,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851758,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834851758,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"db","svc":"db"}
{"ts":1744834851758,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"users","svc":"users"}
{"ts":1744834851758,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834851758,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851758,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834851758,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"db","svc":"db"}
{"ts":1744834851758,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"users","svc":"users"}
{"ts":1744834851760,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"registry"}
{"ts":1744834851760,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851761,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"registry"}
{"ts":1744834851761,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851763,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834851763,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"db","svc":"db"}
{"ts":1744834851763,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834851763,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"db","svc":"db"}
{"ts":1744834851764,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851764,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851764,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"registry"}
{"ts":1744834851764,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851765,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851765,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834851819,"level":"info","msg":"Database connection has been established successfully.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"db","svc":"db"}
{"ts":1744834851822,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"users","svc":"users"}
{"ts":1744834851822,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"users","svc":"users"}
{"ts":1744834851822,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851822,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851822,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851823,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851823,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851823,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851824,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851824,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851824,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851824,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851824,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851824,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851825,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851825,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851825,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851825,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851825,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851825,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851825,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851825,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851825,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851825,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851825,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851825,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851825,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851825,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851825,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851825,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851825,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851825,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851826,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851826,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851826,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851826,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"registry"}
{"ts":1744834851826,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851826,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"users","svc":"users"}
{"ts":1744834851827,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"users","svc":"users"}
{"ts":1744834851827,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"users","svc":"users"}
{"ts":1744834851827,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"users","svc":"users"}
{"ts":1744834851827,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834851827,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834851827,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851827,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851827,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851828,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851828,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851828,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851829,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851829,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851829,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851829,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851829,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851829,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851829,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851829,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851829,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851830,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851830,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851830,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851830,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851830,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851830,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851830,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851830,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851830,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851830,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851830,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851830,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851831,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851831,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851831,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851831,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851831,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851831,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851831,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"registry"}
{"ts":1744834851831,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851831,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834851831,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851831,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 78ms.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851902,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834851902,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834851902,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834851902,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851902,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 394ms.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834851902,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834852333,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834852335,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834852335,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834852335,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834852336,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834852336,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834852336,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834852336,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834852336,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834852336,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834852337,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834852337,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834852337,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834852337,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834891120,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834891120,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834891120,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834891120,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"db","svc":"db"}
{"ts":1744834891120,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"users","svc":"users"}
{"ts":1744834891121,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"$node","svc":"$node"}
{"ts":1744834891121,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"db","svc":"db"}
{"ts":1744834891121,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"auth","svc":"auth"}
{"ts":1744834891121,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"users","svc":"users"}
{"ts":1744834891121,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834891121,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"api","svc":"api"}
{"ts":1744834891122,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744834891122,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-27741","ns":"","mod":"broker"}
{"ts":1744835094589,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094589,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094589,"level":"info","msg":"Node ID: daniels-macbook-pro.local-28708","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094590,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"registry"}
{"ts":1744835094590,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"registry"}
{"ts":1744835094591,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094603,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094604,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094610,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835094610,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835094610,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094627,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094684,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094684,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094685,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094685,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094685,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094685,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094703,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094703,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094703,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094703,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094703,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094703,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094703,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094703,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094703,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094704,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094704,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094705,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094705,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094861,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094861,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094861,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094863,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094863,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094863,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094863,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094863,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094863,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094865,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094865,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094865,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094865,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094865,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094865,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094865,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094865,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094865,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094866,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094866,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094866,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094867,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094867,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094867,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094867,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094867,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094867,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094867,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094867,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094867,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094867,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094867,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094867,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094868,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835094868,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835094868,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094869,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"db","svc":"db"}
{"ts":1744835094907,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"db","svc":"db"}
{"ts":1744835094907,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094912,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094912,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094912,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094914,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094914,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094914,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094915,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094915,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094915,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094916,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094916,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094916,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094916,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094916,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094916,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094916,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094916,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094916,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094917,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094917,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094917,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094917,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094917,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094917,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094917,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094917,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094917,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094917,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094917,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094917,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094917,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094917,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094917,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094917,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"users","svc":"users"}
{"ts":1744835094917,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"users","svc":"users"}
{"ts":1744835094917,"level":"info","msg":"DB service found [object Object]","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"users","svc":"users"}
{"ts":1744835094921,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"users","svc":"users"}
{"ts":1744835094927,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835094927,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094927,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835094927,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"db","svc":"db"}
{"ts":1744835094927,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"users","svc":"users"}
{"ts":1744835094927,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835094927,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094927,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835094927,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"db","svc":"db"}
{"ts":1744835094927,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"users","svc":"users"}
{"ts":1744835094928,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"registry"}
{"ts":1744835094929,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094930,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"registry"}
{"ts":1744835094930,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094932,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835094932,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"db","svc":"db"}
{"ts":1744835094932,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835094932,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"db","svc":"db"}
{"ts":1744835094932,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094932,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094933,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"registry"}
{"ts":1744835094933,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094933,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094933,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835094984,"level":"info","msg":"Database connection has been established successfully.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"db","svc":"db"}
{"ts":1744835094997,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"users","svc":"users"}
{"ts":1744835094997,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"users","svc":"users"}
{"ts":1744835094997,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094997,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094997,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094998,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094998,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094998,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094998,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094998,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094998,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094999,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094999,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094999,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094999,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094999,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094999,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094999,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094999,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835094999,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095000,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095000,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095000,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095000,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095000,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095000,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095000,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095000,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095000,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095000,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095000,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095000,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095000,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095000,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095000,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095000,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"registry"}
{"ts":1744835095000,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095000,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"users","svc":"users"}
{"ts":1744835095001,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"users","svc":"users"}
{"ts":1744835095001,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"users","svc":"users"}
{"ts":1744835095001,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"users","svc":"users"}
{"ts":1744835095001,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835095001,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835095001,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095001,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095001,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095002,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095002,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095002,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095002,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095002,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095002,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095003,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095003,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095003,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095003,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095003,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095003,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095003,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095003,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095003,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095004,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095004,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095004,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095004,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095004,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095004,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095004,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095004,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095004,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095004,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095004,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095004,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095005,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095005,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095005,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095005,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"registry"}
{"ts":1744835095005,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095005,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835095005,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095005,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 84ms.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095081,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835095081,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835095081,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835095081,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095081,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 471ms.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095081,"level":"warn","msg":"Service 'user.create' is not registered.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095507,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835095508,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835095508,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835095508,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835095508,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835095508,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835095508,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835095508,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835095509,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835095509,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835095509,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835095509,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835095509,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835095509,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835190668,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835190669,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835190669,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835190669,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"db","svc":"db"}
{"ts":1744835190669,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"users","svc":"users"}
{"ts":1744835190671,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835190671,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"db","svc":"db"}
{"ts":1744835190671,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835190671,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"users","svc":"users"}
{"ts":1744835190671,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835190671,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"api","svc":"api"}
{"ts":1744835190672,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835190672,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-28708","ns":"","mod":"broker"}
{"ts":1744835350880,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835350881,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835350881,"level":"info","msg":"Node ID: daniels-macbook-pro.local-29420","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835350882,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"registry"}
{"ts":1744835350882,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"registry"}
{"ts":1744835350882,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835350891,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835350892,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835350897,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835350897,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835350898,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835350913,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835350972,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835350973,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835350973,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835350973,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835350973,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835350973,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835350990,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835350990,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835350990,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835350990,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835350990,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835350990,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835350990,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835350990,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835350991,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835350991,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835350991,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835350992,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835350992,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351144,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351144,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351144,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351146,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351146,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351146,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351147,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351147,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351147,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351148,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351148,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351148,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351148,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351148,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351148,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351148,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351148,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351148,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351149,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351149,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351149,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351149,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351149,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351149,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351149,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351149,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351149,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351150,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351150,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351150,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351150,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351150,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351150,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351150,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835351150,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835351151,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351152,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"db","svc":"db"}
{"ts":1744835351186,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"db","svc":"db"}
{"ts":1744835351186,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351188,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351188,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351188,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351192,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351192,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351192,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351192,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351192,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351192,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351193,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351193,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351193,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351193,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351193,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351193,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351194,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351194,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351194,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351194,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351194,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351194,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351194,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351194,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351194,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351194,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351194,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351194,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351194,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351194,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351194,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351195,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351195,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351195,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351195,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"users","svc":"users"}
{"ts":1744835351195,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"users","svc":"users"}
{"ts":1744835351201,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835351201,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835351201,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835351201,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"db","svc":"db"}
{"ts":1744835351201,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"users","svc":"users"}
{"ts":1744835351203,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"registry"}
{"ts":1744835351203,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351205,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"registry"}
{"ts":1744835351205,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351206,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835351206,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"db","svc":"db"}
{"ts":1744835351207,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835351207,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"registry"}
{"ts":1744835351207,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351208,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835351262,"level":"info","msg":"Database connection has been established successfully.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"db","svc":"db"}
{"ts":1744835351269,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"users","svc":"users"}
{"ts":1744835351269,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"users","svc":"users"}
{"ts":1744835351269,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"users","svc":"users"}
{"ts":1744835351269,"level":"info","msg":"DB service found [object Object]","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"users","svc":"users"}
{"ts":1744835351270,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351270,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351270,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351271,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351271,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351271,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351271,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351271,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351271,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351272,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351272,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351272,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351272,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351272,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351272,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351272,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351272,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351272,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351273,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351273,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351273,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351273,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351273,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351273,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351273,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351273,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351273,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351273,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351273,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351273,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351273,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351273,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351273,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351274,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"registry"}
{"ts":1744835351274,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351274,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"users","svc":"users"}
{"ts":1744835351274,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835351274,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835351274,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351274,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351274,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351275,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351275,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351275,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351275,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351275,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351275,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351276,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351276,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351276,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351276,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351276,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351276,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351276,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351276,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351276,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351277,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351277,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351277,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351277,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351277,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351277,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351277,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351277,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351277,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351277,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351277,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351277,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351277,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351277,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351277,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351278,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"registry"}
{"ts":1744835351278,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351278,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835351278,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351278,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 83ms.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351778,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835351779,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835351779,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835351779,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835351780,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835351780,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835351780,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835351780,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835351780,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835351780,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835351780,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835351780,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835351780,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835351780,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835485829,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835485829,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835485829,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835485829,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"db","svc":"db"}
{"ts":1744835485829,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"users","svc":"users"}
{"ts":1744835485831,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835485831,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"db","svc":"db"}
{"ts":1744835485831,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835485831,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"users","svc":"users"}
{"ts":1744835485831,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835485831,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"api","svc":"api"}
{"ts":1744835485832,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835485832,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-29420","ns":"","mod":"broker"}
{"ts":1744835505735,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505736,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505736,"level":"info","msg":"Node ID: daniels-macbook-pro.local-29762","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505736,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"registry"}
{"ts":1744835505737,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"registry"}
{"ts":1744835505737,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505743,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505745,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505749,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835505749,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835505749,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505766,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505822,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835505822,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835505822,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835505823,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835505823,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835505823,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835505841,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835505841,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835505841,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835505841,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835505841,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835505841,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835505841,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835505841,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835505841,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835505842,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835505842,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835505843,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835505843,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505982,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505982,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505982,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505984,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505984,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505984,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505985,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505985,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505985,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505986,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505986,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505986,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505986,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505986,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505986,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505986,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505986,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505986,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505987,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505987,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505987,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505988,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505988,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505988,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505988,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505988,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505988,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505988,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505988,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505988,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505988,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505988,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505988,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505989,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835505989,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835505989,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835505993,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"db","svc":"db"}
{"ts":1744835505994,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"db","svc":"db"}
{"ts":1744835506032,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"db","svc":"db"}
{"ts":1744835506032,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506037,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506037,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506037,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506038,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506038,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506038,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506038,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506038,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506038,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506039,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506039,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506039,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506039,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506039,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506039,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506039,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506039,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506039,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506040,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506040,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506040,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506040,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506040,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506040,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506040,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506040,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506040,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506040,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506040,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506040,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506040,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506040,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506040,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506040,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"users","svc":"users"}
{"ts":1744835506041,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"users","svc":"users"}
{"ts":1744835506047,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835506047,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835506047,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835506047,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"db","svc":"db"}
{"ts":1744835506047,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"users","svc":"users"}
{"ts":1744835506050,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"registry"}
{"ts":1744835506050,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506053,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835506053,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835506054,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"registry"}
{"ts":1744835506054,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506058,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"registry"}
{"ts":1744835506058,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506058,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835506058,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"db","svc":"db"}
{"ts":1744835506117,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT', dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true }","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506118,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"db","svc":"db"}
{"ts":1744835506132,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"users","svc":"users"}
{"ts":1744835506132,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"users","svc":"users"}
{"ts":1744835506132,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"users","svc":"users"}
{"ts":1744835506132,"level":"info","msg":"DB service found null","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"users","svc":"users"}
{"ts":1744835506133,"level":"error","msg":"Unable to start all services. TypeError: Cannot read properties of null (reading 'define')\n    at module.exports (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/models/user.model.js:4:20)\n    at Service.started (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:246:23)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/utils.js:212:22\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/service.js:305:39\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506133,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835506133,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835506133,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506134,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506134,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506135,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506135,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506135,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506135,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506135,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506135,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506136,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506136,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506136,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506136,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506136,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506136,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506136,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506136,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506136,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506137,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506137,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506137,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506137,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506137,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506137,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506137,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506137,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506137,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506137,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506137,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506137,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506137,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506137,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506137,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506137,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"registry"}
{"ts":1744835506137,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506137,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835506638,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835506639,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835506639,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835506639,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835506640,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835506640,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835506640,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835506640,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835506640,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835506640,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835506640,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835506640,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835506641,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835506641,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835513514,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835513527,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835513528,"level":"warn","msg":"Service 'users.login' is not registered.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835513528,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'd8d3983c-a5d9-4f6a-bf86-dd691a63e28e' } ServiceUnavailableError: Service unavailable\n    at Service.aliasHandler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:556:13)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:33\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) {\n  code: 503,\n  type: undefined,\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835513528,"level":"error","msg":"   Request error! ServiceUnavailableError : Service unavailable \n ServiceUnavailableError: Service unavailable\n    at Service.aliasHandler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:556:13)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:33\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) \nData: ","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835589840,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835589840,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835589840,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835589840,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"db","svc":"db"}
{"ts":1744835589840,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"users","svc":"users"}
{"ts":1744835589843,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835589843,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835589843,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"users","svc":"users"}
{"ts":1744835589843,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"db","svc":"db"}
{"ts":1744835589844,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835589844,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"api","svc":"api"}
{"ts":1744835589844,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835589844,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-29762","ns":"","mod":"broker"}
{"ts":1744835590779,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835590779,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835590779,"level":"info","msg":"Node ID: daniels-macbook-pro.local-29925","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835590780,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"registry"}
{"ts":1744835590780,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"registry"}
{"ts":1744835590780,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835590789,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835590790,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835590795,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835590795,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835590795,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835590804,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835590865,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835590866,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835590866,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835590866,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835590866,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835590866,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835590915,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835590916,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835590916,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835590917,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835590917,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835590917,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835590917,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835590917,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835590918,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835590919,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835590919,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835590921,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835590921,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591062,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591062,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591062,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591063,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591063,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591063,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591064,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591064,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591064,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591065,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591065,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591065,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591065,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591065,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591065,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591066,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591066,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591066,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591066,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591066,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591066,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591067,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591067,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591067,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591067,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591067,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591067,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591067,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591067,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591067,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591067,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591067,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591067,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591068,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835591068,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835591068,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591072,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"db","svc":"db"}
{"ts":1744835591072,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"db","svc":"db"}
{"ts":1744835591103,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"db","svc":"db"}
{"ts":1744835591103,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591108,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591108,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591108,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591109,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591109,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591109,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591110,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591110,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591110,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591110,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591110,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591110,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591110,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591110,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591110,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591110,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591110,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591110,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591111,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591111,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591111,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591111,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591111,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591111,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591111,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591111,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591111,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591111,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591111,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591111,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591111,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591111,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591111,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591112,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"users","svc":"users"}
{"ts":1744835591112,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"users","svc":"users"}
{"ts":1744835591117,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835591117,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835591117,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835591117,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"db","svc":"db"}
{"ts":1744835591117,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"users","svc":"users"}
{"ts":1744835591121,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"registry"}
{"ts":1744835591121,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591123,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835591124,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835591125,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"registry"}
{"ts":1744835591125,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591128,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"registry"}
{"ts":1744835591128,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591128,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835591128,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"db","svc":"db"}
{"ts":1744835591175,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT', dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true }","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591176,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"db","svc":"db"}
{"ts":1744835591188,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"users","svc":"users"}
{"ts":1744835591188,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"users","svc":"users"}
{"ts":1744835591189,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"users","svc":"users"}
{"ts":1744835591189,"level":"info","msg":"DB service found null","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"users","svc":"users"}
{"ts":1744835591189,"level":"error","msg":"Unable to start all services. TypeError: Cannot read properties of null (reading 'define')\n    at module.exports (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/models/user.model.js:4:20)\n    at Service.started (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:246:23)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/utils.js:212:22\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer/src/service.js:305:39\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591190,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835591190,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835591190,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591190,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591190,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591191,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591191,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591191,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591191,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591191,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591191,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591192,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591192,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591192,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591192,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591192,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591192,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591192,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591192,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591192,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591193,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591193,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591193,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591193,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591193,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591193,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591193,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591193,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591193,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591193,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591193,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591193,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591193,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591193,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591193,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591194,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"registry"}
{"ts":1744835591194,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591194,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835591695,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835591697,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835591697,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835591697,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835591697,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835591697,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835591697,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835591697,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835591697,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835591697,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835591697,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835591697,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835591698,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835591698,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835644222,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835644222,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835644222,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835644222,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"db","svc":"db"}
{"ts":1744835644222,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"users","svc":"users"}
{"ts":1744835644225,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835644225,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835644225,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"users","svc":"users"}
{"ts":1744835644225,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"db","svc":"db"}
{"ts":1744835644225,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835644225,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"api","svc":"api"}
{"ts":1744835644225,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835644225,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-29925","ns":"","mod":"broker"}
{"ts":1744835862001,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862002,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862002,"level":"info","msg":"Node ID: daniels-macbook-pro.local-30665","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862003,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"registry"}
{"ts":1744835862003,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"registry"}
{"ts":1744835862004,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862013,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862014,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862019,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835862019,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835862019,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862035,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862094,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862095,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862095,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862095,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862095,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862096,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862113,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862113,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862113,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862113,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862113,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862113,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862114,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862114,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862114,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862114,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862114,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862115,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862115,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862264,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862264,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862264,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862265,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862265,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862265,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862266,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862266,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862266,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862267,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862267,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862267,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862268,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862268,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862268,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862268,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862268,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862268,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862269,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862269,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862269,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862269,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862269,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862269,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862269,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862269,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862269,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862269,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862269,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862269,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862270,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862270,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862270,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862270,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835862270,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835862270,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862274,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"db","svc":"db"}
{"ts":1744835862275,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"db","svc":"db"}
{"ts":1744835862316,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"db","svc":"db"}
{"ts":1744835862316,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862318,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862318,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862318,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862319,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862319,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862319,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862320,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862320,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862320,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862320,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862320,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862320,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862320,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862320,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862320,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862321,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862321,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862321,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862321,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862321,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862321,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862321,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862321,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862321,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862322,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862322,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862322,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862322,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862322,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862322,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862322,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862322,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862322,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862322,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"users","svc":"users"}
{"ts":1744835862322,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"users","svc":"users"}
{"ts":1744835862322,"level":"info","msg":"DB service found [object Object]","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"users","svc":"users"}
{"ts":1744835862325,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"users","svc":"users"}
{"ts":1744835862333,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835862333,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862333,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835862333,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"db","svc":"db"}
{"ts":1744835862333,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"users","svc":"users"}
{"ts":1744835862337,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"registry"}
{"ts":1744835862337,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862340,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835862341,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862341,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"registry"}
{"ts":1744835862341,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862345,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"registry"}
{"ts":1744835862345,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862345,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862345,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"db","svc":"db"}
{"ts":1744835862418,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862422,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_status' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862424,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862425,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835862425,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835862425,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862425,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862425,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862428,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862428,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862428,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862428,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862428,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862428,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862433,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862433,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862433,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862433,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862433,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862433,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862433,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862433,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862433,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862434,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862435,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862435,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862435,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862435,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862435,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862435,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862435,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862435,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862436,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862436,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862436,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862436,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862436,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862436,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862436,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"registry"}
{"ts":1744835862436,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862436,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835862437,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"users","svc":"users"}
{"ts":1744835862437,"level":"info","msg":"***************************** - DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"users","svc":"users"}
{"ts":1744835862437,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862437,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862437,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862441,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862441,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862441,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862443,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862443,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862443,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862445,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862445,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862445,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862446,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862446,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862446,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862446,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862446,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862446,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862446,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862446,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862446,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862446,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862446,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862446,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862446,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862446,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862446,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862446,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862446,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862447,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862447,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862447,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862447,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862447,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"registry"}
{"ts":1744835862447,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862447,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"users","svc":"users"}
{"ts":1744835862447,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862448,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 121ms.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862569,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862576,"level":"info","msg":"Executing (default): ALTER TABLE \"public\".\"users\" ADD COLUMN \"salt\" VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862584,"level":"info","msg":"Executing (default): DO 'BEGIN CREATE TYPE \"public\".\"enum_users_status\" AS ENUM(''active'', ''inactive''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"public\".\"users\" ADD COLUMN \"status\" \"public\".\"enum_users_status\" DEFAULT 'active'; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862594,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"username\");ALTER TABLE \"users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862604,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"email\");ALTER TABLE \"users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862609,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862610,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862613,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862615,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862617,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"db","svc":"db"}
{"ts":1744835862949,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862950,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862950,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862950,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862950,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862950,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862950,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862951,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862951,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862951,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862951,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862951,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862951,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862951,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862951,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862951,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862951,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835862951,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835862951,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835877221,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835877229,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835877230,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835877230,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835877230,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: 'e9e0c542-1e34-4600-b3d5-8c9846c856bb' }","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835877327,"level":"info","msg":"USER : [object SequelizeInstance:user]","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"users","svc":"users"}
{"ts":1744835877391,"level":"info","msg":"<= 200 POST /api/users/login [+170.917 ms]","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835893536,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835893536,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835893536,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835893536,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"db","svc":"db"}
{"ts":1744835893536,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"users","svc":"users"}
{"ts":1744835893540,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"$node","svc":"$node"}
{"ts":1744835893540,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"auth","svc":"auth"}
{"ts":1744835893540,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"users","svc":"users"}
{"ts":1744835893540,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"db","svc":"db"}
{"ts":1744835893540,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835893540,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"api","svc":"api"}
{"ts":1744835893541,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744835893541,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-30665","ns":"","mod":"broker"}
{"ts":1744836085327,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085327,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085327,"level":"info","msg":"Node ID: daniels-macbook-pro.local-31151","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085328,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"registry"}
{"ts":1744836085328,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"registry"}
{"ts":1744836085329,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085339,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085340,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085345,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836085345,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836085346,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085366,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085427,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836085427,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836085427,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836085427,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836085428,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836085428,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836085445,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836085445,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836085445,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836085445,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836085445,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836085445,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836085446,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836085446,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836085446,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836085446,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836085446,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836085447,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836085447,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085594,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085594,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085594,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085595,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085595,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085595,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085596,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085596,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085596,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085597,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085597,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085597,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085597,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085597,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085597,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085597,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085597,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085597,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085598,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085598,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085598,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085598,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085598,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085598,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085599,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085599,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085599,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085599,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085599,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085599,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085599,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085599,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085599,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085600,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836085600,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836085600,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085604,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"db","svc":"db"}
{"ts":1744836085604,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"db","svc":"db"}
{"ts":1744836085644,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"db","svc":"db"}
{"ts":1744836085644,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085649,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085649,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085649,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085650,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085650,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085650,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085650,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085650,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085650,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085651,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085651,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085651,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085651,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085651,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085651,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085651,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085651,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085651,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085652,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085652,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085652,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085652,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085652,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085652,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085652,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085652,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085652,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085652,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085652,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085652,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085652,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085652,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085652,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085652,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"users","svc":"users"}
{"ts":1744836085653,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"users","svc":"users"}
{"ts":1744836085653,"level":"info","msg":"DB service found [object Object]","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"users","svc":"users"}
{"ts":1744836085656,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"users","svc":"users"}
{"ts":1744836085663,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836085663,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836085663,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836085663,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"db","svc":"db"}
{"ts":1744836085663,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"users","svc":"users"}
{"ts":1744836085667,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"registry"}
{"ts":1744836085667,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085669,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836085670,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836085671,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"registry"}
{"ts":1744836085671,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085674,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"registry"}
{"ts":1744836085674,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085674,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836085674,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"db","svc":"db"}
{"ts":1744836085723,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085725,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_status' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085727,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085740,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836085740,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836085740,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085740,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085740,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085741,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085741,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085741,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085742,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085742,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085742,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085743,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085743,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085743,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085743,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085743,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085743,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085743,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085743,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085743,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085743,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085743,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085743,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085743,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085743,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085743,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085743,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085743,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085743,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085744,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085744,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085744,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085744,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085744,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085744,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085745,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"registry"}
{"ts":1744836085745,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085745,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836085746,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085750,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"users","svc":"users"}
{"ts":1744836085750,"level":"info","msg":"***************************** - DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"users","svc":"users"}
{"ts":1744836085750,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085750,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085750,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085751,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085751,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085751,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085751,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085751,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085751,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085752,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085752,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085752,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085752,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085752,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085752,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085752,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085752,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085752,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085753,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085753,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085753,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085753,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085753,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085753,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085753,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085753,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085753,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085753,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085753,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085753,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085753,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085753,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085753,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085753,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"registry"}
{"ts":1744836085753,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085753,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"users","svc":"users"}
{"ts":1744836085753,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085753,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 97ms.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085830,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"username\");ALTER TABLE \"users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085838,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"email\");ALTER TABLE \"users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085842,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085843,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085845,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085845,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"salt\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085847,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"status\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"status\" SET DEFAULT 'active';DO 'BEGIN CREATE TYPE \"public\".\"enum_users_status\" AS ENUM(''active'', ''inactive''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"users\" ALTER COLUMN \"status\" TYPE \"public\".\"enum_users_status\" USING (\"status\"::\"public\".\"enum_users_status\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085851,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836085853,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"db","svc":"db"}
{"ts":1744836086255,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836086256,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836086256,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836086256,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836086256,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836086256,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836086256,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836086256,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836086256,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836086256,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836086256,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836086256,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836086256,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836086256,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836086256,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836086256,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836086257,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836086257,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836086257,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836090640,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836090648,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836090648,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836090648,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836090648,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: 'c6f8c4c3-42a2-4610-a2b3-6b6281823032' }","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836090654,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: 'c6f8c4c3-42a2-4610-a2b3-6b6281823032' } Error\n    at Query.run (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.select (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-interface.js:407:12)\n    at async model.findAll (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1140:21)\n    at async model.findOne (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1240:12)\n    at async Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:116:30)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  name: 'SequelizeDatabaseError',\n  parent: error: column model.email does not exist\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at Socket.emit (node:domain:488:12)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 109,\n    severity: 'ERROR',\n    code: '42703',\n    detail: undefined,\n    hint: undefined,\n    position: '79',\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: undefined,\n    table: undefined,\n    column: undefined,\n    dataType: undefined,\n    constraint: undefined,\n    file: 'parse_relation.c',\n    line: '3722',\n    routine: 'errorMissingColumn',\n    sql: `SELECT \"id\", \"createdAt\", \"updatedAt\" FROM \"public\".\"models\" AS \"model\" WHERE \"model\".\"email\" = 'john@example.com' LIMIT 1;`,\n    parameters: undefined\n  },\n  original: error: column model.email does not exist\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at Socket.emit (node:domain:488:12)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 109,\n    severity: 'ERROR',\n    code: '42703',\n    detail: undefined,\n    hint: undefined,\n    position: '79',\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: undefined,\n    table: undefined,\n    column: undefined,\n    dataType: undefined,\n    constraint: undefined,\n    file: 'parse_relation.c',\n    line: '3722',\n    routine: 'errorMissingColumn',\n    sql: `SELECT \"id\", \"createdAt\", \"updatedAt\" FROM \"public\".\"models\" AS \"model\" WHERE \"model\".\"email\" = 'john@example.com' LIMIT 1;`,\n    parameters: undefined\n  },\n  sql: `SELECT \"id\", \"createdAt\", \"updatedAt\" FROM \"public\".\"models\" AS \"model\" WHERE \"model\".\"email\" = 'john@example.com' LIMIT 1;`,\n  parameters: {}\n}","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836090655,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'c6f8c4c3-42a2-4610-a2b3-6b6281823032' } Error\n    at Query.run (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.select (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-interface.js:407:12)\n    at async model.findAll (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1140:21)\n    at async model.findOne (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1240:12)\n    at async Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:116:30)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  name: 'SequelizeDatabaseError',\n  parent: error: column model.email does not exist\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at Socket.emit (node:domain:488:12)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 109,\n    severity: 'ERROR',\n    code: '42703',\n    detail: undefined,\n    hint: undefined,\n    position: '79',\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: undefined,\n    table: undefined,\n    column: undefined,\n    dataType: undefined,\n    constraint: undefined,\n    file: 'parse_relation.c',\n    line: '3722',\n    routine: 'errorMissingColumn',\n    sql: `SELECT \"id\", \"createdAt\", \"updatedAt\" FROM \"public\".\"models\" AS \"model\" WHERE \"model\".\"email\" = 'john@example.com' LIMIT 1;`,\n    parameters: undefined\n  },\n  original: error: column model.email does not exist\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at Socket.emit (node:domain:488:12)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 109,\n    severity: 'ERROR',\n    code: '42703',\n    detail: undefined,\n    hint: undefined,\n    position: '79',\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: undefined,\n    table: undefined,\n    column: undefined,\n    dataType: undefined,\n    constraint: undefined,\n    file: 'parse_relation.c',\n    line: '3722',\n    routine: 'errorMissingColumn',\n    sql: `SELECT \"id\", \"createdAt\", \"updatedAt\" FROM \"public\".\"models\" AS \"model\" WHERE \"model\".\"email\" = 'john@example.com' LIMIT 1;`,\n    parameters: undefined\n  },\n  sql: `SELECT \"id\", \"createdAt\", \"updatedAt\" FROM \"public\".\"models\" AS \"model\" WHERE \"model\".\"email\" = 'john@example.com' LIMIT 1;`,\n  parameters: {}\n}","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836090655,"level":"error","msg":"   Request error! SequelizeDatabaseError : column model.email does not exist \n Error\n    at Query.run (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.select (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-interface.js:407:12)\n    at async model.findAll (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1140:21)\n    at async model.findOne (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1240:12)\n    at async Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:116:30)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 \nData: ","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836114549,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836114549,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836114549,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836114550,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"db","svc":"db"}
{"ts":1744836114550,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"users","svc":"users"}
{"ts":1744836114551,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836114551,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836114551,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"users","svc":"users"}
{"ts":1744836114551,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"db","svc":"db"}
{"ts":1744836114551,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836114551,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"api","svc":"api"}
{"ts":1744836114552,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836114552,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-31151","ns":"","mod":"broker"}
{"ts":1744836115588,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115588,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115589,"level":"info","msg":"Node ID: daniels-macbook-pro.local-31282","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115589,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"registry"}
{"ts":1744836115589,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"registry"}
{"ts":1744836115590,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115596,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115597,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115601,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836115602,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836115602,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115611,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115673,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836115673,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836115673,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836115673,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836115673,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836115674,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836115693,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836115693,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836115693,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836115693,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836115694,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836115694,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836115694,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836115694,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836115694,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836115694,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836115694,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836115696,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836115696,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115833,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115833,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115833,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115835,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115835,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115835,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115835,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115835,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115835,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115836,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115836,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115836,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115837,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115837,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115837,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115837,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115837,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115837,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115838,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115838,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115838,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115838,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115838,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115838,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115838,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115838,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115838,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115838,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115838,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115838,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115838,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115838,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115838,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115839,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836115839,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836115839,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115843,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"db","svc":"db"}
{"ts":1744836115843,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"db","svc":"db"}
{"ts":1744836115882,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"db","svc":"db"}
{"ts":1744836115882,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115883,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115883,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115883,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115884,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115884,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115884,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115884,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115884,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115884,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115885,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115885,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115885,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115885,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115885,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115885,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115885,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115885,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115885,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115886,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115886,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115886,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115886,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115886,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115886,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115886,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115886,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115886,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115886,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115886,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115886,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115886,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115886,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115886,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115886,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"users","svc":"users"}
{"ts":1744836115887,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"users","svc":"users"}
{"ts":1744836115887,"level":"info","msg":"DB service found [object Object]","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"users","svc":"users"}
{"ts":1744836115888,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"users","svc":"users"}
{"ts":1744836115894,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836115894,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836115894,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836115894,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"db","svc":"db"}
{"ts":1744836115894,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"users","svc":"users"}
{"ts":1744836115898,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"registry"}
{"ts":1744836115898,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115900,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836115901,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836115902,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"registry"}
{"ts":1744836115902,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115905,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"registry"}
{"ts":1744836115905,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115905,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836115905,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"db","svc":"db"}
{"ts":1744836115962,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115964,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"users","svc":"users"}
{"ts":1744836115964,"level":"info","msg":"***************************** - DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"users","svc":"users"}
{"ts":1744836115964,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115964,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115964,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115965,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115965,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115965,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115966,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115966,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115966,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115966,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115966,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115966,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115966,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115966,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115966,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115967,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115967,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115967,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115967,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115967,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115967,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115967,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115967,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115967,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115967,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115967,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115967,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115968,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115968,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115968,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115968,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115968,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115968,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115968,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"registry"}
{"ts":1744836115968,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115968,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"users","svc":"users"}
{"ts":1744836115970,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_status' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115972,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115976,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836115976,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836115976,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115976,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115976,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115977,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115977,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115977,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115978,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115978,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115978,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115978,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115979,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115979,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115979,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115979,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115979,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115979,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115979,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115979,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115979,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115979,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115979,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115979,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115979,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115979,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115979,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115979,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115979,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115980,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115980,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115980,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115980,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115980,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115980,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115980,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"registry"}
{"ts":1744836115980,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115980,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836115980,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836115980,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 92ms.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836116048,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836116052,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"username\");ALTER TABLE \"users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836116060,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"email\");ALTER TABLE \"users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836116066,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836116067,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836116069,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836116070,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"salt\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836116071,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"status\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"status\" SET DEFAULT 'active';DO 'BEGIN CREATE TYPE \"public\".\"enum_users_status\" AS ENUM(''active'', ''inactive''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"users\" ALTER COLUMN \"status\" TYPE \"public\".\"enum_users_status\" USING (\"status\"::\"public\".\"enum_users_status\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836116075,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836116077,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"db","svc":"db"}
{"ts":1744836116480,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836116481,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836116482,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836116482,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836116482,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836116482,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836116482,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836116482,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836116482,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836116482,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836116482,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836116482,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836116482,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836116482,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836116482,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836116482,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836116482,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836116483,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836116483,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836118262,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836118271,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836118271,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836118271,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836118271,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: '5d4c68e4-5095-44ea-97c7-7ac275558292' }","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836118277,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: '5d4c68e4-5095-44ea-97c7-7ac275558292' } Error\n    at Query.run (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.select (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-interface.js:407:12)\n    at async model.findAll (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1140:21)\n    at async model.findOne (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1240:12)\n    at async Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:116:30)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  name: 'SequelizeDatabaseError',\n  parent: error: column model.email does not exist\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at Socket.emit (node:domain:488:12)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 109,\n    severity: 'ERROR',\n    code: '42703',\n    detail: undefined,\n    hint: undefined,\n    position: '79',\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: undefined,\n    table: undefined,\n    column: undefined,\n    dataType: undefined,\n    constraint: undefined,\n    file: 'parse_relation.c',\n    line: '3722',\n    routine: 'errorMissingColumn',\n    sql: `SELECT \"id\", \"createdAt\", \"updatedAt\" FROM \"public\".\"models\" AS \"model\" WHERE \"model\".\"email\" = 'john@example.com' LIMIT 1;`,\n    parameters: undefined\n  },\n  original: error: column model.email does not exist\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at Socket.emit (node:domain:488:12)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 109,\n    severity: 'ERROR',\n    code: '42703',\n    detail: undefined,\n    hint: undefined,\n    position: '79',\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: undefined,\n    table: undefined,\n    column: undefined,\n    dataType: undefined,\n    constraint: undefined,\n    file: 'parse_relation.c',\n    line: '3722',\n    routine: 'errorMissingColumn',\n    sql: `SELECT \"id\", \"createdAt\", \"updatedAt\" FROM \"public\".\"models\" AS \"model\" WHERE \"model\".\"email\" = 'john@example.com' LIMIT 1;`,\n    parameters: undefined\n  },\n  sql: `SELECT \"id\", \"createdAt\", \"updatedAt\" FROM \"public\".\"models\" AS \"model\" WHERE \"model\".\"email\" = 'john@example.com' LIMIT 1;`,\n  parameters: {}\n}","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836118278,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '5d4c68e4-5095-44ea-97c7-7ac275558292' } Error\n    at Query.run (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.select (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-interface.js:407:12)\n    at async model.findAll (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1140:21)\n    at async model.findOne (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1240:12)\n    at async Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:116:30)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  name: 'SequelizeDatabaseError',\n  parent: error: column model.email does not exist\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at Socket.emit (node:domain:488:12)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 109,\n    severity: 'ERROR',\n    code: '42703',\n    detail: undefined,\n    hint: undefined,\n    position: '79',\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: undefined,\n    table: undefined,\n    column: undefined,\n    dataType: undefined,\n    constraint: undefined,\n    file: 'parse_relation.c',\n    line: '3722',\n    routine: 'errorMissingColumn',\n    sql: `SELECT \"id\", \"createdAt\", \"updatedAt\" FROM \"public\".\"models\" AS \"model\" WHERE \"model\".\"email\" = 'john@example.com' LIMIT 1;`,\n    parameters: undefined\n  },\n  original: error: column model.email does not exist\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at Socket.emit (node:domain:488:12)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 109,\n    severity: 'ERROR',\n    code: '42703',\n    detail: undefined,\n    hint: undefined,\n    position: '79',\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: undefined,\n    table: undefined,\n    column: undefined,\n    dataType: undefined,\n    constraint: undefined,\n    file: 'parse_relation.c',\n    line: '3722',\n    routine: 'errorMissingColumn',\n    sql: `SELECT \"id\", \"createdAt\", \"updatedAt\" FROM \"public\".\"models\" AS \"model\" WHERE \"model\".\"email\" = 'john@example.com' LIMIT 1;`,\n    parameters: undefined\n  },\n  sql: `SELECT \"id\", \"createdAt\", \"updatedAt\" FROM \"public\".\"models\" AS \"model\" WHERE \"model\".\"email\" = 'john@example.com' LIMIT 1;`,\n  parameters: {}\n}","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836118278,"level":"error","msg":"   Request error! SequelizeDatabaseError : column model.email does not exist \n Error\n    at Query.run (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.select (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-interface.js:407:12)\n    at async model.findAll (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1140:21)\n    at async model.findOne (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1240:12)\n    at async Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:116:30)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 \nData: ","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836193153,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836193154,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836193154,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836193154,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836193155,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: 'fbd2f10d-c901-4b38-aba1-5dc320bdc35b' }","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836193201,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: 'fbd2f10d-c901-4b38-aba1-5dc320bdc35b' } Error\n    at Query.run (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.select (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-interface.js:407:12)\n    at async model.findAll (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1140:21)\n    at async model.findOne (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1240:12)\n    at async Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:116:30)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  name: 'SequelizeDatabaseError',\n  parent: error: column model.email does not exist\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at Socket.emit (node:domain:488:12)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 109,\n    severity: 'ERROR',\n    code: '42703',\n    detail: undefined,\n    hint: undefined,\n    position: '79',\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: undefined,\n    table: undefined,\n    column: undefined,\n    dataType: undefined,\n    constraint: undefined,\n    file: 'parse_relation.c',\n    line: '3722',\n    routine: 'errorMissingColumn',\n    sql: `SELECT \"id\", \"createdAt\", \"updatedAt\" FROM \"public\".\"models\" AS \"model\" WHERE \"model\".\"email\" = 'john@example.com' LIMIT 1;`,\n    parameters: undefined\n  },\n  original: error: column model.email does not exist\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at Socket.emit (node:domain:488:12)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 109,\n    severity: 'ERROR',\n    code: '42703',\n    detail: undefined,\n    hint: undefined,\n    position: '79',\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: undefined,\n    table: undefined,\n    column: undefined,\n    dataType: undefined,\n    constraint: undefined,\n    file: 'parse_relation.c',\n    line: '3722',\n    routine: 'errorMissingColumn',\n    sql: `SELECT \"id\", \"createdAt\", \"updatedAt\" FROM \"public\".\"models\" AS \"model\" WHERE \"model\".\"email\" = 'john@example.com' LIMIT 1;`,\n    parameters: undefined\n  },\n  sql: `SELECT \"id\", \"createdAt\", \"updatedAt\" FROM \"public\".\"models\" AS \"model\" WHERE \"model\".\"email\" = 'john@example.com' LIMIT 1;`,\n  parameters: {}\n}","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836193202,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'fbd2f10d-c901-4b38-aba1-5dc320bdc35b' } Error\n    at Query.run (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.select (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-interface.js:407:12)\n    at async model.findAll (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1140:21)\n    at async model.findOne (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1240:12)\n    at async Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:116:30)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  name: 'SequelizeDatabaseError',\n  parent: error: column model.email does not exist\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at Socket.emit (node:domain:488:12)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 109,\n    severity: 'ERROR',\n    code: '42703',\n    detail: undefined,\n    hint: undefined,\n    position: '79',\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: undefined,\n    table: undefined,\n    column: undefined,\n    dataType: undefined,\n    constraint: undefined,\n    file: 'parse_relation.c',\n    line: '3722',\n    routine: 'errorMissingColumn',\n    sql: `SELECT \"id\", \"createdAt\", \"updatedAt\" FROM \"public\".\"models\" AS \"model\" WHERE \"model\".\"email\" = 'john@example.com' LIMIT 1;`,\n    parameters: undefined\n  },\n  original: error: column model.email does not exist\n      at Parser.parseErrorMessage (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:283:98)\n      at Parser.handlePacket (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:122:29)\n      at Parser.parse (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/parser.js:35:38)\n      at Socket.<anonymous> (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/pg-protocol/dist/index.js:11:42)\n      at Socket.emit (node:events:519:28)\n      at Socket.emit (node:domain:488:12)\n      at addChunk (node:internal/streams/readable:559:12)\n      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n      at Readable.push (node:internal/streams/readable:390:5)\n      at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {\n    length: 109,\n    severity: 'ERROR',\n    code: '42703',\n    detail: undefined,\n    hint: undefined,\n    position: '79',\n    internalPosition: undefined,\n    internalQuery: undefined,\n    where: undefined,\n    schema: undefined,\n    table: undefined,\n    column: undefined,\n    dataType: undefined,\n    constraint: undefined,\n    file: 'parse_relation.c',\n    line: '3722',\n    routine: 'errorMissingColumn',\n    sql: `SELECT \"id\", \"createdAt\", \"updatedAt\" FROM \"public\".\"models\" AS \"model\" WHERE \"model\".\"email\" = 'john@example.com' LIMIT 1;`,\n    parameters: undefined\n  },\n  sql: `SELECT \"id\", \"createdAt\", \"updatedAt\" FROM \"public\".\"models\" AS \"model\" WHERE \"model\".\"email\" = 'john@example.com' LIMIT 1;`,\n  parameters: {}\n}","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836193202,"level":"error","msg":"   Request error! SequelizeDatabaseError : column model.email does not exist \n Error\n    at Query.run (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.select (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/dialects/abstract/query-interface.js:407:12)\n    at async model.findAll (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1140:21)\n    at async model.findOne (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/sequelize/lib/model.js:1240:12)\n    at async Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:116:30)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 \nData: ","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836332515,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836332515,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836332515,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836332515,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"db","svc":"db"}
{"ts":1744836332516,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"users","svc":"users"}
{"ts":1744836332518,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836332520,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836332520,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"users","svc":"users"}
{"ts":1744836332520,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"db","svc":"db"}
{"ts":1744836332520,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836332520,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"api","svc":"api"}
{"ts":1744836332521,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836332521,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-31282","ns":"","mod":"broker"}
{"ts":1744836333423,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333423,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333423,"level":"info","msg":"Node ID: daniels-macbook-pro.local-31511","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333424,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"registry"}
{"ts":1744836333424,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"registry"}
{"ts":1744836333424,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333433,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333434,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333438,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836333439,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836333439,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333447,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333506,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836333507,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836333507,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836333507,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836333507,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836333507,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836333525,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836333526,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836333526,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836333526,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836333526,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836333526,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836333526,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836333526,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836333526,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836333526,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836333526,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836333527,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836333527,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333669,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333669,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333669,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333670,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333670,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333670,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333671,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333671,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333671,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333672,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333672,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333672,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333672,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333672,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333672,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333672,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333672,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333672,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333673,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333673,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333673,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333673,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333673,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333673,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333673,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333673,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333673,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333674,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333674,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333674,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333674,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333674,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333674,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333674,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836333675,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836333675,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333679,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"db","svc":"db"}
{"ts":1744836333679,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"db","svc":"db"}
{"ts":1744836333716,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"db","svc":"db"}
{"ts":1744836333716,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333719,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333719,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333719,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333719,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333719,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333719,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333720,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333720,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333720,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333721,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333721,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333721,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333721,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333721,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333721,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333721,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333721,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333721,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333721,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333721,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333721,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333722,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333722,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333722,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333722,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333722,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333722,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333722,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333722,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333722,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333722,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333722,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333722,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333722,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"users","svc":"users"}
{"ts":1744836333722,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"users","svc":"users"}
{"ts":1744836333723,"level":"info","msg":"DB service found [object Object]","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"users","svc":"users"}
{"ts":1744836333723,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"users","svc":"users"}
{"ts":1744836333730,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836333730,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836333730,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836333730,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"db","svc":"db"}
{"ts":1744836333730,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"users","svc":"users"}
{"ts":1744836333734,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"registry"}
{"ts":1744836333734,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333735,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836333736,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836333737,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"registry"}
{"ts":1744836333737,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333740,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"registry"}
{"ts":1744836333740,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333740,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836333740,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"db","svc":"db"}
{"ts":1744836333813,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333816,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_status' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333817,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836333817,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836333817,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333817,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333817,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333818,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333818,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333818,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333819,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333819,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333819,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333820,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333820,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333820,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333820,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333820,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333820,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333820,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333820,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333820,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333820,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333820,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333820,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333820,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333820,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333820,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333820,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333820,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333820,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333821,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333821,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333821,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333821,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333821,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333821,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333821,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"registry"}
{"ts":1744836333821,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333821,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836333822,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333823,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"users","svc":"users"}
{"ts":1744836333823,"level":"info","msg":"***************************** - DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"users","svc":"users"}
{"ts":1744836333823,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333823,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333823,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333824,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333824,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333824,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333824,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333824,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333824,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333825,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333825,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333825,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333825,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333825,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333825,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333825,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333825,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333825,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333826,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333826,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333826,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333826,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333826,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333826,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333826,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333826,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333826,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333826,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333826,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333826,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333826,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333826,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333826,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333827,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"registry"}
{"ts":1744836333827,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333827,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"users","svc":"users"}
{"ts":1744836333827,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333827,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 104ms.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333897,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333902,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"username\");ALTER TABLE \"users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333913,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"email\");ALTER TABLE \"users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333918,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333919,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333920,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333921,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"salt\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333922,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"status\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"status\" SET DEFAULT 'active';DO 'BEGIN CREATE TYPE \"public\".\"enum_users_status\" AS ENUM(''active'', ''inactive''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"users\" ALTER COLUMN \"status\" TYPE \"public\".\"enum_users_status\" USING (\"status\"::\"public\".\"enum_users_status\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333927,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836333928,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"db","svc":"db"}
{"ts":1744836334329,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836334331,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836334332,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836334334,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836334334,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836334334,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836334334,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836334334,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836334334,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836334334,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836334335,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836334335,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836334335,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836334335,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836334335,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836334335,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836334335,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836334335,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836334335,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836337283,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836337290,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836337290,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836337290,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836337291,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: 'c34343cf-d4ca-4b21-bd5f-3530ecf528e7' }","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836337312,"level":"info","msg":"USER : [object SequelizeInstance:User]","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"users","svc":"users"}
{"ts":1744836337377,"level":"info","msg":"<= 200 POST /api/users/login [+94.258 ms]","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836741881,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836741881,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836741881,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836741881,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"db","svc":"db"}
{"ts":1744836741882,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"users","svc":"users"}
{"ts":1744836741886,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836741886,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836741886,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"users","svc":"users"}
{"ts":1744836741886,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"db","svc":"db"}
{"ts":1744836741886,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836741886,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"api","svc":"api"}
{"ts":1744836741886,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836741886,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-31511","ns":"","mod":"broker"}
{"ts":1744836793562,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793563,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793563,"level":"info","msg":"Node ID: daniels-macbook-pro.local-32032","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793563,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"registry"}
{"ts":1744836793563,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"registry"}
{"ts":1744836793564,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793573,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793574,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793578,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836793578,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836793579,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793594,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793655,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836793655,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836793656,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836793656,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836793656,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836793656,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836793674,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836793674,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836793674,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836793674,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836793674,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836793674,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836793674,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836793675,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836793675,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836793675,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836793675,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836793676,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836793676,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793821,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793821,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793821,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793823,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793823,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793823,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793823,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793823,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793823,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793824,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793824,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793824,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793824,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793824,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793824,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793825,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793825,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793825,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793826,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793826,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793826,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793826,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793826,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793826,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793826,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793826,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793826,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793826,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793826,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793826,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793827,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793827,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793827,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793827,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836793827,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836793827,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793831,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"db","svc":"db"}
{"ts":1744836793832,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"db","svc":"db"}
{"ts":1744836793873,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"db","svc":"db"}
{"ts":1744836793873,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793877,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793877,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793877,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793878,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793878,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793878,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793878,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793878,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793878,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793879,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793879,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793879,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793879,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793879,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793879,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793879,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793879,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793879,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793880,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793880,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793880,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793880,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793880,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793880,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793880,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793880,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793880,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793880,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793880,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793880,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793881,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793881,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793881,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793881,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836793881,"level":"info","msg":"Sequelize initialized","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836793881,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836793882,"level":"info","msg":"Users service created with database connection","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836793882,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836793888,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836793888,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836793888,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836793888,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"db","svc":"db"}
{"ts":1744836793888,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836793892,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"registry"}
{"ts":1744836793892,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793893,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836793897,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836793898,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"registry"}
{"ts":1744836793898,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793902,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"registry"}
{"ts":1744836793902,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793902,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836793902,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"db","svc":"db"}
{"ts":1744836793965,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793968,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_status' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793970,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793970,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836793983,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836793983,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836793983,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793983,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793983,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793984,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793984,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793984,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793985,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793985,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793985,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793986,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793986,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793986,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793986,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793986,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793986,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793986,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793986,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793986,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793986,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793986,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793986,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793986,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793986,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793986,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793986,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793986,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793986,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793987,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793987,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793987,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793987,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793987,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793987,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793987,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"registry"}
{"ts":1744836793987,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836793987,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836793992,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836794000,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"username\");ALTER TABLE \"users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836794015,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"email\");ALTER TABLE \"users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836794021,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836794023,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836794024,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836794025,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"salt\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836794027,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"status\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"status\" SET DEFAULT 'active';DO 'BEGIN CREATE TYPE \"public\".\"enum_users_status\" AS ENUM(''active'', ''inactive''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"users\" ALTER COLUMN \"status\" TYPE \"public\".\"enum_users_status\" USING (\"status\"::\"public\".\"enum_users_status\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836794032,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836794034,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"db","svc":"db"}
{"ts":1744836794488,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836794489,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836794489,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836794489,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836794490,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836794490,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836794490,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836794490,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836794490,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836794490,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836794490,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836794490,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836794490,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836794490,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836794971,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836794976,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836795977,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836795979,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836796979,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836796983,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836797985,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836797988,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836798990,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836798992,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836799993,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836799996,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836800998,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836801002,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836801635,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836801635,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836801635,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836801635,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"db","svc":"db"}
{"ts":1744836801635,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836801637,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"$node","svc":"$node"}
{"ts":1744836801638,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"users","svc":"users"}
{"ts":1744836801638,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836801638,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"api","svc":"api"}
{"ts":1744836801658,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"auth","svc":"auth"}
{"ts":1744836801665,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"db","svc":"db"}
{"ts":1744836801665,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744836801665,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-32032","ns":"","mod":"broker"}
{"ts":1744838789487,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789487,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789488,"level":"info","msg":"Node ID: daniels-macbook-pro.local-33490","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789488,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"registry"}
{"ts":1744838789488,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"registry"}
{"ts":1744838789489,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789498,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789499,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789503,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"$node","svc":"$node"}
{"ts":1744838789504,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"$node","svc":"$node"}
{"ts":1744838789504,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789521,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789582,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838789583,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838789583,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838789583,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838789584,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838789584,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838789601,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838789601,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838789601,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838789601,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838789601,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838789601,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838789601,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838789601,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838789602,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838789602,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838789602,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838789603,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838789603,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789770,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789770,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789770,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789772,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789772,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789772,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789772,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789773,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789773,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789774,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789774,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789774,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789774,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789774,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789774,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789774,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789774,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789774,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789775,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789775,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789775,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789775,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789775,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789775,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789775,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789775,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789775,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789776,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789776,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789776,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789776,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789776,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789776,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789776,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"auth","svc":"auth"}
{"ts":1744838789776,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"auth","svc":"auth"}
{"ts":1744838789776,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789781,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"db","svc":"db"}
{"ts":1744838789781,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"db","svc":"db"}
{"ts":1744838789827,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"db","svc":"db"}
{"ts":1744838789827,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789830,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789830,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789830,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789831,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789831,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789831,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789832,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789832,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789832,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789832,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789832,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789832,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789833,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789833,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789833,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789833,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789833,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789833,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789833,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789833,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789833,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789833,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789833,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789833,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789833,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789833,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789833,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789834,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789834,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789834,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789834,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789834,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789834,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789834,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838789834,"level":"info","msg":"Sequelize initialized","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838789834,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838789835,"level":"info","msg":"Users service created with database connection","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838789835,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838789841,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"$node","svc":"$node"}
{"ts":1744838789841,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838789841,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"auth","svc":"auth"}
{"ts":1744838789841,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"db","svc":"db"}
{"ts":1744838789841,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838789845,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"registry"}
{"ts":1744838789845,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789846,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"$node","svc":"$node"}
{"ts":1744838789847,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838789848,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"registry"}
{"ts":1744838789848,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789851,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"registry"}
{"ts":1744838789851,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789851,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838789851,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"db","svc":"db"}
{"ts":1744838789930,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789931,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_status' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789933,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838789935,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789944,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"auth","svc":"auth"}
{"ts":1744838789944,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"auth","svc":"auth"}
{"ts":1744838789944,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789944,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789944,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789945,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789945,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789945,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789945,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789945,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789945,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789946,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789946,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789946,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789946,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789946,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789946,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789946,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789946,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789946,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789947,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789947,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789947,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789947,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789947,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789947,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789947,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789947,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789947,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789947,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789947,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789947,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789947,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789947,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789947,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789947,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"registry"}
{"ts":1744838789947,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789947,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"auth","svc":"auth"}
{"ts":1744838789953,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789965,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"username\");ALTER TABLE \"users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789981,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"email\");ALTER TABLE \"users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789987,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789989,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789990,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789991,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"salt\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838789993,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"status\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"status\" SET DEFAULT 'active';DO 'BEGIN CREATE TYPE \"public\".\"enum_users_status\" AS ENUM(''active'', ''inactive''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"users\" ALTER COLUMN \"status\" TYPE \"public\".\"enum_users_status\" USING (\"status\"::\"public\".\"enum_users_status\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838790005,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838790006,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"db","svc":"db"}
{"ts":1744838790449,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838790450,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838790450,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838790450,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838790450,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838790450,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838790450,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838790450,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838790450,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838790450,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838790451,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838790451,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838790451,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838790451,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838790936,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838790940,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838791534,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838791541,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838791541,"level":"warn","msg":"Service 'users.login' is not registered.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838791542,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '0f917983-f244-416e-9d29-65239831d781' } ServiceUnavailableError: Service unavailable\n    at Service.aliasHandler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:556:13)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:33\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) {\n  code: 503,\n  type: undefined,\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838791542,"level":"error","msg":"   Request error! ServiceUnavailableError : Service unavailable \n ServiceUnavailableError: Service unavailable\n    at Service.aliasHandler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:556:13)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:33\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) \nData: ","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838791943,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838791947,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838792231,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838792231,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838792231,"level":"warn","msg":"Service 'users.login' is not registered.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838792231,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'd8406ece-a746-481c-8ba6-199489024dcd' } ServiceUnavailableError: Service unavailable\n    at Service.aliasHandler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:556:13)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:33\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) {\n  code: 503,\n  type: undefined,\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838792232,"level":"error","msg":"   Request error! ServiceUnavailableError : Service unavailable \n ServiceUnavailableError: Service unavailable\n    at Service.aliasHandler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:556:13)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:33\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) \nData: ","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838792949,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838792953,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838793535,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838793535,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838793535,"level":"warn","msg":"Service 'users.login' is not registered.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838793535,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '4fa04d71-26b7-4b2f-aef0-7149740abe5c' } ServiceUnavailableError: Service unavailable\n    at Service.aliasHandler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:556:13)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:33\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) {\n  code: 503,\n  type: undefined,\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838793535,"level":"error","msg":"   Request error! ServiceUnavailableError : Service unavailable \n ServiceUnavailableError: Service unavailable\n    at Service.aliasHandler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:556:13)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:33\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) \nData: ","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838793955,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838793956,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838794960,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838794961,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838795969,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838795972,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838796976,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838796978,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838797980,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838797983,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838798986,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838798991,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838799993,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838799995,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838800997,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838800999,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838802001,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838802008,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838803009,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838803011,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838804014,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838804016,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838805018,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838805020,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838806022,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838806025,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838807027,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838807031,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838808034,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838808038,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838809040,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838809043,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838809072,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"$node","svc":"$node"}
{"ts":1744838809072,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838809072,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"auth","svc":"auth"}
{"ts":1744838809072,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"db","svc":"db"}
{"ts":1744838809072,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838809074,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"$node","svc":"$node"}
{"ts":1744838809074,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"auth","svc":"auth"}
{"ts":1744838809074,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"users","svc":"users"}
{"ts":1744838809074,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"db","svc":"db"}
{"ts":1744838809074,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838809075,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"api","svc":"api"}
{"ts":1744838809075,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838809075,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-33490","ns":"","mod":"broker"}
{"ts":1744838899903,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838899904,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838899904,"level":"info","msg":"Node ID: daniels-macbook-pro.local-33657","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838899904,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"registry"}
{"ts":1744838899904,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"registry"}
{"ts":1744838899905,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838899914,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838899915,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838899919,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"$node","svc":"$node"}
{"ts":1744838899919,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"$node","svc":"$node"}
{"ts":1744838899920,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838899935,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838899994,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838899995,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838899995,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838899995,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838899995,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838899995,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900014,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900014,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900015,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900015,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900015,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900015,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900015,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900015,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900015,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900016,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900016,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900016,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900017,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900165,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900165,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900165,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900166,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900166,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900166,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900167,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900167,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900167,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900168,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900168,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900168,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900168,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900168,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900168,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900168,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900168,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900168,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900170,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900170,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900170,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900170,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900170,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900170,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900170,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900170,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900170,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900170,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900170,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900170,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900171,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900171,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900171,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900171,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"auth","svc":"auth"}
{"ts":1744838900171,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"auth","svc":"auth"}
{"ts":1744838900171,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900176,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"db","svc":"db"}
{"ts":1744838900176,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"db","svc":"db"}
{"ts":1744838900222,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"db","svc":"db"}
{"ts":1744838900223,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900227,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900227,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900227,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900228,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900228,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900228,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900228,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900228,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900228,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900229,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900229,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900229,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900229,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900229,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900229,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900229,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900229,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900229,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900230,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900230,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900230,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900230,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900230,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900230,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900230,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900230,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900230,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900230,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900230,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900230,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900230,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900230,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900230,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900230,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"users","svc":"users"}
{"ts":1744838900231,"level":"info","msg":"Sequelize initialized","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"users","svc":"users"}
{"ts":1744838900231,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"users","svc":"users"}
{"ts":1744838900231,"level":"info","msg":"Users service created with database connection","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"users","svc":"users"}
{"ts":1744838900231,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"users","svc":"users"}
{"ts":1744838900238,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"$node","svc":"$node"}
{"ts":1744838900238,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900238,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"auth","svc":"auth"}
{"ts":1744838900238,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"db","svc":"db"}
{"ts":1744838900238,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"users","svc":"users"}
{"ts":1744838900242,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"registry"}
{"ts":1744838900242,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900243,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"$node","svc":"$node"}
{"ts":1744838900243,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900244,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"registry"}
{"ts":1744838900244,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900247,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"registry"}
{"ts":1744838900247,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900247,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900247,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"db","svc":"db"}
{"ts":1744838900293,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"users","svc":"users"}
{"ts":1744838900296,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900298,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_status' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900300,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"auth","svc":"auth"}
{"ts":1744838900300,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"auth","svc":"auth"}
{"ts":1744838900300,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900300,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900300,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900301,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900301,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900301,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900302,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900302,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900302,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900303,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900303,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900303,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900303,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900303,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900303,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900303,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900303,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900303,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900303,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900303,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900303,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900303,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900303,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900303,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900304,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900304,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900304,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900304,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900304,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900304,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900304,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900304,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900304,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900304,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"registry"}
{"ts":1744838900304,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900304,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"auth","svc":"auth"}
{"ts":1744838900305,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900315,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900324,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"username\");ALTER TABLE \"users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900339,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"email\");ALTER TABLE \"users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900345,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900347,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900348,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900348,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"salt\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900349,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"status\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"status\" SET DEFAULT 'active';DO 'BEGIN CREATE TYPE \"public\".\"enum_users_status\" AS ENUM(''active'', ''inactive''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"users\" ALTER COLUMN \"status\" TYPE \"public\".\"enum_users_status\" USING (\"status\"::\"public\".\"enum_users_status\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900354,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900356,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"db","svc":"db"}
{"ts":1744838900806,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900807,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900807,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900807,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900807,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900807,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900807,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900807,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900807,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900808,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900808,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900808,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838900808,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838900808,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838901294,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"users","svc":"users"}
{"ts":1744838901296,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"users","svc":"users"}
{"ts":1744838902297,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"users","svc":"users"}
{"ts":1744838902300,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"users","svc":"users"}
{"ts":1744838903300,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"users","svc":"users"}
{"ts":1744838903303,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"users","svc":"users"}
{"ts":1744838903904,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"$node","svc":"$node"}
{"ts":1744838903904,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838903904,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"auth","svc":"auth"}
{"ts":1744838903904,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"db","svc":"db"}
{"ts":1744838903904,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"users","svc":"users"}
{"ts":1744838903907,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"$node","svc":"$node"}
{"ts":1744838903907,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"users","svc":"users"}
{"ts":1744838903908,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838903908,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"api","svc":"api"}
{"ts":1744838903912,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"auth","svc":"auth"}
{"ts":1744838903914,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"db","svc":"db"}
{"ts":1744838903914,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744838903914,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-33657","ns":"","mod":"broker"}
{"ts":1744839313875,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839313875,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839313875,"level":"info","msg":"Node ID: daniels-macbook-pro.local-34187","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839313876,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"registry"}
{"ts":1744839313876,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"registry"}
{"ts":1744839313876,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839313885,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839313886,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839313891,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"$node","svc":"$node"}
{"ts":1744839313891,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"$node","svc":"$node"}
{"ts":1744839313891,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839313912,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839313980,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839313981,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839313981,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839313981,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839313982,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839313982,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839313999,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839313999,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314000,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314000,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314000,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314000,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314000,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314000,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314000,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314000,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314000,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314001,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314001,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314171,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314172,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314172,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314174,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314174,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314174,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314174,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314174,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314174,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314176,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314176,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314176,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314176,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314176,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314176,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314176,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314176,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314176,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314178,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314178,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314178,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314178,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314178,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314178,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314178,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314178,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314178,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314178,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314178,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314178,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314179,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314179,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314179,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314179,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839314179,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839314179,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314185,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"db","svc":"db"}
{"ts":1744839314185,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"db","svc":"db"}
{"ts":1744839314235,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"db","svc":"db"}
{"ts":1744839314235,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314239,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314239,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314239,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314241,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314241,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314241,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314241,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314241,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314241,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314242,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314242,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314242,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314242,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314242,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314242,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314242,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314242,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314242,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314243,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314243,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314243,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314243,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314243,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314243,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314243,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314243,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314243,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314243,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314243,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314243,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314243,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314243,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314243,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314243,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"users","svc":"users"}
{"ts":1744839314243,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"users","svc":"users"}
{"ts":1744839314243,"level":"info","msg":"DB service found [object Object]","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"users","svc":"users"}
{"ts":1744839314244,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"users","svc":"users"}
{"ts":1744839314250,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"$node","svc":"$node"}
{"ts":1744839314250,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314250,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839314250,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"db","svc":"db"}
{"ts":1744839314250,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"users","svc":"users"}
{"ts":1744839314254,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"registry"}
{"ts":1744839314254,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314256,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"$node","svc":"$node"}
{"ts":1744839314256,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314257,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"registry"}
{"ts":1744839314257,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314260,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"registry"}
{"ts":1744839314261,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314261,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314261,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"db","svc":"db"}
{"ts":1744839314331,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"users","svc":"users"}
{"ts":1744839314331,"level":"info","msg":"***************************** - DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"users","svc":"users"}
{"ts":1744839314331,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314331,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314331,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314332,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314332,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314332,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314333,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314333,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314333,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314334,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314334,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314334,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314334,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314334,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314334,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314334,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314334,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314334,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314334,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314334,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314334,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314334,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314335,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314335,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314335,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314335,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314335,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314335,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314335,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314335,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314335,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314335,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314335,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314335,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"registry"}
{"ts":1744839314335,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314335,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"users","svc":"users"}
{"ts":1744839314337,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314340,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_status' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314341,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314345,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839314345,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839314345,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314345,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314345,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314346,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314346,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314346,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314347,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314347,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314347,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314347,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314347,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314347,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314347,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314347,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314347,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314348,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314348,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314348,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314348,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314348,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314348,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314348,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314348,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314348,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314348,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314348,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314348,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314348,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314348,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314348,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314349,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314349,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314349,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314349,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"registry"}
{"ts":1744839314349,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314349,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839314349,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314349,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 105ms.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314431,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314435,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"username\");ALTER TABLE \"users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314453,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"email\");ALTER TABLE \"users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314461,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314462,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314464,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314465,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"salt\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314467,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"status\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"status\" SET DEFAULT 'active';DO 'BEGIN CREATE TYPE \"public\".\"enum_users_status\" AS ENUM(''active'', ''inactive''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"users\" ALTER COLUMN \"status\" TYPE \"public\".\"enum_users_status\" USING (\"status\"::\"public\".\"enum_users_status\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314473,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314474,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"db","svc":"db"}
{"ts":1744839314850,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314851,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314851,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314851,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314851,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314851,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314851,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314852,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314852,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314852,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314852,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314852,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314852,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314852,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314852,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314852,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314852,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839314852,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839314852,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839543474,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"$node","svc":"$node"}
{"ts":1744839543474,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839543474,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839543474,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"db","svc":"db"}
{"ts":1744839543474,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"users","svc":"users"}
{"ts":1744839543482,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"$node","svc":"$node"}
{"ts":1744839543483,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839543483,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"users","svc":"users"}
{"ts":1744839543483,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"db","svc":"db"}
{"ts":1744839543483,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839543483,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"api","svc":"api"}
{"ts":1744839543483,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839543483,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-34187","ns":"","mod":"broker"}
{"ts":1744839922705,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922705,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922705,"level":"info","msg":"Node ID: daniels-macbook-pro.local-34859","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922706,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"registry"}
{"ts":1744839922706,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"registry"}
{"ts":1744839922707,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922716,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922717,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922722,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"$node","svc":"$node"}
{"ts":1744839922723,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"$node","svc":"$node"}
{"ts":1744839922723,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922741,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922805,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839922806,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839922806,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839922807,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839922807,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839922807,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839922825,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839922825,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839922825,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839922825,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839922825,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839922825,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839922825,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839922825,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839922826,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839922826,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839922826,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839922827,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839922827,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922990,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922990,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922990,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922991,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922991,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922991,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922992,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922992,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922992,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922993,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922993,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922993,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922993,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922993,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922993,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922993,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922993,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922993,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922994,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922994,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922994,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922995,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922995,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922995,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922995,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922995,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922995,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922995,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922995,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922995,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922995,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922995,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922995,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839922995,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839922996,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839922996,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923000,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"db","svc":"db"}
{"ts":1744839923000,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"db","svc":"db"}
{"ts":1744839923052,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"db","svc":"db"}
{"ts":1744839923052,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923056,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923056,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923056,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923057,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923057,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923057,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923057,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923057,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923057,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923058,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923058,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923058,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923058,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923058,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923058,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923058,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923058,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923058,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923059,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923059,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923059,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923059,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923059,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923059,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923059,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923059,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923059,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923059,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923059,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923059,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923059,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923059,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923059,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923059,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"users","svc":"users"}
{"ts":1744839923060,"level":"info","msg":"Sequelize initialized","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"users","svc":"users"}
{"ts":1744839923060,"level":"info","msg":"Users service created with DB mixin","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"users","svc":"users"}
{"ts":1744839923060,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"users","svc":"users"}
{"ts":1744839923068,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"$node","svc":"$node"}
{"ts":1744839923068,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839923068,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839923068,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"db","svc":"db"}
{"ts":1744839923068,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"users","svc":"users"}
{"ts":1744839923072,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"registry"}
{"ts":1744839923072,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923073,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"$node","svc":"$node"}
{"ts":1744839923074,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839923075,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"registry"}
{"ts":1744839923075,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923078,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"registry"}
{"ts":1744839923078,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923078,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839923078,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"db","svc":"db"}
{"ts":1744839923133,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"users","svc":"users"}
{"ts":1744839923135,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923137,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_status' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923139,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923142,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839923142,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839923142,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923142,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923142,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923143,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923143,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923143,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923143,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923143,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923143,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923144,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923144,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923144,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923144,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923144,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923144,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923144,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923144,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923144,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923145,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923145,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923145,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923145,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923145,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923145,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923145,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923145,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923145,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923145,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923145,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923145,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923145,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923145,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923145,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923146,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"registry"}
{"ts":1744839923146,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923146,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839923151,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923159,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"username\");ALTER TABLE \"users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923258,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"email\");ALTER TABLE \"users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923278,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923280,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923281,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923282,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"salt\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923284,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"status\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"status\" SET DEFAULT 'active';DO 'BEGIN CREATE TYPE \"public\".\"enum_users_status\" AS ENUM(''active'', ''inactive''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"users\" ALTER COLUMN \"status\" TYPE \"public\".\"enum_users_status\" USING (\"status\"::\"public\".\"enum_users_status\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923289,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923291,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"db","svc":"db"}
{"ts":1744839923647,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839923649,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839923649,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839923649,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839923649,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839923649,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839923649,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839923649,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839923649,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839923649,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839923649,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839923650,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839923650,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839923650,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839924133,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"users","svc":"users"}
{"ts":1744839924138,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"users","svc":"users"}
{"ts":1744839925139,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"users","svc":"users"}
{"ts":1744839925143,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"users","svc":"users"}
{"ts":1744839926144,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"users","svc":"users"}
{"ts":1744839926147,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"users","svc":"users"}
{"ts":1744839927149,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"users","svc":"users"}
{"ts":1744839927151,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"users","svc":"users"}
{"ts":1744839928153,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"users","svc":"users"}
{"ts":1744839928157,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"users","svc":"users"}
{"ts":1744839929159,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"users","svc":"users"}
{"ts":1744839929163,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"users","svc":"users"}
{"ts":1744839929343,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"$node","svc":"$node"}
{"ts":1744839929343,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839929343,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839929343,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"db","svc":"db"}
{"ts":1744839929343,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"users","svc":"users"}
{"ts":1744839929348,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"$node","svc":"$node"}
{"ts":1744839929348,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"users","svc":"users"}
{"ts":1744839929348,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839929348,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"api","svc":"api"}
{"ts":1744839929364,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839929373,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"db","svc":"db"}
{"ts":1744839929374,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839929374,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-34859","ns":"","mod":"broker"}
{"ts":1744839966917,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839966917,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839966917,"level":"info","msg":"Node ID: daniels-macbook-pro.local-34986","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839966918,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"registry"}
{"ts":1744839966918,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"registry"}
{"ts":1744839966919,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839966931,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839966932,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839966938,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"$node","svc":"$node"}
{"ts":1744839966938,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"$node","svc":"$node"}
{"ts":1744839966938,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839966955,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967015,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967016,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967016,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967016,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967017,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967017,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967034,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967034,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967034,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967034,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967034,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967034,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967034,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967034,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967035,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967035,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967035,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967036,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967036,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967184,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967184,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967184,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967186,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967186,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967186,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967186,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967186,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967186,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967188,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967188,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967188,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967188,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967188,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967188,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967188,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967188,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967188,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967189,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967189,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967189,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967189,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967189,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967189,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967189,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967189,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967189,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967189,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967189,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967190,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967190,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967190,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967190,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967190,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839967190,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839967190,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967195,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"db","svc":"db"}
{"ts":1744839967195,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"db","svc":"db"}
{"ts":1744839967240,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"db","svc":"db"}
{"ts":1744839967240,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967247,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967247,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967247,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967248,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967248,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967248,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967249,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967249,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967249,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967249,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967249,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967249,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967250,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967250,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967250,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967250,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967250,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967250,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967250,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967250,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967250,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967250,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967250,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967250,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967250,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967250,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967250,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967251,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967251,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967251,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967251,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967251,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967251,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967251,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"users","svc":"users"}
{"ts":1744839967251,"level":"info","msg":"Sequelize initialized","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"users","svc":"users"}
{"ts":1744839967252,"level":"info","msg":"Users service created with DB mixin","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"users","svc":"users"}
{"ts":1744839967252,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"users","svc":"users"}
{"ts":1744839967258,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"$node","svc":"$node"}
{"ts":1744839967258,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967258,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839967258,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"db","svc":"db"}
{"ts":1744839967258,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"users","svc":"users"}
{"ts":1744839967262,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"registry"}
{"ts":1744839967262,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967263,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"$node","svc":"$node"}
{"ts":1744839967264,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967265,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"registry"}
{"ts":1744839967265,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967268,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"registry"}
{"ts":1744839967268,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967268,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967268,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"db","svc":"db"}
{"ts":1744839967313,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967315,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_status' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967317,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967318,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"users","svc":"users"}
{"ts":1744839967328,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839967328,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839967328,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967328,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967328,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967329,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967329,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967329,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967329,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967329,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967329,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967330,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967330,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967330,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967330,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967330,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967330,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967330,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967330,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967330,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967331,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967331,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967331,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967331,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967331,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967331,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967331,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967331,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967331,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967331,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967331,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967331,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967331,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967331,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967331,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967331,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"registry"}
{"ts":1744839967331,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967331,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839967333,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967424,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"username\");ALTER TABLE \"users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967435,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"email\");ALTER TABLE \"users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967444,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967450,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967454,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967455,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"salt\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967458,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"status\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"status\" SET DEFAULT 'active';DO 'BEGIN CREATE TYPE \"public\".\"enum_users_status\" AS ENUM(''active'', ''inactive''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"users\" ALTER COLUMN \"status\" TYPE \"public\".\"enum_users_status\" USING (\"status\"::\"public\".\"enum_users_status\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967464,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967466,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"db","svc":"db"}
{"ts":1744839967832,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967833,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967833,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967833,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967834,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967834,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967834,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967834,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967834,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967834,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967834,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967834,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839967834,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839967834,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839968318,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"users","svc":"users"}
{"ts":1744839968323,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"users","svc":"users"}
{"ts":1744839969323,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"users","svc":"users"}
{"ts":1744839969326,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"users","svc":"users"}
{"ts":1744839970126,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"$node","svc":"$node"}
{"ts":1744839970126,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839970126,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839970126,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"db","svc":"db"}
{"ts":1744839970126,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"users","svc":"users"}
{"ts":1744839970127,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"$node","svc":"$node"}
{"ts":1744839970128,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"users","svc":"users"}
{"ts":1744839970128,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839970128,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"api","svc":"api"}
{"ts":1744839970133,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"auth","svc":"auth"}
{"ts":1744839970136,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"db","svc":"db"}
{"ts":1744839970136,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744839970136,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-34986","ns":"","mod":"broker"}
{"ts":1744840353984,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840353984,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840353984,"level":"info","msg":"Node ID: daniels-macbook-pro.local-35411","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840353985,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"registry"}
{"ts":1744840353985,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"registry"}
{"ts":1744840353986,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840353997,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840353998,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354003,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840354003,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840354003,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354020,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354085,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354086,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354086,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354086,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354087,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354087,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354110,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354110,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354110,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354110,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354110,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354110,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354110,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354110,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354110,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354111,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354111,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354112,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354112,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354260,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354260,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354260,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354262,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354262,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354262,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354263,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354263,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354263,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354264,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354264,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354264,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354264,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354264,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354264,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354264,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354264,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354264,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354265,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354265,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354265,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354265,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354265,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354265,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354266,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354266,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354266,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354266,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354266,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354266,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354266,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354266,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354266,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354266,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840354267,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840354267,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354272,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"db","svc":"db"}
{"ts":1744840354272,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"db","svc":"db"}
{"ts":1744840354315,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"db","svc":"db"}
{"ts":1744840354315,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354321,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354321,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354321,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354322,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354322,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354322,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354323,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354323,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354323,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354324,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354324,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354324,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354324,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354324,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354324,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354324,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354324,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354324,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354325,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354325,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354325,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354325,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354325,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354325,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354325,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354325,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354325,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354325,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354325,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354325,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354325,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354325,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354325,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354325,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"users","svc":"users"}
{"ts":1744840354325,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"users","svc":"users"}
{"ts":1744840354325,"level":"info","msg":"DB service found [object Object]","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"users","svc":"users"}
{"ts":1744840354326,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"users","svc":"users"}
{"ts":1744840354333,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840354333,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354333,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840354333,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"db","svc":"db"}
{"ts":1744840354333,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"users","svc":"users"}
{"ts":1744840354336,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"registry"}
{"ts":1744840354336,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354338,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840354339,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354340,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"registry"}
{"ts":1744840354340,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354343,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"registry"}
{"ts":1744840354343,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354343,"level":"info","msg":"***************************** - DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"users","svc":"users"}
{"ts":1744840354343,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354343,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"db","svc":"db"}
{"ts":1744840354343,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354343,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354343,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354344,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354344,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354344,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354344,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354345,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354345,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354345,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354345,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354345,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354345,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354345,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354345,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354345,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354345,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354345,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354346,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354346,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354346,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354346,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354346,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354346,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354346,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354346,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354346,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354346,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354346,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354346,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354346,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354346,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354346,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354347,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"registry"}
{"ts":1744840354347,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354347,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"users","svc":"users"}
{"ts":1744840354401,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354405,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_status' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354407,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354419,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840354419,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840354419,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354419,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354419,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354420,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354420,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354420,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354420,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354420,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354420,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354421,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354421,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354421,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354421,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354421,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354421,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354421,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354421,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354421,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354422,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354422,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354422,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354422,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354422,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354422,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354422,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354422,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354422,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354422,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354422,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354422,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354422,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354422,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354422,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354422,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"registry"}
{"ts":1744840354422,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354423,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840354423,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354423,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 97ms.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354499,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354502,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"username\");ALTER TABLE \"users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354520,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"email\");ALTER TABLE \"users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354530,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354531,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354533,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354534,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"salt\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354535,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"status\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"status\" SET DEFAULT 'active';DO 'BEGIN CREATE TYPE \"public\".\"enum_users_status\" AS ENUM(''active'', ''inactive''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"users\" ALTER COLUMN \"status\" TYPE \"public\".\"enum_users_status\" USING (\"status\"::\"public\".\"enum_users_status\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354545,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354547,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"db","svc":"db"}
{"ts":1744840354924,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354925,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354925,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354925,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354925,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354926,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354926,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354926,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354926,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354926,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354926,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354926,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354926,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354926,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354926,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354926,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354926,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840354926,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840354926,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840377408,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840377408,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840377408,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840377408,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"db","svc":"db"}
{"ts":1744840377408,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"users","svc":"users"}
{"ts":1744840377411,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840377411,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"users","svc":"users"}
{"ts":1744840377411,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840377411,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"db","svc":"db"}
{"ts":1744840377411,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840377412,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"api","svc":"api"}
{"ts":1744840377412,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840377412,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-35411","ns":"","mod":"broker"}
{"ts":1744840378360,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378360,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378360,"level":"info","msg":"Node ID: daniels-macbook-pro.local-35536","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378361,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"registry"}
{"ts":1744840378361,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"registry"}
{"ts":1744840378362,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378369,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378370,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378374,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840378374,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840378375,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378383,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378433,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840378433,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840378433,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840378434,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840378434,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840378434,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840378451,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840378451,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840378451,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840378451,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840378451,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840378451,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840378452,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840378452,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840378452,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840378452,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840378452,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840378453,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840378453,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378592,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378592,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378592,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378594,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378594,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378594,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378595,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378595,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378595,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378596,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378596,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378596,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378596,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378596,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378596,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378596,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378596,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378596,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378597,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378597,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378597,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378597,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378597,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378597,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378597,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378598,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378598,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378598,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378598,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378598,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378598,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378598,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378598,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378599,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840378599,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840378599,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378603,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"db","svc":"db"}
{"ts":1744840378604,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"db","svc":"db"}
{"ts":1744840378639,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"db","svc":"db"}
{"ts":1744840378639,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378642,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378642,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378642,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378644,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378644,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378644,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378644,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378644,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378644,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378645,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378645,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378645,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378645,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378645,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378645,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378645,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378645,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378645,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378646,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378646,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378646,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378646,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378646,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378646,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378646,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378646,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378646,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378646,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378646,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378646,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378646,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378646,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378646,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378647,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"users","svc":"users"}
{"ts":1744840378647,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"users","svc":"users"}
{"ts":1744840378647,"level":"info","msg":"DB service found [object Object]","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"users","svc":"users"}
{"ts":1744840378648,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"users","svc":"users"}
{"ts":1744840378654,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840378654,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840378654,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840378654,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"db","svc":"db"}
{"ts":1744840378654,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"users","svc":"users"}
{"ts":1744840378658,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"registry"}
{"ts":1744840378658,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378660,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840378661,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840378663,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"registry"}
{"ts":1744840378663,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378667,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"registry"}
{"ts":1744840378667,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378667,"level":"info","msg":"***************************** - DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"users","svc":"users"}
{"ts":1744840378667,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840378667,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"db","svc":"db"}
{"ts":1744840378667,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378667,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378667,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378668,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378668,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378668,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378668,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378668,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378668,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378669,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378669,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378669,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378669,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378669,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378669,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378669,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378669,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378669,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378670,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378670,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378670,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378670,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378670,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378670,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378670,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378670,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378670,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378670,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378670,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378670,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378670,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378670,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378670,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378671,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"registry"}
{"ts":1744840378671,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378671,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"users","svc":"users"}
{"ts":1744840378710,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378712,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_status' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378715,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378720,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840378720,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840378720,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378720,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378720,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378722,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378722,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378722,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378722,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378722,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378722,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378723,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378723,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378723,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378723,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378723,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378723,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378723,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378723,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378723,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378724,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378724,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378724,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378724,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378724,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378724,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378724,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378724,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378724,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378724,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378724,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378724,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378724,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378724,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378724,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378724,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"registry"}
{"ts":1744840378724,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378725,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840378725,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378725,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 77ms.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378792,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378796,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"username\");ALTER TABLE \"users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378808,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"email\");ALTER TABLE \"users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378816,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378818,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378819,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378820,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"salt\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378821,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"status\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"status\" SET DEFAULT 'active';DO 'BEGIN CREATE TYPE \"public\".\"enum_users_status\" AS ENUM(''active'', ''inactive''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"users\" ALTER COLUMN \"status\" TYPE \"public\".\"enum_users_status\" USING (\"status\"::\"public\".\"enum_users_status\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378829,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840378831,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"db","svc":"db"}
{"ts":1744840379226,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840379227,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840379227,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840379228,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840379228,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840379228,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840379228,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840379228,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840379228,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840379228,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840379228,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840379228,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840379228,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840379228,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840379228,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840379228,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840379228,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840379228,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840379228,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840383131,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840383138,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840383138,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840383138,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840383139,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: '52c91007-530f-4957-9be0-db1debbdabbc' }","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840383140,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: '52c91007-530f-4957-9be0-db1debbdabbc' } MoleculerClientError: 1 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:137:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840383140,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '52c91007-530f-4957-9be0-db1debbdabbc' } MoleculerClientError: 1 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:137:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840391220,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840391221,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840391221,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840391221,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840391221,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: '3b51f881-c1f7-45bb-92dc-225338571b39' }","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840391222,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: '3b51f881-c1f7-45bb-92dc-225338571b39' } MoleculerClientError: 1 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:137:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840391222,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '3b51f881-c1f7-45bb-92dc-225338571b39' } MoleculerClientError: 1 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:137:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840412990,"level":"info","msg":"=> POST /api/auth/login","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840412991,"level":"debug","msg":"  Alias:   POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840412991,"level":"info","msg":"   Call 'auth.login' action","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840412991,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840412991,"level":"debug","msg":"Call action locally. { action: 'auth.login', requestID: '60adc867-520a-44fe-bf8a-4ff97bad82b9' }","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840413044,"level":"info","msg":"USER : [object SequelizeInstance:user]","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840413108,"level":"info","msg":"<= 200 POST /api/auth/login [+118.298 ms]","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840417515,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840417515,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840417515,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840417515,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840417515,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: 'a725cbd1-8639-4874-bfe0-55e53dd7470f' }","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840417518,"level":"debug","msg":"The 'users.login' request is rejected. { requestID: 'a725cbd1-8639-4874-bfe0-55e53dd7470f' } MoleculerClientError: 1 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:137:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840417519,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'a725cbd1-8639-4874-bfe0-55e53dd7470f' } MoleculerClientError: 1 Email or password is invalid\n    at Service.handler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/services/users.service.js:137:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Service.callAction (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:654:16)\n    at async /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:22 {\n  code: 422,\n  type: 'INVALID_CREDENTIALS',\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840494311,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840494311,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840494311,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840494311,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"db","svc":"db"}
{"ts":1744840494311,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"users","svc":"users"}
{"ts":1744840494314,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840494314,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"users","svc":"users"}
{"ts":1744840494315,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840494315,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"db","svc":"db"}
{"ts":1744840494315,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840494315,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"api","svc":"api"}
{"ts":1744840494315,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840494315,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-35536","ns":"","mod":"broker"}
{"ts":1744840495847,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840495847,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840495847,"level":"info","msg":"Node ID: daniels-macbook-pro.local-35776","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840495847,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"registry"}
{"ts":1744840495848,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"registry"}
{"ts":1744840495848,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840495856,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840495857,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840495862,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840495862,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840495862,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840495871,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840495925,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840495925,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840495925,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840495925,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840495925,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840495926,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840495943,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840495943,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840495943,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840495943,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840495943,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840495943,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840495943,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840495944,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840495944,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840495944,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840495944,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840495945,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840495945,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496090,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496090,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496090,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496091,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496091,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496091,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496092,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496092,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496092,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496093,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496093,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496093,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496093,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496093,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496093,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496093,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496093,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496093,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496094,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496094,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496094,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496094,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496094,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496094,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496094,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496094,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496094,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496095,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496095,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496095,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496095,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496095,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496095,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496095,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840496096,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840496096,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496100,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"db","svc":"db"}
{"ts":1744840496100,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"db","svc":"db"}
{"ts":1744840496138,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"db","svc":"db"}
{"ts":1744840496138,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496141,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496141,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496141,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496142,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496142,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496142,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496142,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496142,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496142,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496143,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496143,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496143,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496143,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496143,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496143,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496143,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496143,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496143,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496144,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496144,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496144,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496144,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496144,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496144,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496144,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496144,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496144,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496144,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496144,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496144,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496144,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496144,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496144,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496145,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840496145,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840496145,"level":"info","msg":"DB service found [object Object]","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840496146,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840496153,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840496153,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840496153,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840496153,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"db","svc":"db"}
{"ts":1744840496153,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840496157,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"registry"}
{"ts":1744840496157,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496158,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840496159,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840496160,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"registry"}
{"ts":1744840496160,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496163,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"registry"}
{"ts":1744840496163,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496164,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840496164,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"db","svc":"db"}
{"ts":1744840496237,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496239,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840496241,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_status' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496243,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496251,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840496251,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840496251,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496251,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496251,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496252,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496252,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496252,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496252,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496252,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496252,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496253,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496253,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496253,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496253,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496253,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496253,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496253,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496253,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496253,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496254,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496254,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496254,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496254,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496254,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496254,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496254,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496254,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496254,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496254,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496254,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496254,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496254,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496254,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496254,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496255,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"registry"}
{"ts":1744840496255,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496255,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840496262,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496285,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"username\");ALTER TABLE \"users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496299,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"email\");ALTER TABLE \"users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496306,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496307,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496309,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496309,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"salt\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496311,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"status\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"status\" SET DEFAULT 'active';DO 'BEGIN CREATE TYPE \"public\".\"enum_users_status\" AS ENUM(''active'', ''inactive''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"users\" ALTER COLUMN \"status\" TYPE \"public\".\"enum_users_status\" USING (\"status\"::\"public\".\"enum_users_status\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496315,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496317,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"db","svc":"db"}
{"ts":1744840496756,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840496757,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840496757,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840496757,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840496757,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840496757,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840496757,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840496757,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840496757,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840496757,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840496758,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840496758,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840496758,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840496758,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840497240,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840497244,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840498246,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840498250,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840499251,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840499254,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840500255,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840500256,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840501256,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840501258,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840502259,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840502262,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840503263,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840503266,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840504266,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840504273,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840505274,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840505278,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840506280,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840506283,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840507284,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840507287,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840508289,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840508291,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840509292,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840509296,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840510298,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840510300,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840511301,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840511304,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840512306,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840512310,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840513312,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840513314,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840514316,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840514322,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840515324,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840515326,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840516326,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840516328,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840517329,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840517331,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840518336,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840518338,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840519340,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840519344,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840520344,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840520348,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840521349,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840521352,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840522353,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840522355,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840523356,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840523358,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840524360,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840524362,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840525364,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840525366,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840526368,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840526370,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840527372,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840527373,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840528374,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840528380,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840529380,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840529382,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840530383,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840530386,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840531387,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840531390,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840532391,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840532394,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840533394,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840533396,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840534398,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840534403,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840535404,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840535410,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840536412,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840536415,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840537417,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840537420,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840538422,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840538424,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840539424,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840539426,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840540427,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840540429,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840541435,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840541438,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840542439,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840542444,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840543446,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840543449,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840544450,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840544451,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840545453,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840545455,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840546455,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840546460,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840547461,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840547462,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840548464,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840548466,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840549467,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840549470,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840550471,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840550473,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840551475,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840551476,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840552477,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840552480,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840553482,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840553492,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840554492,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840554495,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840555496,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840555497,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840556498,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840556499,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840557501,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840557504,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840557834,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840557834,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840557835,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840557835,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"db","svc":"db"}
{"ts":1744840557835,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840557837,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840557838,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840557838,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"db","svc":"db"}
{"ts":1744840557838,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840557838,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"api","svc":"api"}
{"ts":1744840557852,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"users","svc":"users"}
{"ts":1744840557852,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840557852,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-35776","ns":"","mod":"broker"}
{"ts":1744840559415,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559415,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559415,"level":"info","msg":"Node ID: daniels-macbook-pro.local-36010","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559416,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"registry"}
{"ts":1744840559416,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"registry"}
{"ts":1744840559417,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559422,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559423,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559428,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840559428,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840559428,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559437,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559490,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840559490,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840559491,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840559491,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840559491,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840559491,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840559506,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840559506,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840559506,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840559507,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840559507,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840559507,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840559507,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840559507,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840559507,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840559507,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840559507,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840559508,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840559508,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559640,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559640,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559640,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559642,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559642,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559642,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559642,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559642,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559642,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559643,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559643,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559643,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559643,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559643,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559643,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559644,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559644,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559644,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559644,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559644,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559644,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559645,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559645,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559645,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559645,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559645,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559645,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559645,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559645,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559645,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559645,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559645,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559645,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559645,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840559646,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840559646,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559650,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"db","svc":"db"}
{"ts":1744840559650,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"db","svc":"db"}
{"ts":1744840559687,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"db","svc":"db"}
{"ts":1744840559687,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559690,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559690,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559690,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559691,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559691,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559691,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559692,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559692,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559692,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559692,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559692,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559692,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559692,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559692,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559692,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559693,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559693,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559693,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559693,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559693,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559693,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559693,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559693,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559693,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559693,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559693,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559693,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559693,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559693,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559693,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559694,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559694,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559694,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559694,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840559694,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840559694,"level":"info","msg":"DB service found [object Object]","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840559695,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840559701,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840559701,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840559701,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840559701,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"db","svc":"db"}
{"ts":1744840559701,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840559705,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"registry"}
{"ts":1744840559705,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559706,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840559707,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840559708,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"registry"}
{"ts":1744840559708,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559711,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"registry"}
{"ts":1744840559711,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559711,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840559711,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"db","svc":"db"}
{"ts":1744840559758,"level":"info","msg":"Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWTABLES' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559762,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559764,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840559765,"level":"info","msg":"Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_status' GROUP BY 1 { plain: true, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559766,"level":"info","msg":"Executing (default): SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'users' AND c.table_schema = 'public' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'DESCRIBE' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559767,"level":"info","msg":"Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'moleculer_db' { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'FOREIGNKEYS' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559769,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840559769,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840559769,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559769,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559769,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559770,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559770,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559770,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559770,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559770,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559770,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559771,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559771,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559771,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559771,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559771,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559771,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559771,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559771,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559771,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559772,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559772,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559772,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559772,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559772,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559772,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559772,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559772,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559772,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559772,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559772,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559772,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559773,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559773,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559773,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559773,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"registry"}
{"ts":1744840559773,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559773,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840559782,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"username\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"username\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"username\");ALTER TABLE \"users\" ALTER COLUMN \"username\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559795,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"users\"  ADD UNIQUE (\"email\");ALTER TABLE \"users\" ALTER COLUMN \"email\" TYPE VARCHAR(255)  ; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559802,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"password\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559803,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"created_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559804,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"updated_at\" TYPE TIMESTAMP WITH TIME ZONE; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559805,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"salt\" DROP DEFAULT;ALTER TABLE \"users\" ALTER COLUMN \"salt\" TYPE VARCHAR(255); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559806,"level":"info","msg":"Executing (default): ALTER TABLE \"users\" ALTER COLUMN \"status\" DROP NOT NULL;ALTER TABLE \"users\" ALTER COLUMN \"status\" SET DEFAULT 'active';DO 'BEGIN CREATE TYPE \"public\".\"enum_users_status\" AS ENUM(''active'', ''inactive''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE \"users\" ALTER COLUMN \"status\" TYPE \"public\".\"enum_users_status\" USING (\"status\"::\"public\".\"enum_users_status\"); { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'RAW' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559812,"level":"info","msg":"Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false, raw: true, logging: [Function: bound ], timestamps: true, validate: {}, freezeTableName: false, underscored: true, paranoid: false, rejectOnEmpty: false, whereCollection: null, schema: null, schemaDelimiter: '', defaultScope: {}, scopes: {}, indexes: [], whereMergeStrategy: 'overwrite', name: { plural: 'Users', singular: 'User' }, omitNull: false, tableName: 'users', sequelize: <ref *1> Sequelize { options: { dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: [Object], query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, logging: [Function: bound ], omitNull: false, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, hooks: {}, retry: [Object], transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: '16.3.0', typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444' }, config: { database: 'moleculer_db', username: 'postgres', password: 'dkimani24', host: 'localhost', port: '5444', pool: {}, protocol: 'tcp', native: false, ssl: undefined, replication: false, dialectModule: null, dialectModulePath: null, keepDefaultTimezone: undefined, dialectOptions: undefined }, dialect: PostgresDialect { sequelize: [Circular *1], connectionManager: [ConnectionManager], queryGenerator: [PostgresQueryGenerator], queryInterface: [PostgresQueryInterface] }, queryInterface: PostgresQueryInterface { sequelize: [Circular *1], queryGenerator: [PostgresQueryGenerator] }, models: { User: User }, modelManager: ModelManager { models: [Array], sequelize: [Circular *1] }, connectionManager: ConnectionManager { sequelize: [Circular *1], config: [Object], dialect: [PostgresDialect], versionPromise: null, dialectName: 'postgres', pool: [Pool], lib: [PG], nameOidMap: [Object], enumOids: [Object], oidParserMap: [Map] } }, hooks: true, dialect: 'postgres', dialectModule: null, dialectModulePath: null, host: 'localhost', protocol: 'tcp', define: { timestamps: true }, query: {}, sync: {}, timezone: '+00:00', standardConformingStrings: true, native: false, replication: false, ssl: undefined, pool: {}, quoteIdentifiers: true, retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] }, transactionType: 'DEFERRED', isolationLevel: null, databaseVersion: 0, typeValidation: false, benchmark: false, minifyAliases: false, logQueryParameters: false, attributeBehavior: 'throw', port: '5444', alter: true, type: 'SHOWINDEXES' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840559814,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"db","svc":"db"}
{"ts":1744840560288,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840560289,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840560289,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840560289,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840560289,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840560289,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840560289,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840560290,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840560290,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840560290,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840560290,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840560290,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840560290,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840560290,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840560765,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840560766,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840560768,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840561769,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840561769,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840561770,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840562772,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840562772,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840562774,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840563776,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840563777,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840563780,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840564781,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840564782,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840564784,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840565785,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840565786,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840565788,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840566789,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840566789,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840566790,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840567792,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840567793,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840567795,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840568796,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840568797,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840568801,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840569803,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840569803,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840569806,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840570806,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840570806,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840570808,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840571809,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840571809,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840571810,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840572812,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840572812,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840572814,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840573816,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840573817,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840573821,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840574822,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840574823,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840574827,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840575829,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840575829,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840575831,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840576831,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840576832,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840576833,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840577842,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840577842,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840577845,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840578847,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840578847,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840578852,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840579853,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840579854,"level":"info","msg":"Executing (default): SELECT 1+1 AS result { plain: true, raw: true, logging: [Function: bound ], type: 'SELECT' }","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840579857,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840580734,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840580734,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840580734,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840580734,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"db","svc":"db"}
{"ts":1744840580734,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840580736,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840580736,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840580736,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"users","svc":"users"}
{"ts":1744840580736,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840580736,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"api","svc":"api"}
{"ts":1744840580743,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"db","svc":"db"}
{"ts":1744840580744,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840580744,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-36010","ns":"","mod":"broker"}
{"ts":1744840582392,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582393,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582393,"level":"info","msg":"Node ID: daniels-macbook-pro.local-36139","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582393,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"registry"}
{"ts":1744840582393,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"registry"}
{"ts":1744840582394,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582402,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582403,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582408,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840582408,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840582408,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582417,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582474,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840582475,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840582475,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840582475,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840582475,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840582475,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840582492,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840582492,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840582492,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840582492,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840582492,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840582492,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840582492,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840582492,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840582493,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840582493,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840582493,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840582494,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840582494,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582640,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582640,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582640,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582641,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582641,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582641,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582642,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582642,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582642,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582643,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582643,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582643,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582643,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582643,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582643,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582644,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582644,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582644,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582644,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582644,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582644,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582645,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582645,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582645,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582645,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582645,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582645,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582645,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582645,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582645,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582645,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582645,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582645,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582646,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840582646,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840582646,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582650,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"db","svc":"db"}
{"ts":1744840582650,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"db","svc":"db"}
{"ts":1744840582691,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"db","svc":"db"}
{"ts":1744840582691,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582694,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582694,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582694,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582695,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582695,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582695,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582695,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582695,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582695,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582696,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582696,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582696,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582696,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582696,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582696,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582697,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582697,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582697,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582697,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582697,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582697,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582697,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582697,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582697,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582698,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582698,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582698,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582698,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582698,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582698,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582698,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582698,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582698,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582698,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840582698,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840582698,"level":"info","msg":"DB service found [object Object]","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840582699,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840582705,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840582705,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840582705,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840582705,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"db","svc":"db"}
{"ts":1744840582705,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840582709,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"registry"}
{"ts":1744840582709,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582710,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840582711,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840582712,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"registry"}
{"ts":1744840582712,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582715,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"registry"}
{"ts":1744840582715,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582715,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840582716,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"db","svc":"db"}
{"ts":1744840582761,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840582766,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840582766,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840582766,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582766,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582766,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582767,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582767,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582767,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582767,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582767,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582767,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582768,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582768,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582768,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582768,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582768,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582768,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582768,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582768,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582768,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582769,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582769,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582769,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582769,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582769,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582769,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582769,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582769,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582769,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582769,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582769,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582769,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582770,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582770,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582770,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582770,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"registry"}
{"ts":1744840582770,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840582770,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840582822,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"db","svc":"db"}
{"ts":1744840583272,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840583273,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840583273,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840583273,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840583274,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840583274,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840583274,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840583274,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840583274,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840583274,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840583274,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840583274,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840583274,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840583274,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840583762,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840583764,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840584765,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840584767,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840585767,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840585771,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840586772,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840586773,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840587775,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840587777,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840588778,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840588782,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840589783,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840589789,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840590791,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840590794,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840591795,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840591798,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840592799,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840592802,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840593735,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840593735,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840593735,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840593735,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"db","svc":"db"}
{"ts":1744840593735,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840593736,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840593736,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840593736,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840593736,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"api","svc":"api"}
{"ts":1744840593742,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"db","svc":"db"}
{"ts":1744840593742,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"users","svc":"users"}
{"ts":1744840593742,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840593742,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-36139","ns":"","mod":"broker"}
{"ts":1744840636453,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636453,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636453,"level":"info","msg":"Node ID: daniels-macbook-pro.local-36310","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636454,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"registry"}
{"ts":1744840636454,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"registry"}
{"ts":1744840636455,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636463,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636464,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636469,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840636469,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840636469,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636485,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636546,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840636546,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840636547,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840636547,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840636547,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840636547,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840636565,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840636566,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840636566,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840636566,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840636566,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840636566,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840636566,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840636566,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840636566,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840636566,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840636566,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840636567,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840636567,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636715,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636716,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636716,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636717,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636717,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636717,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636718,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636718,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636718,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636719,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636719,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636719,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636719,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636719,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636719,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636719,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636719,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636719,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636720,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636720,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636720,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636720,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636720,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636720,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636720,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636720,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636720,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636721,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636721,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636721,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636721,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636721,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636721,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636721,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840636722,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840636722,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636726,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"db","svc":"db"}
{"ts":1744840636726,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"db","svc":"db"}
{"ts":1744840636771,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"db","svc":"db"}
{"ts":1744840636771,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636774,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636774,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636774,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636775,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636775,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636775,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636775,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636775,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636775,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636776,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636776,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636776,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636776,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636776,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636776,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636776,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636776,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636776,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636777,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636777,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636777,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636777,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636777,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636777,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636777,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636777,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636777,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636777,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636777,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636777,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636777,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636777,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636777,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636777,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840636777,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840636777,"level":"info","msg":"DB service found [object Object]","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840636778,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840636785,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840636785,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840636785,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840636785,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"db","svc":"db"}
{"ts":1744840636785,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840636788,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"registry"}
{"ts":1744840636789,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636790,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840636791,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840636791,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"registry"}
{"ts":1744840636791,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636794,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"registry"}
{"ts":1744840636794,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636795,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840636795,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"db","svc":"db"}
{"ts":1744840636848,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840636854,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840636854,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840636854,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636854,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636854,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636855,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636855,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636855,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636856,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636856,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636856,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636857,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636857,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636857,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636857,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636857,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636857,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636857,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636857,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636857,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636857,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636857,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636857,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636858,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636858,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636858,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636858,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636858,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636858,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636858,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636858,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636858,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636858,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636858,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636858,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636858,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"registry"}
{"ts":1744840636858,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840636858,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840636896,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"db","svc":"db"}
{"ts":1744840637360,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840637361,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840637361,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840637361,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840637361,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840637361,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840637361,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840637361,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840637361,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840637361,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840637361,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840637361,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840637362,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840637362,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840637849,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840637852,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840638852,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840638857,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840639858,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840639861,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840640863,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840640872,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840641874,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840641876,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840642414,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840642421,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840642421,"level":"warn","msg":"Service 'users.login' is not registered.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840642422,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '0309d374-4e4a-4a69-beb9-39c27f53736b' } ServiceUnavailableError: Service unavailable\n    at Service.aliasHandler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:556:13)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:33\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) {\n  code: 503,\n  type: undefined,\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840642422,"level":"error","msg":"   Request error! ServiceUnavailableError : Service unavailable \n ServiceUnavailableError: Service unavailable\n    at Service.aliasHandler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:556:13)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:33\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) \nData: ","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840642876,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840642881,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840643252,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840643253,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840643253,"level":"warn","msg":"Service 'users.login' is not registered.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840643253,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: '1bf59524-d599-46a4-8f9b-d547051b8e61' } ServiceUnavailableError: Service unavailable\n    at Service.aliasHandler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:556:13)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:33\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) {\n  code: 503,\n  type: undefined,\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840643253,"level":"error","msg":"   Request error! ServiceUnavailableError : Service unavailable \n ServiceUnavailableError: Service unavailable\n    at Service.aliasHandler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:556:13)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:33\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) \nData: ","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840643540,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840643540,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840643540,"level":"warn","msg":"Service 'users.login' is not registered.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840643540,"level":"debug","msg":"The 'api.rest' request is rejected. { requestID: 'bda06d79-32ad-4d81-ab42-d9ad3486d736' } ServiceUnavailableError: Service unavailable\n    at Service.aliasHandler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:556:13)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:33\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) {\n  code: 503,\n  type: undefined,\n  data: undefined,\n  retryable: false\n}","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840643541,"level":"error","msg":"   Request error! ServiceUnavailableError : Service unavailable \n ServiceUnavailableError: Service unavailable\n    at Service.aliasHandler (/Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:556:13)\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-web/src/index.js:470:33\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) \nData: ","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840643886,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840643891,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840644892,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840644894,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840645896,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840645913,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840646913,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840646915,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840647916,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840647917,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840648919,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840648921,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840649922,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840649925,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840650926,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840650929,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840651931,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840651933,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840652937,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840652939,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840653941,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840653942,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840654944,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840654947,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840655947,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840655949,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840656949,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840656951,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840657952,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840657954,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840658955,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840658957,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840659962,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840659965,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840660460,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840660460,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840660460,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840660460,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"db","svc":"db"}
{"ts":1744840660460,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840660461,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840660461,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840660461,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"users","svc":"users"}
{"ts":1744840660461,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840660461,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"api","svc":"api"}
{"ts":1744840660472,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"db","svc":"db"}
{"ts":1744840660472,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840660472,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-36310","ns":"","mod":"broker"}
{"ts":1744840661396,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661396,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661396,"level":"info","msg":"Node ID: daniels-macbook-pro.local-36425","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661397,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"registry"}
{"ts":1744840661397,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"registry"}
{"ts":1744840661397,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661403,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661404,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661408,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840661408,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840661409,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661418,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661468,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840661469,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840661469,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840661469,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840661469,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840661469,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840661488,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840661488,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840661488,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840661488,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840661488,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840661488,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840661488,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840661488,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840661488,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840661488,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840661488,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840661489,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840661489,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661622,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661622,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661622,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661623,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661623,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661623,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661624,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661624,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661624,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661625,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661625,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661625,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661625,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661625,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661625,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661626,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661626,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661626,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661626,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661626,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661626,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661627,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661627,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661627,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661627,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661627,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661627,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661627,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661627,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661627,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661627,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661627,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661627,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661628,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840661628,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840661628,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661633,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"db","svc":"db"}
{"ts":1744840661633,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"db","svc":"db"}
{"ts":1744840661670,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"db","svc":"db"}
{"ts":1744840661670,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661672,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661672,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661672,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661673,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661674,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661674,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661674,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661674,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661674,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661675,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661675,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661675,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661675,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661675,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661675,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661675,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661675,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661675,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661675,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661675,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661675,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661675,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661675,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661675,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661676,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661676,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661676,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661676,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661676,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661676,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661676,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661676,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661676,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661676,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"users","svc":"users"}
{"ts":1744840661676,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"users","svc":"users"}
{"ts":1744840661676,"level":"info","msg":"DB service found [object Object]","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"users","svc":"users"}
{"ts":1744840661677,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"users","svc":"users"}
{"ts":1744840661684,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840661684,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840661684,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840661684,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"db","svc":"db"}
{"ts":1744840661684,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"users","svc":"users"}
{"ts":1744840661688,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"registry"}
{"ts":1744840661688,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661689,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840661690,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840661691,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"registry"}
{"ts":1744840661691,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661694,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"registry"}
{"ts":1744840661694,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661695,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840661695,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"db","svc":"db"}
{"ts":1744840661740,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"users","svc":"users"}
{"ts":1744840661746,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840661746,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840661746,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661746,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661746,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661747,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661747,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661747,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661748,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661748,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661748,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661749,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661749,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661749,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661749,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661749,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661749,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661749,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661749,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661749,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661749,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661749,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661749,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661749,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661749,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661749,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661749,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661749,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661750,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661750,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661750,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661750,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661750,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661750,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661750,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661750,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"registry"}
{"ts":1744840661750,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840661750,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840661801,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"db","svc":"db"}
{"ts":1744840662252,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840662254,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840662255,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840662255,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840662255,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840662255,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840662255,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840662256,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840662256,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840662256,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840662256,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840662256,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840662256,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840662256,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840662741,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"users","svc":"users"}
{"ts":1744840662744,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"users","svc":"users"}
{"ts":1744840663745,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"users","svc":"users"}
{"ts":1744840663748,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"users","svc":"users"}
{"ts":1744840664750,"level":"warn","msg":"Reconnecting...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"users","svc":"users"}
{"ts":1744840664751,"level":"error","msg":"Connection error! TypeError: Cannot read properties of undefined (reading 'schema')\n    at /Users/danielkimani/Projects/NODEJS/moleculer-postgres-api/node_modules/moleculer-db-adapter-sequelize/src/index.js:61:51\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Promise.all (index 4)","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"users","svc":"users"}
{"ts":1744840664763,"level":"debug","msg":"Service '$node' is stopping...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840664763,"level":"debug","msg":"Service 'api' is stopping...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840664763,"level":"debug","msg":"Service 'auth' is stopping...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840664763,"level":"debug","msg":"Service 'db' is stopping...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"db","svc":"db"}
{"ts":1744840664763,"level":"debug","msg":"Service 'users' is stopping...","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"users","svc":"users"}
{"ts":1744840664765,"level":"info","msg":"Service '$node' stopped.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840664765,"level":"info","msg":"API Gateway stopped!","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840664765,"level":"info","msg":"Service 'api' stopped.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"api","svc":"api"}
{"ts":1744840664779,"level":"info","msg":"Service 'auth' stopped.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840664813,"level":"info","msg":"Service 'users' stopped.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"users","svc":"users"}
{"ts":1744840664830,"level":"info","msg":"Service 'db' stopped.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"db","svc":"db"}
{"ts":1744840664830,"level":"info","msg":"ServiceBroker is stopped. Good bye.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840664830,"level":"debug","msg":"Broadcast '$broker.stopped' local event.","nodeID":"daniels-macbook-pro.local-36425","ns":"","mod":"broker"}
{"ts":1744840696440,"level":"info","msg":"Moleculer v0.14.35 is starting...","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696440,"level":"info","msg":"Namespace: <not defined>","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696440,"level":"info","msg":"Node ID: daniels-macbook-pro.local-36558","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696441,"level":"info","msg":"Strategy: RoundRobinStrategy","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"registry"}
{"ts":1744840696441,"level":"info","msg":"Discoverer: LocalDiscoverer","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"registry"}
{"ts":1744840696442,"level":"info","msg":"Serializer: JSONSerializer","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696448,"level":"info","msg":"Validator: FastestValidator","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696450,"level":"info","msg":"Registered 13 middleware(s).","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696454,"level":"debug","msg":"Service '$node' is creating...","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840696454,"level":"debug","msg":"Service '$node' created.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840696455,"level":"debug","msg":"Search services in './services/**/*.service.js'...","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696473,"level":"debug","msg":"Load service 'api.service.js'...","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696529,"level":"debug","msg":"Service 'api' is creating...","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840696530,"level":"debug","msg":"Setting http(s) server request timeout to: 300000","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840696530,"level":"info","msg":"API Gateway server created.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840696530,"level":"info","msg":"Register route to '/api'","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840696530,"level":"warn","msg":"Define 'authorize' method in the service to enable authorization.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840696530,"level":"warn","msg":"Define 'authenticate' method in the service to enable authentication.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840696546,"level":"info","msg":"    POST /api/users/register => users.register","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840696547,"level":"info","msg":"    POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840696547,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840696547,"level":"info","msg":"     PUT /api/users/:id/password => users.changePassword","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840696547,"level":"info","msg":"    POST /api/auth/register => auth.register","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840696547,"level":"info","msg":"    POST /api/auth/login => auth.login","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840696547,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840696547,"level":"info","msg":"     PUT /api/auth/:id/password => auth.changePassword","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840696547,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840696548,"level":"info","msg":"","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840696548,"level":"debug","msg":"Optimized path order:  [ '/api' ]","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840696549,"level":"debug","msg":"Service 'api' created.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840696549,"level":"debug","msg":"Load service 'auth.service.js'...","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696692,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696693,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696693,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696694,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696694,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696694,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696695,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696695,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696695,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696696,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696696,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696696,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696696,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696696,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696696,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696696,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696696,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696696,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696697,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696697,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696697,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696697,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696697,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696697,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696697,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696697,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696697,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696698,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696698,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696698,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696698,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696698,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696698,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696698,"level":"debug","msg":"Service 'auth' is creating...","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840696698,"level":"debug","msg":"Service 'auth' created.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840696698,"level":"debug","msg":"Load service 'db.service.js'...","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696703,"level":"debug","msg":"Service 'db' is creating...","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"db","svc":"db"}
{"ts":1744840696703,"level":"info","msg":"Initializing database connection...","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"db","svc":"db"}
{"ts":1744840696749,"level":"debug","msg":"Service 'db' created.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"db","svc":"db"}
{"ts":1744840696749,"level":"debug","msg":"Load service 'users.service.js'...","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696752,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696752,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696752,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696753,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696753,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696753,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696753,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696753,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696753,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696754,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696754,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696754,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696754,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696754,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696754,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696754,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696754,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696754,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696755,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696755,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696755,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696755,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696755,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696755,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696755,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696755,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696755,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696755,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696755,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696755,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696755,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696755,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696755,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696755,"level":"debug","msg":"Service 'users' is creating...","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"users","svc":"users"}
{"ts":1744840696756,"level":"info","msg":"DB service found DANIEL","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"users","svc":"users"}
{"ts":1744840696756,"level":"info","msg":"DB service found [object Object]","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"users","svc":"users"}
{"ts":1744840696756,"level":"debug","msg":"Service 'users' created.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"users","svc":"users"}
{"ts":1744840696763,"level":"debug","msg":"Service '$node' is starting...","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840696763,"level":"debug","msg":"Service 'api' is starting...","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840696763,"level":"debug","msg":"Service 'auth' is starting...","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840696763,"level":"debug","msg":"Service 'db' is starting...","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"db","svc":"db"}
{"ts":1744840696763,"level":"debug","msg":"Service 'users' is starting...","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"users","svc":"users"}
{"ts":1744840696767,"level":"info","msg":"'$node' service is registered.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"registry"}
{"ts":1744840696767,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696769,"level":"info","msg":"Service '$node' started.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"$node","svc":"$node"}
{"ts":1744840696769,"level":"info","msg":"API Gateway listening on http://0.0.0.0:4000","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840696770,"level":"info","msg":"'api' service is registered.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"registry"}
{"ts":1744840696770,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696773,"level":"info","msg":"'db' service is registered.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"registry"}
{"ts":1744840696773,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696774,"level":"info","msg":"Service 'api' started.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840696774,"level":"info","msg":"Service 'db' started.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"db","svc":"db"}
{"ts":1744840696846,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"users","svc":"users"}
{"ts":1744840696846,"level":"info","msg":"***************************** - DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"users","svc":"users"}
{"ts":1744840696846,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696846,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696846,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696847,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696847,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696847,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696847,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696847,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696847,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696848,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696848,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696848,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696848,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696848,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696848,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696848,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696848,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696848,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696849,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696849,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696849,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696849,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696849,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696849,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696849,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696849,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696849,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696849,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696849,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696849,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696849,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696849,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696849,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696849,"level":"info","msg":"'users' service is registered.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"registry"}
{"ts":1744840696849,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696849,"level":"info","msg":"Service 'users' started.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"users","svc":"users"}
{"ts":1744840696854,"level":"info","msg":"Sequelize adapter has connected successfully.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840696854,"level":"info","msg":"process.env.DB_URL postgres://postgres:dkimani24@localhost:5444/moleculer_db","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840696855,"level":"debug","msg":"Service Level 'Before' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696855,"level":"debug","msg":"Service Level 'After' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696855,"level":"debug","msg":"Service Level 'Error' Hooks of 'find' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696855,"level":"debug","msg":"Service Level 'Before' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696855,"level":"debug","msg":"Service Level 'After' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696856,"level":"debug","msg":"Service Level 'Error' Hooks of 'count' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696856,"level":"debug","msg":"Service Level 'Before' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696856,"level":"debug","msg":"Service Level 'After' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696856,"level":"debug","msg":"Service Level 'Error' Hooks of 'list' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696857,"level":"debug","msg":"Service Level 'Before' Hooks of 'create' action: [ 'create' ]","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696857,"level":"debug","msg":"Service Level 'After' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696857,"level":"debug","msg":"Service Level 'Error' Hooks of 'create' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696857,"level":"debug","msg":"Service Level 'Before' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696857,"level":"debug","msg":"Service Level 'After' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696857,"level":"debug","msg":"Service Level 'Error' Hooks of 'insert' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696857,"level":"debug","msg":"Service Level 'Before' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696857,"level":"debug","msg":"Service Level 'After' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696857,"level":"debug","msg":"Service Level 'Error' Hooks of 'get' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696857,"level":"debug","msg":"Service Level 'Before' Hooks of 'update' action: [ 'update' ]","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696858,"level":"debug","msg":"Service Level 'After' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696858,"level":"debug","msg":"Service Level 'Error' Hooks of 'update' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696858,"level":"debug","msg":"Service Level 'Before' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696858,"level":"debug","msg":"Service Level 'After' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696858,"level":"debug","msg":"Service Level 'Error' Hooks of 'remove' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696858,"level":"debug","msg":"Service Level 'Before' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696858,"level":"debug","msg":"Service Level 'After' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696858,"level":"debug","msg":"Service Level 'Error' Hooks of 'register' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696858,"level":"debug","msg":"Service Level 'Before' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696858,"level":"debug","msg":"Service Level 'After' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696858,"level":"debug","msg":"Service Level 'Error' Hooks of 'login' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696858,"level":"debug","msg":"Service Level 'Before' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696858,"level":"debug","msg":"Service Level 'After' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696858,"level":"debug","msg":"Service Level 'Error' Hooks of 'changePassword' action: []","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696858,"level":"info","msg":"'auth' service is registered.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"registry"}
{"ts":1744840696858,"level":"debug","msg":"Broadcast '$services.changed' local event.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696858,"level":"info","msg":"Service 'auth' started.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"auth","svc":"auth"}
{"ts":1744840696859,"level":"debug","msg":"Broadcast '$broker.started' local event.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696859,"level":"info","msg":"âœ” ServiceBroker with 5 service(s) started successfully in 103ms.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840696974,"level":"info","msg":"Database connection established successfully","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"db","svc":"db"}
{"ts":1744840697359,"level":"info","msg":"â™» Generate aliases for '/api' route...","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840697360,"level":"info","msg":"     GET /api/api/list-aliases => api.listAliases","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840697361,"level":"info","msg":"     GET /api/db => db.list","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840697361,"level":"info","msg":"    POST /api/db => db.create","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840697361,"level":"info","msg":"     GET /api/db/:id => db.get","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840697361,"level":"info","msg":"     PUT /api/db/:id => db.update","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840697361,"level":"info","msg":"  DELETE /api/db/:id => db.remove","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840697361,"level":"info","msg":"     GET /api/users => users.list","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840697361,"level":"info","msg":"    POST /api/users => users.create","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840697361,"level":"info","msg":"     GET /api/users/:id => users.get","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840697361,"level":"info","msg":"     PUT /api/users/:id => users.update","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840697361,"level":"info","msg":"  DELETE /api/users/:id => users.remove","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840697361,"level":"info","msg":"     GET /api/auth => auth.list","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840697361,"level":"info","msg":"    POST /api/auth => auth.create","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840697361,"level":"info","msg":"     GET /api/auth/:id => auth.get","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840697361,"level":"info","msg":"     PUT /api/auth/:id => auth.update","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840697361,"level":"info","msg":"  DELETE /api/auth/:id => auth.remove","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840697362,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' event.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840697362,"level":"debug","msg":"Broadcast '$api.aliases.regenerated' local event.","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840699554,"level":"info","msg":"=> POST /api/users/login","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840699561,"level":"debug","msg":"  Alias:   POST /api/users/login => users.login","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840699561,"level":"info","msg":"   Call 'users.login' action","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840699561,"level":"debug","msg":"   Params: { email: 'john@example.com', password: '123@123' }","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
{"ts":1744840699562,"level":"debug","msg":"Call action locally. { action: 'users.login', requestID: '996ed431-353d-4aee-822e-70dec51e0753' }","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"broker"}
{"ts":1744840699581,"level":"info","msg":"USER : [object SequelizeInstance:User]","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"users","svc":"users"}
{"ts":1744840699644,"level":"info","msg":"<= 200 POST /api/users/login [+90.183 ms]","nodeID":"daniels-macbook-pro.local-36558","ns":"","mod":"api","svc":"api"}
